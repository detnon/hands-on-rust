{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2","program":"/Users/samuel/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","safe_arch","--edition=2018","/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","split-debuginfo=unpacked","-C","debuginfo=2","--cfg","feature=\"bytemuck\"","--cfg","feature=\"default\"","-C","metadata=34ad784cb88254e5","-C","extra-filename=-34ad784cb88254e5","--out-dir","/Users/samuel/Dev/hands-on-rust/popsicle/target/rls/debug/deps","-L","dependency=/Users/samuel/Dev/hands-on-rust/popsicle/target/rls/debug/deps","--extern","bytemuck=/Users/samuel/Dev/hands-on-rust/popsicle/target/rls/debug/deps/libbytemuck-6b418336553d0ac1.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/samuel/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/samuel/Dev/hands-on-rust/popsicle/target/rls/debug/deps/libsafe_arch-34ad784cb88254e5.rmeta"},"prelude":{"crate_id":{"name":"safe_arch","disambiguator":[13917845037979965918,0]},"crate_root":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src","external_crates":[{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[9994580471200982198,0]}},{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[13944031075627487246,0]}},{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[5133993387825513881,0]}},{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","num":4,"id":{"name":"bytemuck","disambiguator":[1807583600190193980,0]}}],"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":0,"byte_end":12154,"line_start":1,"line_end":286,"column_start":1,"column_end":4}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":0,"byte_end":12154,"line_start":1,"line_end":286,"column_start":1,"column_end":4},"name":"","qualname":"::","value":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":15},{"krate":0,"index":18},{"krate":0,"index":21},{"krate":0,"index":24},{"krate":0,"index":27},{"krate":0,"index":30},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":37},{"krate":0,"index":40},{"krate":0,"index":43},{"krate":0,"index":46},{"krate":0,"index":49},{"krate":0,"index":52},{"krate":0,"index":55},{"krate":0,"index":58},{"krate":0,"index":61},{"krate":0,"index":64},{"krate":0,"index":67},{"krate":0,"index":70},{"krate":0,"index":73},{"krate":0,"index":76},{"krate":0,"index":79},{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":91}],"decl_id":null,"docs":" A crate that safely exposes arch intrinsics via `#[cfg()]`.","sig":null,"attributes":[{"value":"no_std","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":0,"byte_end":10,"line_start":1,"line_end":1,"column_start":1,"column_end":11}},{"value":"warn(missing_docs)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":11,"byte_end":33,"line_start":2,"line_end":2,"column_start":1,"column_end":23}},{"value":"allow(unused_imports)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":34,"byte_end":59,"line_start":3,"line_end":3,"column_start":1,"column_end":26}},{"value":"allow(clippy :: transmute_ptr_to_ptr)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":60,"byte_end":99,"line_start":4,"line_end":4,"column_start":1,"column_end":40}},{"value":"/ A crate that safely exposes arch intrinsics via `#[cfg()]`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":141,"byte_end":204,"line_start":7,"line_end":7,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":205,"byte_end":208,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ `safe_arch` lets you safely use CPU intrinsics. Those things in the","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":209,"byte_end":280,"line_start":9,"line_end":9,"column_start":1,"column_end":72}},{"value":"/ [`core::arch`](core::arch) modules. It works purely via `#[cfg()]` and","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":281,"byte_end":355,"line_start":10,"line_end":10,"column_start":1,"column_end":75}},{"value":"/ compile time CPU feature declaration. If you want to check for a feature at","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":356,"byte_end":435,"line_start":11,"line_end":11,"column_start":1,"column_end":80}},{"value":"/ runtime and then call an intrinsic or use a fallback path based on that then","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":436,"byte_end":516,"line_start":12,"line_end":12,"column_start":1,"column_end":81}},{"value":"/ this crate is sadly not for you.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":517,"byte_end":553,"line_start":13,"line_end":13,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":554,"byte_end":557,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ SIMD register types are \"newtype'd\" so that better trait impls can be given","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":558,"byte_end":637,"line_start":15,"line_end":15,"column_start":1,"column_end":80}},{"value":"/ to them, but the inner value is a `pub` field so feel free to just grab it","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":638,"byte_end":716,"line_start":16,"line_end":16,"column_start":1,"column_end":79}},{"value":"/ out if you need to. Trait impls of the newtypes include: `Default` (zeroed),","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":717,"byte_end":797,"line_start":17,"line_end":17,"column_start":1,"column_end":81}},{"value":"/ `From`/`Into` of appropriate data types, and appropriate operator","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":798,"byte_end":867,"line_start":18,"line_end":18,"column_start":1,"column_end":70}},{"value":"/ overloading.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":868,"byte_end":884,"line_start":19,"line_end":19,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":885,"byte_end":888,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ * Most intrinsics (like addition and multiplication) are totally safe to use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":889,"byte_end":969,"line_start":21,"line_end":21,"column_start":1,"column_end":81}},{"value":"/   as long as the CPU feature is available. In this case, what you get is 1:1","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":970,"byte_end":1050,"line_start":22,"line_end":22,"column_start":1,"column_end":81}},{"value":"/   with the actual intrinsic.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":1051,"byte_end":1083,"line_start":23,"line_end":23,"column_start":1,"column_end":33}},{"value":"/ * Some intrinsics take a pointer of an assumed minimum alignment and","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":1084,"byte_end":1156,"line_start":24,"line_end":24,"column_start":1,"column_end":73}},{"value":"/   validity span. For these, the `safe_arch` function takes a reference of an","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":1157,"byte_end":1237,"line_start":25,"line_end":25,"column_start":1,"column_end":81}},{"value":"/   appropriate type to uphold safety.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":1238,"byte_end":1278,"line_start":26,"line_end":26,"column_start":1,"column_end":41}},{"value":"/   * Try the [bytemuck](https://docs.rs/bytemuck) crate (and turn on the","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":1279,"byte_end":1354,"line_start":27,"line_end":27,"column_start":1,"column_end":76}},{"value":"/     `bytemuck` feature of this crate) if you want help safely casting","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":1355,"byte_end":1428,"line_start":28,"line_end":28,"column_start":1,"column_end":74}},{"value":"/     between reference types.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":1429,"byte_end":1461,"line_start":29,"line_end":29,"column_start":1,"column_end":33}},{"value":"/ * Some intrinsics are not safe unless you're _very_ careful about how you","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":1462,"byte_end":1539,"line_start":30,"line_end":30,"column_start":1,"column_end":78}},{"value":"/   use them, such as the streaming operations requiring you to use them in","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":1540,"byte_end":1617,"line_start":31,"line_end":31,"column_start":1,"column_end":78}},{"value":"/   combination with an appropriate memory fence. Those operations aren't","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":1618,"byte_end":1693,"line_start":32,"line_end":32,"column_start":1,"column_end":76}},{"value":"/   exposed here.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":1694,"byte_end":1713,"line_start":33,"line_end":33,"column_start":1,"column_end":20}},{"value":"/ * Some intrinsics mess with the processor state, such as changing the","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":1714,"byte_end":1787,"line_start":34,"line_end":34,"column_start":1,"column_end":74}},{"value":"/   floating point flags, saving and loading special register state, and so","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":1788,"byte_end":1865,"line_start":35,"line_end":35,"column_start":1,"column_end":78}},{"value":"/   on. LLVM doesn't really support you messing with that within a high level","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":1866,"byte_end":1945,"line_start":36,"line_end":36,"column_start":1,"column_end":80}},{"value":"/   language, so those operations aren't exposed here. Use assembly or","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":1946,"byte_end":2018,"line_start":37,"line_end":37,"column_start":1,"column_end":73}},{"value":"/   something if you want to do that.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":2019,"byte_end":2058,"line_start":38,"line_end":38,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":2059,"byte_end":2062,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ ## Naming Conventions","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":2063,"byte_end":2088,"line_start":40,"line_end":40,"column_start":1,"column_end":26}},{"value":"/ The `safe_arch` crate does not simply use the \"official\" names for each","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":2089,"byte_end":2164,"line_start":41,"line_end":41,"column_start":1,"column_end":76}},{"value":"/ intrinsic, because the official names are generally poor. Instead, the","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":2165,"byte_end":2239,"line_start":42,"line_end":42,"column_start":1,"column_end":75}},{"value":"/ operations have been given better names that makes things hopefully easier","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":2240,"byte_end":2318,"line_start":43,"line_end":43,"column_start":1,"column_end":79}},{"value":"/ to understand then you're reading the code.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":2319,"byte_end":2366,"line_start":44,"line_end":44,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":2367,"byte_end":2370,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ For a full explanation of the naming used, see the [Naming","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":2371,"byte_end":2433,"line_start":46,"line_end":46,"column_start":1,"column_end":63}},{"value":"/ Conventions](crate::naming_conventions) page.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":2434,"byte_end":2483,"line_start":47,"line_end":47,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":2484,"byte_end":2487,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ ## Current Support","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":2488,"byte_end":2510,"line_start":49,"line_end":49,"column_start":1,"column_end":23}},{"value":"/ * `x86` / `x86_64` (Intel, AMD, etc)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":2511,"byte_end":2551,"line_start":50,"line_end":50,"column_start":1,"column_end":41}},{"value":"/   * 128-bit: `sse`, `sse2`, `sse3`, `ssse3`, `sse4.1`, `sse4.2`","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":2552,"byte_end":2619,"line_start":51,"line_end":51,"column_start":1,"column_end":68}},{"value":"/   * 256-bit: `avx`, `avx2`","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":2620,"byte_end":2650,"line_start":52,"line_end":52,"column_start":1,"column_end":31}},{"value":"/   * Other: `adx`, `aes`, `bmi1`, `bmi2`, `fma`, `lzcnt`, `pclmulqdq`,","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":2651,"byte_end":2724,"line_start":53,"line_end":53,"column_start":1,"column_end":74}},{"value":"/     `popcnt`, `rdrand`, `rdseed`","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":2725,"byte_end":2761,"line_start":54,"line_end":54,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":2762,"byte_end":2765,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ ## Compile Time CPU Target Features","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":2766,"byte_end":2805,"line_start":56,"line_end":56,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":2806,"byte_end":2809,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ At the time of me writing this, Rust enables the `sse` and `sse2` CPU","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":2810,"byte_end":2883,"line_start":58,"line_end":58,"column_start":1,"column_end":74}},{"value":"/ features by default for all `i686` (x86) and `x86_64` builds. Those CPU","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":2884,"byte_end":2959,"line_start":59,"line_end":59,"column_start":1,"column_end":76}},{"value":"/ features are built into the design of `x86_64`, and you'd need a _super_ old","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":2960,"byte_end":3040,"line_start":60,"line_end":60,"column_start":1,"column_end":81}},{"value":"/ `x86` CPU for it to not support at least `sse` and `sse2`, so they're a safe","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":3041,"byte_end":3121,"line_start":61,"line_end":61,"column_start":1,"column_end":81}},{"value":"/ bet for the language to enable all the time. In fact, because the standard","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":3122,"byte_end":3200,"line_start":62,"line_end":62,"column_start":1,"column_end":79}},{"value":"/ library is compiled with them enabled, simply trying to _disable_ those","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":3201,"byte_end":3276,"line_start":63,"line_end":63,"column_start":1,"column_end":76}},{"value":"/ features would actually cause ABI issues and fill your program with UB","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":3277,"byte_end":3351,"line_start":64,"line_end":64,"column_start":1,"column_end":75}},{"value":"/ ([link][rustc_docs]).","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":3352,"byte_end":3377,"line_start":65,"line_end":65,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":3378,"byte_end":3381,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ If you want additional CPU features available at compile time you'll have to","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":3382,"byte_end":3462,"line_start":67,"line_end":67,"column_start":1,"column_end":81}},{"value":"/ enable them with an additional arg to `rustc`. For a feature named `name`","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":3463,"byte_end":3540,"line_start":68,"line_end":68,"column_start":1,"column_end":78}},{"value":"/ you pass `-C target-feature=+name`, such as `-C target-feature=+sse3` for","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":3541,"byte_end":3618,"line_start":69,"line_end":69,"column_start":1,"column_end":78}},{"value":"/ `sse3`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":3619,"byte_end":3630,"line_start":70,"line_end":70,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":3631,"byte_end":3634,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ You can alternately enable _all_ target features of the current CPU with `-C","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":3635,"byte_end":3715,"line_start":72,"line_end":72,"column_start":1,"column_end":81}},{"value":"/ target-cpu=native`. This is primarily of use if you're building a program","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":3716,"byte_end":3793,"line_start":73,"line_end":73,"column_start":1,"column_end":78}},{"value":"/ you'll only run on your own system.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":3794,"byte_end":3833,"line_start":74,"line_end":74,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":3834,"byte_end":3837,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ It's sometimes hard to know if your target platform will support a given","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":3838,"byte_end":3914,"line_start":76,"line_end":76,"column_start":1,"column_end":77}},{"value":"/ feature set, but the [Steam Hardware Survey][steam-survey] is generally","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":3915,"byte_end":3990,"line_start":77,"line_end":77,"column_start":1,"column_end":76}},{"value":"/ taken as a guide to what you can expect people to have available. If you","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":3991,"byte_end":4067,"line_start":78,"line_end":78,"column_start":1,"column_end":77}},{"value":"/ click \"Other Settings\" it'll expand into a list of CPU target features and","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":4068,"byte_end":4146,"line_start":79,"line_end":79,"column_start":1,"column_end":79}},{"value":"/ how common they are. These days, it seems that `sse3` can be safely assumed,","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":4147,"byte_end":4227,"line_start":80,"line_end":80,"column_start":1,"column_end":81}},{"value":"/ and `ssse3`, `sse4.1`, and `sse4.2` are pretty safe bets as well. The stuff","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":4228,"byte_end":4307,"line_start":81,"line_end":81,"column_start":1,"column_end":80}},{"value":"/ above 128-bit isn't as common yet, give it another few years.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":4308,"byte_end":4373,"line_start":82,"line_end":82,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":4374,"byte_end":4377,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ **Please note that executing a program on a CPU that doesn't support the","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":4378,"byte_end":4454,"line_start":84,"line_end":84,"column_start":1,"column_end":77}},{"value":"/ target features it was compiles for is Undefined Behavior.**","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":4455,"byte_end":4519,"line_start":85,"line_end":85,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":4520,"byte_end":4523,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ Currently, Rust doesn't actually support an easy way for you to check that a","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":4524,"byte_end":4604,"line_start":87,"line_end":87,"column_start":1,"column_end":81}},{"value":"/ feature enabled at compile time is _actually_ available at runtime. There is","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":4605,"byte_end":4685,"line_start":88,"line_end":88,"column_start":1,"column_end":81}},{"value":"/ the \"[feature_detected][feature_detected]\" family of macros, but if you","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":4686,"byte_end":4761,"line_start":89,"line_end":89,"column_start":1,"column_end":76}},{"value":"/ enable a feature they will evaluate to a constant `true` instead of actually","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":4762,"byte_end":4842,"line_start":90,"line_end":90,"column_start":1,"column_end":81}},{"value":"/ deferring the check for the feature to runtime. This means that, if you","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":4843,"byte_end":4918,"line_start":91,"line_end":91,"column_start":1,"column_end":76}},{"value":"/ _did_ want a check at the start of your program, to confirm that all the","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":4919,"byte_end":4995,"line_start":92,"line_end":92,"column_start":1,"column_end":77}},{"value":"/ assumed features are present and error out when the assumptions don't hold,","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":4996,"byte_end":5075,"line_start":93,"line_end":93,"column_start":1,"column_end":80}},{"value":"/ you can't use that macro. You gotta use CPUID and check manually. rip.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":5076,"byte_end":5150,"line_start":94,"line_end":94,"column_start":1,"column_end":75}},{"value":"/ Hopefully we can make that process easier in a future version of this crate.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":5151,"byte_end":5231,"line_start":95,"line_end":95,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":5232,"byte_end":5235,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ [steam-survey]:","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":5236,"byte_end":5255,"line_start":97,"line_end":97,"column_start":1,"column_end":20}},{"value":"/ https://store.steampowered.com/hwsurvey/Steam-Hardware-Software-Survey-Welcome-to-Steam","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":5256,"byte_end":5347,"line_start":98,"line_end":98,"column_start":1,"column_end":92}},{"value":"/ [feature_detected]:","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":5348,"byte_end":5371,"line_start":99,"line_end":99,"column_start":1,"column_end":24}},{"value":"/ https://doc.rust-lang.org/std/index.html?search=feature_detected","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":5372,"byte_end":5440,"line_start":100,"line_end":100,"column_start":1,"column_end":69}},{"value":"/ [rustc_docs]: https://doc.rust-lang.org/rustc/targets/known-issues.html","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":5441,"byte_end":5516,"line_start":101,"line_end":101,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":5517,"byte_end":5520,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ ### A Note On Working With Cfg","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":5521,"byte_end":5555,"line_start":103,"line_end":103,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":5556,"byte_end":5559,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ There's two main ways to use `cfg`:","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":5560,"byte_end":5599,"line_start":105,"line_end":105,"column_start":1,"column_end":40}},{"value":"/ * Via an attribute placed on an item, block, or expression:","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":5600,"byte_end":5663,"line_start":106,"line_end":106,"column_start":1,"column_end":64}},{"value":"/   * `#[cfg(debug_assertions)] println!(\"hello\");`","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":5664,"byte_end":5717,"line_start":107,"line_end":107,"column_start":1,"column_end":54}},{"value":"/ * Via a macro used within an expression position:","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":5718,"byte_end":5771,"line_start":108,"line_end":108,"column_start":1,"column_end":54}},{"value":"/   * `if cfg!(debug_assertions) { println!(\"hello\"); }`","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":5772,"byte_end":5830,"line_start":109,"line_end":109,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":5831,"byte_end":5834,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ The difference might seem small but it's actually very important:","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":5835,"byte_end":5904,"line_start":111,"line_end":111,"column_start":1,"column_end":70}},{"value":"/ * The attribute form will include code or not _before_ deciding if all the","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":5905,"byte_end":5983,"line_start":112,"line_end":112,"column_start":1,"column_end":79}},{"value":"/   items named and so forth really exist or not. This means that code that is","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":5984,"byte_end":6064,"line_start":113,"line_end":113,"column_start":1,"column_end":81}},{"value":"/   configured via attribute can safely name things that don't always exist as","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":6065,"byte_end":6145,"line_start":114,"line_end":114,"column_start":1,"column_end":81}},{"value":"/   long as the things they name do exist whenever that code is configured","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":6146,"byte_end":6222,"line_start":115,"line_end":115,"column_start":1,"column_end":77}},{"value":"/   into the build.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":6223,"byte_end":6244,"line_start":116,"line_end":116,"column_start":1,"column_end":22}},{"value":"/ * The macro form will include the configured code _no matter what_, and then","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":6245,"byte_end":6325,"line_start":117,"line_end":117,"column_start":1,"column_end":81}},{"value":"/   the macro resolves to a constant `true` or `false` and the compiler uses","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":6326,"byte_end":6404,"line_start":118,"line_end":118,"column_start":1,"column_end":79}},{"value":"/   dead code elimination to cut out the path not taken.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":6405,"byte_end":6463,"line_start":119,"line_end":119,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":6464,"byte_end":6467,"line_start":120,"line_end":120,"column_start":1,"column_end":4}},{"value":"/ This crate uses `cfg` via the attribute, so the functions it exposes don't","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":6468,"byte_end":6546,"line_start":121,"line_end":121,"column_start":1,"column_end":79}},{"value":"/ exist at all when the appropriate CPU target features aren't enabled.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":6547,"byte_end":6620,"line_start":122,"line_end":122,"column_start":1,"column_end":74}},{"value":"/ Accordingly, if you plan to call this crate or not depending on what","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":6621,"byte_end":6693,"line_start":123,"line_end":123,"column_start":1,"column_end":73}},{"value":"/ features are enabled in the build you'll also need to control your use of","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":6694,"byte_end":6771,"line_start":124,"line_end":124,"column_start":1,"column_end":78}},{"value":"/ this crate via cfg attribute, not cfg macro.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":6772,"byte_end":6820,"line_start":125,"line_end":125,"column_start":1,"column_end":49}}]},{"kind":"Mod","id":{"krate":0,"index":82},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"naming_conventions","qualname":"::naming_conventions","value":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","parent":null,"children":[],"decl_id":null,"docs":" An explanation of the crate's naming conventions.","sig":null,"attributes":[{"value":"/ An explanation of the crate's naming conventions.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":12442,"byte_end":12495,"line_start":1,"line_end":1,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":12496,"byte_end":12499,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This crate attempts to follow the general naming scheme of `verb_type` when","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":12500,"byte_end":12579,"line_start":3,"line_end":3,"column_start":1,"column_end":80}},{"value":"/ the operation is \"simple\", and `verb_description_words_type` when the","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":12580,"byte_end":12653,"line_start":4,"line_end":4,"column_start":1,"column_end":74}},{"value":"/ operation (op) needs to be more specific than normal. Like this:","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":12654,"byte_end":12722,"line_start":5,"line_end":5,"column_start":1,"column_end":69}},{"value":"/ * `add_m128`","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":12723,"byte_end":12739,"line_start":6,"line_end":6,"column_start":1,"column_end":17}},{"value":"/ * `add_saturating_i8_m128i`","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":12740,"byte_end":12771,"line_start":7,"line_end":7,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":12772,"byte_end":12775,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ ## Types","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":12776,"byte_end":12788,"line_start":9,"line_end":9,"column_start":1,"column_end":13}},{"value":"/ Currently, only `x86` and `x86_64` types are supported. Among those types:","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":12789,"byte_end":12867,"line_start":10,"line_end":10,"column_start":1,"column_end":79}},{"value":"/ * `m128` and `m256` are always considered to hold `f32` lanes.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":12868,"byte_end":12934,"line_start":11,"line_end":11,"column_start":1,"column_end":67}},{"value":"/ * `m128d` and `m256d` are always considered to hold `f64` lanes.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":12935,"byte_end":13003,"line_start":12,"line_end":12,"column_start":1,"column_end":69}},{"value":"/ * `m128i` and `m256i` hold integer data, but each op specifies what lane","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":13004,"byte_end":13080,"line_start":13,"line_end":13,"column_start":1,"column_end":77}},{"value":"/   width of integers the operation uses.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":13081,"byte_end":13124,"line_start":14,"line_end":14,"column_start":1,"column_end":44}},{"value":"/ * If the type has `_s` on the end then it's a \"scalar\" operation that","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":13125,"byte_end":13198,"line_start":15,"line_end":15,"column_start":1,"column_end":74}},{"value":"/   affects just the lowest lane. The other lanes are generally copied forward","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":13199,"byte_end":13279,"line_start":16,"line_end":16,"column_start":1,"column_end":81}},{"value":"/   from one of the inputs, though the details there vary from op to op.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":13280,"byte_end":13354,"line_start":17,"line_end":17,"column_start":1,"column_end":75}},{"value":"/ * The SIMD types are often referred to as \"registers\" because each SIMD","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":13355,"byte_end":13430,"line_start":18,"line_end":18,"column_start":1,"column_end":76}},{"value":"/   typed value represents exactly one CPU register when you're doing work.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":13431,"byte_end":13508,"line_start":19,"line_end":19,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":13509,"byte_end":13512,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ ## Operations","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":13513,"byte_end":13530,"line_start":21,"line_end":21,"column_start":1,"column_end":18}},{"value":"/ There's many operations that can be performed. When possible, `safe_arch`","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":13531,"byte_end":13608,"line_start":22,"line_end":22,"column_start":1,"column_end":78}},{"value":"/ tries to follow normal Rust naming (eg: adding is still `add` and left","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":13609,"byte_end":13683,"line_start":23,"line_end":23,"column_start":1,"column_end":75}},{"value":"/ shifting is still `shl`), but if an operation doesn't normally exist at all","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":13684,"byte_end":13763,"line_start":24,"line_end":24,"column_start":1,"column_end":80}},{"value":"/ in Rust then we basically have to make something up.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":13764,"byte_end":13820,"line_start":25,"line_end":25,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":13821,"byte_end":13824,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ Many operations have more than one variant, such as `add` and also","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":13825,"byte_end":13895,"line_start":27,"line_end":27,"column_start":1,"column_end":71}},{"value":"/ `add_saturating`. In this case, `safe_arch` puts the \"core operation\" first","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":13896,"byte_end":13975,"line_start":28,"line_end":28,"column_start":1,"column_end":80}},{"value":"/ and then any \"modifiers\" go after, which isn't how you might normally say it","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":13976,"byte_end":14056,"line_start":29,"line_end":29,"column_start":1,"column_end":81}},{"value":"/ in English, but it makes the list of functions sort better.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":14057,"byte_end":14120,"line_start":30,"line_end":30,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":14121,"byte_end":14124,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ As a general note on SIMD terminology: When an operation uses the same","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":14125,"byte_end":14199,"line_start":32,"line_end":32,"column_start":1,"column_end":75}},{"value":"/ indexed lane in two _different_ registers to determine the output, that is a","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":14200,"byte_end":14280,"line_start":33,"line_end":33,"column_start":1,"column_end":81}},{"value":"/ \"vertical\" operation. When an operation uses more than one lane in the","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":14281,"byte_end":14355,"line_start":34,"line_end":34,"column_start":1,"column_end":75}},{"value":"/ _same_ register to determine the output, that is a \"horizontal\" operation.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":14356,"byte_end":14434,"line_start":35,"line_end":35,"column_start":1,"column_end":79}},{"value":"/ * Vertical: `out[0] = a[0] + b[0]`, `out[1] = a[1] + b[1]`","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":14435,"byte_end":14497,"line_start":36,"line_end":36,"column_start":1,"column_end":63}},{"value":"/ * Horizontal: `out[0] = a[0] + a[1]`, `out[1] = b[0] + b[1]`","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":14498,"byte_end":14562,"line_start":37,"line_end":37,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":14563,"byte_end":14566,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ ## Operation Glossary","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":14567,"byte_end":14592,"line_start":39,"line_end":39,"column_start":1,"column_end":26}},{"value":"/ Here follows the list of all the main operations and their explanations.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":14593,"byte_end":14669,"line_start":40,"line_end":40,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":14670,"byte_end":14673,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ * `abs`: Absolute value (wrapping).","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":14674,"byte_end":14713,"line_start":42,"line_end":42,"column_start":1,"column_end":40}},{"value":"/ * `add`: Addition. This is \"wrapping\" by default, though some other types of","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":14714,"byte_end":14794,"line_start":43,"line_end":43,"column_start":1,"column_end":81}},{"value":"/   addition are available. Remember that wrapping signed addition is the same","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":14795,"byte_end":14875,"line_start":44,"line_end":44,"column_start":1,"column_end":81}},{"value":"/   as wrapping unsigned addition.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":14876,"byte_end":14912,"line_start":45,"line_end":45,"column_start":1,"column_end":37}},{"value":"/ * `average`: Averages the two inputs.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":14913,"byte_end":14954,"line_start":46,"line_end":46,"column_start":1,"column_end":42}},{"value":"/ * `bitand`: Bitwise And, `a & b`, like [the trait](core::ops::BitAnd).","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":14955,"byte_end":15029,"line_start":47,"line_end":47,"column_start":1,"column_end":75}},{"value":"/ * `bitandnot`: Bitwise `(!a) & b`. This seems a little funny at first but","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":15030,"byte_end":15107,"line_start":48,"line_end":48,"column_start":1,"column_end":78}},{"value":"/   it's useful for clearing bits. The output will be based on the `b` side's","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":15108,"byte_end":15187,"line_start":49,"line_end":49,"column_start":1,"column_end":80}},{"value":"/   bit pattern, but with all active bits in `a` cleared:","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":15188,"byte_end":15247,"line_start":50,"line_end":50,"column_start":1,"column_end":60}},{"value":"/   * `bitandnot(0b0010, 0b1011) == 0b1001`","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":15248,"byte_end":15293,"line_start":51,"line_end":51,"column_start":1,"column_end":46}},{"value":"/ * `bitor`: Bitwise Or, `a | b`, like [the trait](core::ops::BitOr).","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":15294,"byte_end":15365,"line_start":52,"line_end":52,"column_start":1,"column_end":72}},{"value":"/ * `bitxor`: Bitwise eXclusive Or, `a ^ b`, like [the","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":15366,"byte_end":15422,"line_start":53,"line_end":53,"column_start":1,"column_end":57}},{"value":"/   trait](core::ops::BitXor).","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":15423,"byte_end":15455,"line_start":54,"line_end":54,"column_start":1,"column_end":33}},{"value":"/ * `blend`: Merge the data lanes of two SIMD values by taking either the `b`","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":15456,"byte_end":15535,"line_start":55,"line_end":55,"column_start":1,"column_end":80}},{"value":"/   value or `a` value for each lane. Depending on the instruction, the blend","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":15536,"byte_end":15615,"line_start":56,"line_end":56,"column_start":1,"column_end":80}},{"value":"/   mask can be either an immediate or a runtime value.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":15616,"byte_end":15673,"line_start":57,"line_end":57,"column_start":1,"column_end":58}},{"value":"/ * `cast`: Convert between data types while preserving the exact bit","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":15674,"byte_end":15745,"line_start":58,"line_end":58,"column_start":1,"column_end":72}},{"value":"/   patterns, like how [`transmute`](core::mem::transmute) works.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":15746,"byte_end":15813,"line_start":59,"line_end":59,"column_start":1,"column_end":68}},{"value":"/ * `ceil`: \"Ceiling\", rounds towards positive infinity.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":15814,"byte_end":15872,"line_start":60,"line_end":60,"column_start":1,"column_end":59}},{"value":"/ * `cmp`: Numeric comparisons of various kinds. This generally gives \"mask\"","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":15873,"byte_end":15951,"line_start":61,"line_end":61,"column_start":1,"column_end":79}},{"value":"/   output where the output value is of the same data type as the inputs, but","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":15952,"byte_end":16031,"line_start":62,"line_end":62,"column_start":1,"column_end":80}},{"value":"/   with all the bits in a \"true\" lane as 1 and all the bits in a \"false\" lane","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":16032,"byte_end":16112,"line_start":63,"line_end":63,"column_start":1,"column_end":81}},{"value":"/   as 0. Remember that with floating point values all 1s bits is a NaN, and","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":16113,"byte_end":16191,"line_start":64,"line_end":64,"column_start":1,"column_end":79}},{"value":"/   with signed integers all 1s bits is -1.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":16192,"byte_end":16237,"line_start":65,"line_end":65,"column_start":1,"column_end":46}},{"value":"/   * An \"Ordered comparison\" checks if _neither_ floating point value is NaN.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":16238,"byte_end":16318,"line_start":66,"line_end":66,"column_start":1,"column_end":81}},{"value":"/   * An \"Unordered comparison\" checks if _either_ floating point value is","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":16319,"byte_end":16395,"line_start":67,"line_end":67,"column_start":1,"column_end":77}},{"value":"/     NaN.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":16396,"byte_end":16408,"line_start":68,"line_end":68,"column_start":1,"column_end":13}},{"value":"/ * `convert`: This does some sort of numeric type change. The details can","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":16409,"byte_end":16485,"line_start":69,"line_end":69,"column_start":1,"column_end":77}},{"value":"/   vary wildly. Generally, if the number of lanes goes down then the lowest","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":16486,"byte_end":16564,"line_start":70,"line_end":70,"column_start":1,"column_end":79}},{"value":"/   lanes will be kept. If the number of lanes goes up then the new high lanes","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":16565,"byte_end":16645,"line_start":71,"line_end":71,"column_start":1,"column_end":81}},{"value":"/   will be zero.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":16646,"byte_end":16665,"line_start":72,"line_end":72,"column_start":1,"column_end":20}},{"value":"/ * `div`: Division.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":16666,"byte_end":16688,"line_start":73,"line_end":73,"column_start":1,"column_end":23}},{"value":"/ * `dot_product`: This works like the matrix math operation. The lanes are","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":16689,"byte_end":16766,"line_start":74,"line_end":74,"column_start":1,"column_end":78}},{"value":"/   multiplied and then the results are summed up into a single value.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":16767,"byte_end":16839,"line_start":75,"line_end":75,"column_start":1,"column_end":73}},{"value":"/ * `duplicate`: Copy the even or odd indexed lanes to the other set of lanes.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":16840,"byte_end":16920,"line_start":76,"line_end":76,"column_start":1,"column_end":81}},{"value":"/   Eg, `[1, 2, 3, 4]` becomes `[1, 1, 3, 3]` or `[2, 2, 4, 4]`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":16921,"byte_end":16987,"line_start":77,"line_end":77,"column_start":1,"column_end":67}},{"value":"/ * `extract`: Get a value from the lane of a SIMD type into a scalar type.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":16988,"byte_end":17065,"line_start":78,"line_end":78,"column_start":1,"column_end":78}},{"value":"/ * `floor`: Rounds towards negative infinity.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":17066,"byte_end":17114,"line_start":79,"line_end":79,"column_start":1,"column_end":49}},{"value":"/ * `fused`: All the fused operations are a multiply as well as some sort of","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":17115,"byte_end":17193,"line_start":80,"line_end":80,"column_start":1,"column_end":79}},{"value":"/   adding or subtracting. The details depend on which fused operation you","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":17194,"byte_end":17270,"line_start":81,"line_end":81,"column_start":1,"column_end":77}},{"value":"/   select. The benefit of this operation over a non-fused operation are that","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":17271,"byte_end":17350,"line_start":82,"line_end":82,"column_start":1,"column_end":80}},{"value":"/   it can compute slightly faster than doing the mul and add separately, and","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":17351,"byte_end":17430,"line_start":83,"line_end":83,"column_start":1,"column_end":80}},{"value":"/   also the output can have higher accuracy in the result.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":17431,"byte_end":17492,"line_start":84,"line_end":84,"column_start":1,"column_end":62}},{"value":"/ * `insert`: The opposite of `extract`, this puts a new value into a","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":17493,"byte_end":17564,"line_start":85,"line_end":85,"column_start":1,"column_end":72}},{"value":"/   particular lane of a SIMD type.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":17565,"byte_end":17602,"line_start":86,"line_end":86,"column_start":1,"column_end":38}},{"value":"/ * `load`: Reads an address and makes a SIMD register value. The details can","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":17603,"byte_end":17682,"line_start":87,"line_end":87,"column_start":1,"column_end":80}},{"value":"/   vary because there's more than one type of `load`, but generally this is a","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":17683,"byte_end":17763,"line_start":88,"line_end":88,"column_start":1,"column_end":81}},{"value":"/   `&T -> U` style operation.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":17764,"byte_end":17796,"line_start":89,"line_end":89,"column_start":1,"column_end":33}},{"value":"/ * `max`: Picks the larger value from each of the two inputs.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":17797,"byte_end":17861,"line_start":90,"line_end":90,"column_start":1,"column_end":65}},{"value":"/ * `min`: Picks the smaller value from each of the two inputs.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":17862,"byte_end":17927,"line_start":91,"line_end":91,"column_start":1,"column_end":66}},{"value":"/ * `mul`: Multiplication. For floating point this is just \"normal\"","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":17928,"byte_end":17997,"line_start":92,"line_end":92,"column_start":1,"column_end":70}},{"value":"/   multiplication, but for integer types you tend to have some options. An","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":17998,"byte_end":18075,"line_start":93,"line_end":93,"column_start":1,"column_end":78}},{"value":"/   integer multiplication of X bits will produce a 2X bit output, so","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":18076,"byte_end":18147,"line_start":94,"line_end":94,"column_start":1,"column_end":72}},{"value":"/   generally you'll get to pick if you want to keep the high half of that,","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":18148,"byte_end":18225,"line_start":95,"line_end":95,"column_start":1,"column_end":78}},{"value":"/   the low half of that (a normal \"wrapping\" mul), or \"widen\" the outputs to","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":18226,"byte_end":18305,"line_start":96,"line_end":96,"column_start":1,"column_end":80}},{"value":"/   be all the bits at the expense of not multiplying half the lanes the","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":18306,"byte_end":18380,"line_start":97,"line_end":97,"column_start":1,"column_end":75}},{"value":"/   lanes.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":18381,"byte_end":18393,"line_start":98,"line_end":98,"column_start":1,"column_end":13}},{"value":"/ * `pack`: Take the integers in the `a` and `b` inputs, reduce them to fit","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":18394,"byte_end":18471,"line_start":99,"line_end":99,"column_start":1,"column_end":78}},{"value":"/   within the half-sized integer type (eg: `i16` to `i8`), and pack them all","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":18472,"byte_end":18551,"line_start":100,"line_end":100,"column_start":1,"column_end":80}},{"value":"/   together into the output.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":18552,"byte_end":18583,"line_start":101,"line_end":101,"column_start":1,"column_end":32}},{"value":"/ * `population`: The \"population\" operations refer to the bits within an","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":18584,"byte_end":18659,"line_start":102,"line_end":102,"column_start":1,"column_end":76}},{"value":"/   integer. Either counting them or adjusting them in various ways.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":18660,"byte_end":18730,"line_start":103,"line_end":103,"column_start":1,"column_end":71}},{"value":"/ * `rdrand`: Use the hardware RNG to make a random value of the given length.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":18731,"byte_end":18811,"line_start":104,"line_end":104,"column_start":1,"column_end":81}},{"value":"/ * `rdseed`: Use the hardware RNG to make a random seed of the given length.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":18812,"byte_end":18891,"line_start":105,"line_end":105,"column_start":1,"column_end":80}},{"value":"/   This is less commonly available, but theoretically an improvement over","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":18892,"byte_end":18968,"line_start":106,"line_end":106,"column_start":1,"column_end":77}},{"value":"/   `rdrand` in that if you have to combine more than one usage of this","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":18969,"byte_end":19042,"line_start":107,"line_end":107,"column_start":1,"column_end":74}},{"value":"/   operation to make your full seed size then the guess difficulty rises at a","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":19043,"byte_end":19123,"line_start":108,"line_end":108,"column_start":1,"column_end":81}},{"value":"/   multiplicative rate instead of just an additive rate. For example, two","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":19124,"byte_end":19200,"line_start":109,"line_end":109,"column_start":1,"column_end":77}},{"value":"/   `u64` outputs concatenated to a single `u128` have a guess difficulty of","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":19201,"byte_end":19279,"line_start":110,"line_end":110,"column_start":1,"column_end":79}},{"value":"/   2^(64*64) with `rdseed` but only 2^(64+64) with `rdrand`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":19280,"byte_end":19343,"line_start":111,"line_end":111,"column_start":1,"column_end":64}},{"value":"/ * `read_timestamp_counter`: Lets you read the CPU's cycle counter, which","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":19344,"byte_end":19420,"line_start":112,"line_end":112,"column_start":1,"column_end":77}},{"value":"/   doesn't strictly mean anything in particular since even the CPU's clock","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":19421,"byte_end":19498,"line_start":113,"line_end":113,"column_start":1,"column_end":78}},{"value":"/   rate isn't even stable over time, but you might find it interesting as an","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":19499,"byte_end":19578,"line_start":114,"line_end":114,"column_start":1,"column_end":80}},{"value":"/   approximation during benchmarks, or something like that.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":19579,"byte_end":19641,"line_start":115,"line_end":115,"column_start":1,"column_end":63}},{"value":"/ * `reciprocal`: Turns `x` into `1/x`. Can also be combined with a `sqrt`","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":19642,"byte_end":19718,"line_start":116,"line_end":116,"column_start":1,"column_end":77}},{"value":"/   operation.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":19719,"byte_end":19735,"line_start":117,"line_end":117,"column_start":1,"column_end":17}},{"value":"/ * `round`: Convert floating point values to whole numbers, according to one","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":19736,"byte_end":19815,"line_start":118,"line_end":118,"column_start":1,"column_end":80}},{"value":"/   of several available methods.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":19816,"byte_end":19851,"line_start":119,"line_end":119,"column_start":1,"column_end":36}},{"value":"/ * `set`: Places a list of scalar values into a SIMD lane. Conceptually","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":19852,"byte_end":19926,"line_start":120,"line_end":120,"column_start":1,"column_end":75}},{"value":"/   similar to how building an array works in Rust.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":19927,"byte_end":19980,"line_start":121,"line_end":121,"column_start":1,"column_end":54}},{"value":"/ * `splat`: Not generally an operation of its own, but a modifier to other","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":19981,"byte_end":20058,"line_start":122,"line_end":122,"column_start":1,"column_end":78}},{"value":"/   operations such as `load` and `set`. This will copy a given value across a","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":20059,"byte_end":20139,"line_start":123,"line_end":123,"column_start":1,"column_end":81}},{"value":"/   SIMD type as many times as it can be copied. For example, a 32-bit value","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":20140,"byte_end":20218,"line_start":124,"line_end":124,"column_start":1,"column_end":79}},{"value":"/   splatted into a 128-bit register will be copied four times.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":20219,"byte_end":20284,"line_start":125,"line_end":125,"column_start":1,"column_end":66}},{"value":"/ * `shl`: Bit shift left. New bits shifted in are always 0. Because the shift","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":20285,"byte_end":20365,"line_start":126,"line_end":126,"column_start":1,"column_end":81}},{"value":"/   is the same for both signed and unsigned values, this crate simply marks","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":20366,"byte_end":20444,"line_start":127,"line_end":127,"column_start":1,"column_end":79}},{"value":"/   left shift as always being an unsigned operation.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":20445,"byte_end":20500,"line_start":128,"line_end":128,"column_start":1,"column_end":56}},{"value":"/   * You can shift by an immediate value (\"imm\"), all lanes by the same value","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":20501,"byte_end":20581,"line_start":129,"line_end":129,"column_start":1,"column_end":81}},{"value":"/     (\"all\"), or each lane by its own value (\"each\").","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":20582,"byte_end":20638,"line_start":130,"line_end":130,"column_start":1,"column_end":57}},{"value":"/ * `shr`: Bit shift right. This comes in two forms: \"Arithmetic\" shifts shift","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":20639,"byte_end":20719,"line_start":131,"line_end":131,"column_start":1,"column_end":81}},{"value":"/   in the starting sign bit (which preserves the sign of the value), and","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":20720,"byte_end":20795,"line_start":132,"line_end":132,"column_start":1,"column_end":76}},{"value":"/   \"Logical\" shifts shift in 0 regardless of the starting sign bit (so the","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":20796,"byte_end":20873,"line_start":133,"line_end":133,"column_start":1,"column_end":78}},{"value":"/   result ends up being positive). With normal Rust types, signed integers","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":20874,"byte_end":20951,"line_start":134,"line_end":134,"column_start":1,"column_end":78}},{"value":"/   use arithmetic shifts and unsigned integers use logical shifts, so these","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":20952,"byte_end":21030,"line_start":135,"line_end":135,"column_start":1,"column_end":79}},{"value":"/   functions are marked as being for signed or unsigned integers","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":21031,"byte_end":21098,"line_start":136,"line_end":136,"column_start":1,"column_end":68}},{"value":"/   appropriately.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":21099,"byte_end":21119,"line_start":137,"line_end":137,"column_start":1,"column_end":21}},{"value":"/   * As with `shl`, you can shift by an immediate value (\"imm\"), all lanes by","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":21120,"byte_end":21200,"line_start":138,"line_end":138,"column_start":1,"column_end":81}},{"value":"/     the same value (\"all\"), or each lane by its own value (\"each\").","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":21201,"byte_end":21272,"line_start":139,"line_end":139,"column_start":1,"column_end":72}},{"value":"/ * `sign_apply`: Multiplies one set of values by the signum (1, 0, or -1) of","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":21273,"byte_end":21352,"line_start":140,"line_end":140,"column_start":1,"column_end":80}},{"value":"/   another set of values.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":21353,"byte_end":21381,"line_start":141,"line_end":141,"column_start":1,"column_end":29}},{"value":"/ * `sqrt`: Square Root.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":21382,"byte_end":21408,"line_start":142,"line_end":142,"column_start":1,"column_end":27}},{"value":"/ * `store`: Writes a SIMD value to a memory location.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":21409,"byte_end":21465,"line_start":143,"line_end":143,"column_start":1,"column_end":57}},{"value":"/ * `string_search`: A rather specialized instruction that lets you do byte","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":21466,"byte_end":21543,"line_start":144,"line_end":144,"column_start":1,"column_end":78}},{"value":"/   based searching within a register. This lets you do some very high speed","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":21544,"byte_end":21622,"line_start":145,"line_end":145,"column_start":1,"column_end":79}},{"value":"/   searching through ASCII strings when the stars align.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":21623,"byte_end":21682,"line_start":146,"line_end":146,"column_start":1,"column_end":60}},{"value":"/ * `sub`: Subtract.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":21683,"byte_end":21705,"line_start":147,"line_end":147,"column_start":1,"column_end":23}},{"value":"/ * `shuffle`: This lets you re-order the data lanes. Sometimes x86/x64 calls","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":21706,"byte_end":21785,"line_start":148,"line_end":148,"column_start":1,"column_end":80}},{"value":"/   this is called \"shuffle\", and sometimes it's called \"permute\", and there's","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":21786,"byte_end":21866,"line_start":149,"line_end":149,"column_start":1,"column_end":81}},{"value":"/   no particular reasoning behind the different names, so we just call them","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":21867,"byte_end":21945,"line_start":150,"line_end":150,"column_start":1,"column_end":79}},{"value":"/   all shuffle.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":21946,"byte_end":21964,"line_start":151,"line_end":151,"column_start":1,"column_end":19}},{"value":"/   * `shuffle_{args}_{lane-type}_{lane-sources}_{simd-type}`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":21965,"byte_end":22029,"line_start":152,"line_end":152,"column_start":1,"column_end":65}},{"value":"/   * \"args\" is the input arguments: `a` (one arg) or `ab` (two args), then","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":22030,"byte_end":22107,"line_start":153,"line_end":153,"column_start":1,"column_end":78}},{"value":"/     either `v` (runtime-varying) or `i` (immediate). All the immediate","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":22108,"byte_end":22182,"line_start":154,"line_end":154,"column_start":1,"column_end":75}},{"value":"/     shuffles are macros, of course.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":22183,"byte_end":22222,"line_start":155,"line_end":155,"column_start":1,"column_end":40}},{"value":"/   * \"lane type\" is `f32`, `f64`, `i8`, etc. If there's a `z` after the type","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":22223,"byte_end":22302,"line_start":156,"line_end":156,"column_start":1,"column_end":80}},{"value":"/     then you'll also be able to zero an output position instead of making it","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":22303,"byte_end":22383,"line_start":157,"line_end":157,"column_start":1,"column_end":81}},{"value":"/     come from a particular source lane.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":22384,"byte_end":22427,"line_start":158,"line_end":158,"column_start":1,"column_end":44}},{"value":"/   * \"lane sources\" is generally either \"all\" which means that all lanes can","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":22428,"byte_end":22507,"line_start":159,"line_end":159,"column_start":1,"column_end":80}},{"value":"/     go to all other lanes, or \"half\" which means that each half of the lanes","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":22508,"byte_end":22588,"line_start":160,"line_end":160,"column_start":1,"column_end":81}},{"value":"/     is isolated from the other half, and you can't cross data between the","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":22589,"byte_end":22666,"line_start":161,"line_end":161,"column_start":1,"column_end":78}},{"value":"/     two halves, only within a half (this is how most of the 256-bit x86/x64","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":22667,"byte_end":22746,"line_start":162,"line_end":162,"column_start":1,"column_end":80}},{"value":"/     shuffles work).","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":22747,"byte_end":22770,"line_start":163,"line_end":163,"column_start":1,"column_end":24}},{"value":"/ * `unpack`: Takes a SIMD value and gets out some of the lanes while widening","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":22771,"byte_end":22851,"line_start":164,"line_end":164,"column_start":1,"column_end":81}},{"value":"/   them, such as converting `i16` to `i32`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":22852,"byte_end":22898,"line_start":165,"line_end":165,"column_start":1,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":94},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9789047,"byte_end":9789051,"line_start":16,"line_end":16,"column_start":12,"column_end":16},"name":"m128","qualname":"::x86_x64::m128_::m128","value":"","parent":null,"children":[],"decl_id":null,"docs":" The data for a 128-bit SSE register of four `f32` lanes.","sig":null,"attributes":[{"value":"/ The data for a 128-bit SSE register of four `f32` lanes.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9788724,"byte_end":9788784,"line_start":9,"line_end":9,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9788785,"byte_end":9788788,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * This is _very similar to_ having `[f32; 4]`. The main difference is that","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9788789,"byte_end":9788867,"line_start":11,"line_end":11,"column_start":1,"column_end":79}},{"value":"/   it's aligned to 16 instead of just 4, and of course you can perform","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9788868,"byte_end":9788941,"line_start":12,"line_end":12,"column_start":1,"column_end":74}},{"value":"/   various intrinsic operations on it.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9788942,"byte_end":9788983,"line_start":13,"line_end":13,"column_start":1,"column_end":42}},{"value":"repr(transparent)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9788984,"byte_end":9789004,"line_start":14,"line_end":14,"column_start":1,"column_end":21}},{"value":"allow(non_camel_case_types)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9789005,"byte_end":9789035,"line_start":15,"line_end":15,"column_start":1,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":96},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9789052,"byte_end":9789062,"line_start":16,"line_end":16,"column_start":17,"column_end":27},"name":"0","qualname":"::x86_x64::m128_::m128::0","value":"core::arch::x86_64::__m128","parent":{"krate":0,"index":94},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":101},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9789615,"byte_end":9789623,"line_start":37,"line_end":37,"column_start":10,"column_end":18},"name":"to_array","qualname":"<m128>::to_array","value":"fn to_array(Self) -> [f32; ]","parent":null,"children":[],"decl_id":null,"docs":" Transmutes the `m128` to an array.","sig":null,"attributes":[{"value":"/ Transmutes the `m128` to an array.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9789446,"byte_end":9789484,"line_start":32,"line_end":32,"column_start":3,"column_end":41}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9789487,"byte_end":9789490,"line_start":33,"line_end":33,"column_start":3,"column_end":6}},{"value":"/ Same as `m.into()`, just lets you be more explicit about what's happening.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9789493,"byte_end":9789571,"line_start":34,"line_end":34,"column_start":3,"column_end":81}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9789574,"byte_end":9789585,"line_start":35,"line_end":35,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9789588,"byte_end":9789605,"line_start":36,"line_end":36,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":103},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9789850,"byte_end":9789860,"line_start":47,"line_end":47,"column_start":10,"column_end":20},"name":"from_array","qualname":"<m128>::from_array","value":"fn from_array([f32; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Transmutes an array into `m128`.","sig":null,"attributes":[{"value":"/ Transmutes an array into `m128`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9789667,"byte_end":9789703,"line_start":41,"line_end":41,"column_start":3,"column_end":39}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9789706,"byte_end":9789709,"line_start":42,"line_end":42,"column_start":3,"column_end":6}},{"value":"/ Same as `m128::from(arr)`, it just lets you be more explicit about what's","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9789712,"byte_end":9789789,"line_start":43,"line_end":43,"column_start":3,"column_end":80}},{"value":"/ happening.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9789792,"byte_end":9789806,"line_start":44,"line_end":44,"column_start":3,"column_end":17}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9789809,"byte_end":9789820,"line_start":45,"line_end":45,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9789823,"byte_end":9789840,"line_start":46,"line_end":46,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":105},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9790094,"byte_end":9790101,"line_start":58,"line_end":58,"column_start":10,"column_end":17},"name":"to_bits","qualname":"<m128>::to_bits","value":"fn to_bits(Self) -> [u32; ]","parent":null,"children":[],"decl_id":null,"docs":" Converts into the bit patterns of these floats (`[u32;4]`).","sig":null,"attributes":[{"value":"/ Converts into the bit patterns of these floats (`[u32;4]`).","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9789910,"byte_end":9789973,"line_start":53,"line_end":53,"column_start":3,"column_end":66}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9789976,"byte_end":9789979,"line_start":54,"line_end":54,"column_start":3,"column_end":6}},{"value":"/ Like [`f32::to_bits`](f32::to_bits), but all four lanes at once.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9789982,"byte_end":9790050,"line_start":55,"line_end":55,"column_start":3,"column_end":71}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9790053,"byte_end":9790064,"line_start":56,"line_end":56,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9790067,"byte_end":9790084,"line_start":57,"line_end":57,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":107},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9790359,"byte_end":9790368,"line_start":67,"line_end":67,"column_start":10,"column_end":19},"name":"from_bits","qualname":"<m128>::from_bits","value":"fn from_bits([u32; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Converts from the bit patterns of these floats (`[u32;4]`).","sig":null,"attributes":[{"value":"/ Converts from the bit patterns of these floats (`[u32;4]`).","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9790171,"byte_end":9790234,"line_start":62,"line_end":62,"column_start":3,"column_end":66}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9790237,"byte_end":9790240,"line_start":63,"line_end":63,"column_start":3,"column_end":6}},{"value":"/ Like [`f32::from_bits`](f32::from_bits), but all four lanes at once.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9790243,"byte_end":9790315,"line_start":64,"line_end":64,"column_start":3,"column_end":75}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9790318,"byte_end":9790329,"line_start":65,"line_end":65,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9790332,"byte_end":9790349,"line_start":66,"line_end":66,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9790505,"byte_end":9790510,"line_start":75,"line_end":75,"column_start":6,"column_end":11},"name":"clone","qualname":"<m128 as core::clone::Clone>::clone","value":"fn clone(&Self) -> Self","parent":{"krate":1,"index":2801},"children":[],"decl_id":{"krate":1,"index":2802},"docs":"","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9790468,"byte_end":9790479,"line_start":73,"line_end":73,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9790482,"byte_end":9790499,"line_start":74,"line_end":74,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":113},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9790630,"byte_end":9790637,"line_start":84,"line_end":84,"column_start":6,"column_end":13},"name":"default","qualname":"<m128 as core::default::Default>::default","value":"fn default() -> Self","parent":{"krate":1,"index":3157},"children":[],"decl_id":{"krate":1,"index":3158},"docs":"","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9790593,"byte_end":9790604,"line_start":82,"line_end":82,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9790607,"byte_end":9790624,"line_start":83,"line_end":83,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9790762,"byte_end":9790766,"line_start":92,"line_end":92,"column_start":6,"column_end":10},"name":"from","qualname":"<m128 as core::convert::From>::from","value":"fn from([f32; ]) -> Self","parent":{"krate":1,"index":3085},"children":[],"decl_id":{"krate":1,"index":3087},"docs":"","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9790725,"byte_end":9790736,"line_start":90,"line_end":90,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9790739,"byte_end":9790756,"line_start":91,"line_end":91,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":120},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9791108,"byte_end":9791112,"line_start":103,"line_end":103,"column_start":6,"column_end":10},"name":"from","qualname":"<[f32; 4] as core::convert::From>::from","value":"fn from(m128) -> Self","parent":{"krate":1,"index":3085},"children":[],"decl_id":{"krate":1,"index":3087},"docs":"","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9791071,"byte_end":9791082,"line_start":101,"line_end":101,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9791085,"byte_end":9791102,"line_start":102,"line_end":102,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":122},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9791506,"byte_end":9791509,"line_start":120,"line_end":120,"column_start":6,"column_end":9},"name":"fmt","qualname":"<m128 as core::fmt::Debug>::fmt","value":"fn fmt(&Self, &mut core::fmt::Formatter) -> core::fmt::Result","parent":{"krate":1,"index":10110},"children":[],"decl_id":{"krate":1,"index":10111},"docs":" Debug formats each float.\n ```\n # use safe_arch::*;\n let f = format!(\"{:?}\", m128::default());\n assert_eq!(&f, \"m128(0.0, 0.0, 0.0, 0.0)\");\n ```\n","sig":null,"attributes":[{"value":"/ Debug formats each float.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9791327,"byte_end":9791356,"line_start":114,"line_end":114,"column_start":3,"column_end":32}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9791359,"byte_end":9791366,"line_start":115,"line_end":115,"column_start":3,"column_end":10}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9791369,"byte_end":9791392,"line_start":116,"line_end":116,"column_start":3,"column_end":26}},{"value":"/ let f = format!(\"{:?}\", m128::default());","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9791395,"byte_end":9791440,"line_start":117,"line_end":117,"column_start":3,"column_end":48}},{"value":"/ assert_eq!(&f, \"m128(0.0, 0.0, 0.0, 0.0)\");","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9791443,"byte_end":9791490,"line_start":118,"line_end":118,"column_start":3,"column_end":50}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9791493,"byte_end":9791500,"line_start":119,"line_end":119,"column_start":3,"column_end":10}}]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9792002,"byte_end":9792005,"line_start":139,"line_end":139,"column_start":6,"column_end":9},"name":"fmt","qualname":"<m128 as core::fmt::Display>::fmt","value":"fn fmt(&Self, &mut core::fmt::Formatter) -> core::fmt::Result","parent":{"krate":1,"index":10117},"children":[],"decl_id":{"krate":1,"index":10118},"docs":" Display formats each float, and leaves the type name off of the font.\n ```\n # use safe_arch::*;\n let f = format!(\"{}\", m128::default());\n assert_eq!(&f, \"(0, 0, 0, 0)\");\n ```\n","sig":null,"attributes":[{"value":"/ Display formats each float, and leaves the type name off of the font.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9791793,"byte_end":9791866,"line_start":133,"line_end":133,"column_start":3,"column_end":76}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9791869,"byte_end":9791876,"line_start":134,"line_end":134,"column_start":3,"column_end":10}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9791879,"byte_end":9791902,"line_start":135,"line_end":135,"column_start":3,"column_end":26}},{"value":"/ let f = format!(\"{}\", m128::default());","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9791905,"byte_end":9791948,"line_start":136,"line_end":136,"column_start":3,"column_end":46}},{"value":"/ assert_eq!(&f, \"(0, 0, 0, 0)\");","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9791951,"byte_end":9791986,"line_start":137,"line_end":137,"column_start":3,"column_end":38}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9791989,"byte_end":9791996,"line_start":138,"line_end":138,"column_start":3,"column_end":10}}]},{"kind":"Method","id":{"krate":0,"index":126},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9792491,"byte_end":9792494,"line_start":158,"line_end":158,"column_start":6,"column_end":9},"name":"fmt","qualname":"<m128 as core::fmt::Binary>::fmt","value":"fn fmt(&Self, &mut core::fmt::Formatter) -> core::fmt::Result","parent":{"krate":1,"index":10121},"children":[],"decl_id":{"krate":1,"index":10122},"docs":" Binary formats each float's bit pattern (via [`f32::to_bits`]).\n ```\n # use safe_arch::*;\n let f = format!(\"{:b}\", m128::default());\n assert_eq!(&f, \"(0, 0, 0, 0)\");\n ```\n","sig":null,"attributes":[{"value":"/ Binary formats each float's bit pattern (via [`f32::to_bits`]).","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9792286,"byte_end":9792353,"line_start":152,"line_end":152,"column_start":3,"column_end":70}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9792356,"byte_end":9792363,"line_start":153,"line_end":153,"column_start":3,"column_end":10}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9792366,"byte_end":9792389,"line_start":154,"line_end":154,"column_start":3,"column_end":26}},{"value":"/ let f = format!(\"{:b}\", m128::default());","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9792392,"byte_end":9792437,"line_start":155,"line_end":155,"column_start":3,"column_end":48}},{"value":"/ assert_eq!(&f, \"(0, 0, 0, 0)\");","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9792440,"byte_end":9792475,"line_start":156,"line_end":156,"column_start":3,"column_end":38}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9792478,"byte_end":9792485,"line_start":157,"line_end":157,"column_start":3,"column_end":10}}]},{"kind":"Method","id":{"krate":0,"index":128},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9792965,"byte_end":9792968,"line_start":177,"line_end":177,"column_start":6,"column_end":9},"name":"fmt","qualname":"<m128 as core::fmt::LowerExp>::fmt","value":"fn fmt(&Self, &mut core::fmt::Formatter) -> core::fmt::Result","parent":{"krate":1,"index":10129},"children":[],"decl_id":{"krate":1,"index":10130},"docs":" LowerExp formats each float.\n ```\n # use safe_arch::*;\n let f = format!(\"{:e}\", m128::default());\n assert_eq!(&f, \"(0e0, 0e0, 0e0, 0e0)\");\n ```\n","sig":null,"attributes":[{"value":"/ LowerExp formats each float.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9792787,"byte_end":9792819,"line_start":171,"line_end":171,"column_start":3,"column_end":35}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9792822,"byte_end":9792829,"line_start":172,"line_end":172,"column_start":3,"column_end":10}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9792832,"byte_end":9792855,"line_start":173,"line_end":173,"column_start":3,"column_end":26}},{"value":"/ let f = format!(\"{:e}\", m128::default());","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9792858,"byte_end":9792903,"line_start":174,"line_end":174,"column_start":3,"column_end":48}},{"value":"/ assert_eq!(&f, \"(0e0, 0e0, 0e0, 0e0)\");","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9792906,"byte_end":9792949,"line_start":175,"line_end":175,"column_start":3,"column_end":46}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9792952,"byte_end":9792959,"line_start":176,"line_end":176,"column_start":3,"column_end":10}}]},{"kind":"Method","id":{"krate":0,"index":130},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9793430,"byte_end":9793433,"line_start":196,"line_end":196,"column_start":6,"column_end":9},"name":"fmt","qualname":"<m128 as core::fmt::UpperExp>::fmt","value":"fn fmt(&Self, &mut core::fmt::Formatter) -> core::fmt::Result","parent":{"krate":1,"index":10131},"children":[],"decl_id":{"krate":1,"index":10132},"docs":" UpperExp formats each float.\n ```\n # use safe_arch::*;\n let f = format!(\"{:E}\", m128::default());\n assert_eq!(&f, \"(0E0, 0E0, 0E0, 0E0)\");\n ```\n","sig":null,"attributes":[{"value":"/ UpperExp formats each float.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9793252,"byte_end":9793284,"line_start":190,"line_end":190,"column_start":3,"column_end":35}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9793287,"byte_end":9793294,"line_start":191,"line_end":191,"column_start":3,"column_end":10}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9793297,"byte_end":9793320,"line_start":192,"line_end":192,"column_start":3,"column_end":26}},{"value":"/ let f = format!(\"{:E}\", m128::default());","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9793323,"byte_end":9793368,"line_start":193,"line_end":193,"column_start":3,"column_end":48}},{"value":"/ assert_eq!(&f, \"(0E0, 0E0, 0E0, 0E0)\");","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9793371,"byte_end":9793414,"line_start":194,"line_end":194,"column_start":3,"column_end":46}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9793417,"byte_end":9793424,"line_start":195,"line_end":195,"column_start":3,"column_end":10}}]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9793924,"byte_end":9793927,"line_start":215,"line_end":215,"column_start":6,"column_end":9},"name":"fmt","qualname":"<m128 as core::fmt::LowerHex>::fmt","value":"fn fmt(&Self, &mut core::fmt::Formatter) -> core::fmt::Result","parent":{"krate":1,"index":10123},"children":[],"decl_id":{"krate":1,"index":10124},"docs":" LowerHex formats each float's bit pattern (via [`f32::to_bits`]).\n ```\n # use safe_arch::*;\n let f = format!(\"{:x}\", m128::default());\n assert_eq!(&f, \"(0, 0, 0, 0)\");\n ```\n","sig":null,"attributes":[{"value":"/ LowerHex formats each float's bit pattern (via [`f32::to_bits`]).","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9793717,"byte_end":9793786,"line_start":209,"line_end":209,"column_start":3,"column_end":72}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9793789,"byte_end":9793796,"line_start":210,"line_end":210,"column_start":3,"column_end":10}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9793799,"byte_end":9793822,"line_start":211,"line_end":211,"column_start":3,"column_end":26}},{"value":"/ let f = format!(\"{:x}\", m128::default());","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9793825,"byte_end":9793870,"line_start":212,"line_end":212,"column_start":3,"column_end":48}},{"value":"/ assert_eq!(&f, \"(0, 0, 0, 0)\");","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9793873,"byte_end":9793908,"line_start":213,"line_end":213,"column_start":3,"column_end":38}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9793911,"byte_end":9793918,"line_start":214,"line_end":214,"column_start":3,"column_end":10}}]},{"kind":"Method","id":{"krate":0,"index":134},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9794429,"byte_end":9794432,"line_start":234,"line_end":234,"column_start":6,"column_end":9},"name":"fmt","qualname":"<m128 as core::fmt::UpperHex>::fmt","value":"fn fmt(&Self, &mut core::fmt::Formatter) -> core::fmt::Result","parent":{"krate":1,"index":10125},"children":[],"decl_id":{"krate":1,"index":10126},"docs":" UpperHex formats each float's bit pattern (via [`f32::to_bits`]).\n ```\n # use safe_arch::*;\n let f = format!(\"{:X}\", m128::default());\n assert_eq!(&f, \"(0, 0, 0, 0)\");\n ```\n","sig":null,"attributes":[{"value":"/ UpperHex formats each float's bit pattern (via [`f32::to_bits`]).","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9794222,"byte_end":9794291,"line_start":228,"line_end":228,"column_start":3,"column_end":72}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9794294,"byte_end":9794301,"line_start":229,"line_end":229,"column_start":3,"column_end":10}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9794304,"byte_end":9794327,"line_start":230,"line_end":230,"column_start":3,"column_end":26}},{"value":"/ let f = format!(\"{:X}\", m128::default());","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9794330,"byte_end":9794375,"line_start":231,"line_end":231,"column_start":3,"column_end":48}},{"value":"/ assert_eq!(&f, \"(0, 0, 0, 0)\");","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9794378,"byte_end":9794413,"line_start":232,"line_end":232,"column_start":3,"column_end":38}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9794416,"byte_end":9794423,"line_start":233,"line_end":233,"column_start":3,"column_end":10}}]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9794928,"byte_end":9794931,"line_start":253,"line_end":253,"column_start":6,"column_end":9},"name":"fmt","qualname":"<m128 as core::fmt::Octal>::fmt","value":"fn fmt(&Self, &mut core::fmt::Formatter) -> core::fmt::Result","parent":{"krate":1,"index":10119},"children":[],"decl_id":{"krate":1,"index":10120},"docs":" Octal formats each float's bit pattern (via [`f32::to_bits`]).\n ```\n # use safe_arch::*;\n let f = format!(\"{:o}\", m128::default());\n assert_eq!(&f, \"(0, 0, 0, 0)\");\n ```\n","sig":null,"attributes":[{"value":"/ Octal formats each float's bit pattern (via [`f32::to_bits`]).","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9794724,"byte_end":9794790,"line_start":247,"line_end":247,"column_start":3,"column_end":69}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9794793,"byte_end":9794800,"line_start":248,"line_end":248,"column_start":3,"column_end":10}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9794803,"byte_end":9794826,"line_start":249,"line_end":249,"column_start":3,"column_end":26}},{"value":"/ let f = format!(\"{:o}\", m128::default());","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9794829,"byte_end":9794874,"line_start":250,"line_end":250,"column_start":3,"column_end":48}},{"value":"/ assert_eq!(&f, \"(0, 0, 0, 0)\");","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9794877,"byte_end":9794912,"line_start":251,"line_end":251,"column_start":3,"column_end":38}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9794915,"byte_end":9794922,"line_start":252,"line_end":252,"column_start":3,"column_end":10}}]},{"kind":"Struct","id":{"krate":0,"index":140},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9796042,"byte_end":9796047,"line_start":16,"line_end":16,"column_start":12,"column_end":17},"name":"m128d","qualname":"::x86_x64::m128d_::m128d","value":"","parent":null,"children":[],"decl_id":null,"docs":" The data for a 128-bit SSE register of two `f64` values.","sig":null,"attributes":[{"value":"/ The data for a 128-bit SSE register of two `f64` values.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9795719,"byte_end":9795779,"line_start":9,"line_end":9,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9795780,"byte_end":9795783,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * This is _very similar to_ having `[f64; 2]`. The main difference is that","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9795784,"byte_end":9795862,"line_start":11,"line_end":11,"column_start":1,"column_end":79}},{"value":"/   it's aligned to 16 instead of just 4, and of course you can perform","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9795863,"byte_end":9795936,"line_start":12,"line_end":12,"column_start":1,"column_end":74}},{"value":"/   various intrinsic operations on it.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9795937,"byte_end":9795978,"line_start":13,"line_end":13,"column_start":1,"column_end":42}},{"value":"repr(transparent)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9795979,"byte_end":9795999,"line_start":14,"line_end":14,"column_start":1,"column_end":21}},{"value":"allow(non_camel_case_types)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9796000,"byte_end":9796030,"line_start":15,"line_end":15,"column_start":1,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":142},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9796048,"byte_end":9796059,"line_start":16,"line_end":16,"column_start":18,"column_end":29},"name":"0","qualname":"::x86_x64::m128d_::m128d::0","value":"core::arch::x86_64::__m128d","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":147},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9796621,"byte_end":9796629,"line_start":37,"line_end":37,"column_start":10,"column_end":18},"name":"to_array","qualname":"<m128d>::to_array","value":"fn to_array(Self) -> [f64; ]","parent":null,"children":[],"decl_id":null,"docs":" Transmutes the `m128d` to an array.","sig":null,"attributes":[{"value":"/ Transmutes the `m128d` to an array.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9796451,"byte_end":9796490,"line_start":32,"line_end":32,"column_start":3,"column_end":42}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9796493,"byte_end":9796496,"line_start":33,"line_end":33,"column_start":3,"column_end":6}},{"value":"/ Same as `m.into()`, just lets you be more explicit about what's happening.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9796499,"byte_end":9796577,"line_start":34,"line_end":34,"column_start":3,"column_end":81}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9796580,"byte_end":9796591,"line_start":35,"line_end":35,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9796594,"byte_end":9796611,"line_start":36,"line_end":36,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":149},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9796858,"byte_end":9796868,"line_start":47,"line_end":47,"column_start":10,"column_end":20},"name":"from_array","qualname":"<m128d>::from_array","value":"fn from_array([f64; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Transmutes an array into `m128d`.","sig":null,"attributes":[{"value":"/ Transmutes an array into `m128d`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9796673,"byte_end":9796710,"line_start":41,"line_end":41,"column_start":3,"column_end":40}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9796713,"byte_end":9796716,"line_start":42,"line_end":42,"column_start":3,"column_end":6}},{"value":"/ Same as `m128d::from(arr)`, it just lets you be more explicit about what's","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9796719,"byte_end":9796797,"line_start":43,"line_end":43,"column_start":3,"column_end":81}},{"value":"/ happening.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9796800,"byte_end":9796814,"line_start":44,"line_end":44,"column_start":3,"column_end":17}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9796817,"byte_end":9796828,"line_start":45,"line_end":45,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9796831,"byte_end":9796848,"line_start":46,"line_end":46,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":151},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9797099,"byte_end":9797106,"line_start":58,"line_end":58,"column_start":10,"column_end":17},"name":"to_bits","qualname":"<m128d>::to_bits","value":"fn to_bits(Self) -> [u64; ]","parent":null,"children":[],"decl_id":null,"docs":" Converts into the bit patterns of these doubles (`[u64;2]`).","sig":null,"attributes":[{"value":"/ Converts into the bit patterns of these doubles (`[u64;2]`).","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9796918,"byte_end":9796982,"line_start":53,"line_end":53,"column_start":3,"column_end":67}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9796985,"byte_end":9796988,"line_start":54,"line_end":54,"column_start":3,"column_end":6}},{"value":"/ Like [`f64::to_bits`](f64::to_bits), but both lanes at once.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9796991,"byte_end":9797055,"line_start":55,"line_end":55,"column_start":3,"column_end":67}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9797058,"byte_end":9797069,"line_start":56,"line_end":56,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9797072,"byte_end":9797089,"line_start":57,"line_end":57,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":153},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9797361,"byte_end":9797370,"line_start":67,"line_end":67,"column_start":10,"column_end":19},"name":"from_bits","qualname":"<m128d>::from_bits","value":"fn from_bits([u64; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Converts from the bit patterns of these doubles (`[u64;2]`).","sig":null,"attributes":[{"value":"/ Converts from the bit patterns of these doubles (`[u64;2]`).","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9797176,"byte_end":9797240,"line_start":62,"line_end":62,"column_start":3,"column_end":67}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9797243,"byte_end":9797246,"line_start":63,"line_end":63,"column_start":3,"column_end":6}},{"value":"/ Like [`f64::from_bits`](f64::from_bits), but both lanes at once.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9797249,"byte_end":9797317,"line_start":64,"line_end":64,"column_start":3,"column_end":71}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9797320,"byte_end":9797331,"line_start":65,"line_end":65,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9797334,"byte_end":9797351,"line_start":66,"line_end":66,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9797508,"byte_end":9797513,"line_start":75,"line_end":75,"column_start":6,"column_end":11},"name":"clone","qualname":"<m128d as core::clone::Clone>::clone","value":"fn clone(&Self) -> Self","parent":{"krate":1,"index":2801},"children":[],"decl_id":{"krate":1,"index":2802},"docs":"","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9797471,"byte_end":9797482,"line_start":73,"line_end":73,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9797485,"byte_end":9797502,"line_start":74,"line_end":74,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":159},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9797635,"byte_end":9797642,"line_start":84,"line_end":84,"column_start":6,"column_end":13},"name":"default","qualname":"<m128d as core::default::Default>::default","value":"fn default() -> Self","parent":{"krate":1,"index":3157},"children":[],"decl_id":{"krate":1,"index":3158},"docs":"","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9797598,"byte_end":9797609,"line_start":82,"line_end":82,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9797612,"byte_end":9797629,"line_start":83,"line_end":83,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9797768,"byte_end":9797772,"line_start":92,"line_end":92,"column_start":6,"column_end":10},"name":"from","qualname":"<m128d as core::convert::From>::from","value":"fn from([f64; ]) -> Self","parent":{"krate":1,"index":3085},"children":[],"decl_id":{"krate":1,"index":3087},"docs":"","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9797731,"byte_end":9797742,"line_start":90,"line_end":90,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9797745,"byte_end":9797762,"line_start":91,"line_end":91,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9798115,"byte_end":9798119,"line_start":103,"line_end":103,"column_start":6,"column_end":10},"name":"from","qualname":"<[f64; 2] as core::convert::From>::from","value":"fn from(m128d) -> Self","parent":{"krate":1,"index":3085},"children":[],"decl_id":{"krate":1,"index":3087},"docs":"","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9798078,"byte_end":9798089,"line_start":101,"line_end":101,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9798092,"byte_end":9798109,"line_start":102,"line_end":102,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":168},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9798508,"byte_end":9798511,"line_start":120,"line_end":120,"column_start":6,"column_end":9},"name":"fmt","qualname":"<m128d as core::fmt::Debug>::fmt","value":"fn fmt(&Self, &mut core::fmt::Formatter) -> core::fmt::Result","parent":{"krate":1,"index":10110},"children":[],"decl_id":{"krate":1,"index":10111},"docs":" Debug formats each double.\n ```\n # use safe_arch::*;\n let f = format!(\"{:?}\", m128d::default());\n assert_eq!(&f, \"m128d(0.0, 0.0)\");\n ```\n","sig":null,"attributes":[{"value":"/ Debug formats each double.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9798336,"byte_end":9798366,"line_start":114,"line_end":114,"column_start":3,"column_end":33}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9798369,"byte_end":9798376,"line_start":115,"line_end":115,"column_start":3,"column_end":10}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9798379,"byte_end":9798402,"line_start":116,"line_end":116,"column_start":3,"column_end":26}},{"value":"/ let f = format!(\"{:?}\", m128d::default());","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9798405,"byte_end":9798451,"line_start":117,"line_end":117,"column_start":3,"column_end":49}},{"value":"/ assert_eq!(&f, \"m128d(0.0, 0.0)\");","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9798454,"byte_end":9798492,"line_start":118,"line_end":118,"column_start":3,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9798495,"byte_end":9798502,"line_start":119,"line_end":119,"column_start":3,"column_end":10}}]},{"kind":"Method","id":{"krate":0,"index":170},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9798961,"byte_end":9798964,"line_start":137,"line_end":137,"column_start":6,"column_end":9},"name":"fmt","qualname":"<m128d as core::fmt::Display>::fmt","value":"fn fmt(&Self, &mut core::fmt::Formatter) -> core::fmt::Result","parent":{"krate":1,"index":10117},"children":[],"decl_id":{"krate":1,"index":10118},"docs":" Display formats each double, and leaves the type name off of the font.\n ```\n # use safe_arch::*;\n let f = format!(\"{}\", m128d::default());\n assert_eq!(&f, \"(0, 0)\");\n ```\n","sig":null,"attributes":[{"value":"/ Display formats each double, and leaves the type name off of the font.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9798756,"byte_end":9798830,"line_start":131,"line_end":131,"column_start":3,"column_end":77}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9798833,"byte_end":9798840,"line_start":132,"line_end":132,"column_start":3,"column_end":10}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9798843,"byte_end":9798866,"line_start":133,"line_end":133,"column_start":3,"column_end":26}},{"value":"/ let f = format!(\"{}\", m128d::default());","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9798869,"byte_end":9798913,"line_start":134,"line_end":134,"column_start":3,"column_end":47}},{"value":"/ assert_eq!(&f, \"(0, 0)\");","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9798916,"byte_end":9798945,"line_start":135,"line_end":135,"column_start":3,"column_end":32}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9798948,"byte_end":9798955,"line_start":136,"line_end":136,"column_start":3,"column_end":10}}]},{"kind":"Method","id":{"krate":0,"index":172},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9799408,"byte_end":9799411,"line_start":154,"line_end":154,"column_start":6,"column_end":9},"name":"fmt","qualname":"<m128d as core::fmt::Binary>::fmt","value":"fn fmt(&Self, &mut core::fmt::Formatter) -> core::fmt::Result","parent":{"krate":1,"index":10121},"children":[],"decl_id":{"krate":1,"index":10122},"docs":" Binary formats each double's bit pattern (via [`f64::to_bits`]).\n ```\n # use safe_arch::*;\n let f = format!(\"{:b}\", m128d::default());\n assert_eq!(&f, \"(0, 0)\");\n ```\n","sig":null,"attributes":[{"value":"/ Binary formats each double's bit pattern (via [`f64::to_bits`]).","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9799207,"byte_end":9799275,"line_start":148,"line_end":148,"column_start":3,"column_end":71}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9799278,"byte_end":9799285,"line_start":149,"line_end":149,"column_start":3,"column_end":10}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9799288,"byte_end":9799311,"line_start":150,"line_end":150,"column_start":3,"column_end":26}},{"value":"/ let f = format!(\"{:b}\", m128d::default());","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9799314,"byte_end":9799360,"line_start":151,"line_end":151,"column_start":3,"column_end":49}},{"value":"/ assert_eq!(&f, \"(0, 0)\");","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9799363,"byte_end":9799392,"line_start":152,"line_end":152,"column_start":3,"column_end":32}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9799395,"byte_end":9799402,"line_start":153,"line_end":153,"column_start":3,"column_end":10}}]},{"kind":"Method","id":{"krate":0,"index":174},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9799844,"byte_end":9799847,"line_start":171,"line_end":171,"column_start":6,"column_end":9},"name":"fmt","qualname":"<m128d as core::fmt::LowerExp>::fmt","value":"fn fmt(&Self, &mut core::fmt::Formatter) -> core::fmt::Result","parent":{"krate":1,"index":10129},"children":[],"decl_id":{"krate":1,"index":10130},"docs":" LowerExp formats each double.\n ```\n # use safe_arch::*;\n let f = format!(\"{:e}\", m128d::default());\n assert_eq!(&f, \"(0e0, 0e0)\");\n ```\n","sig":null,"attributes":[{"value":"/ LowerExp formats each double.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9799674,"byte_end":9799707,"line_start":165,"line_end":165,"column_start":3,"column_end":36}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9799710,"byte_end":9799717,"line_start":166,"line_end":166,"column_start":3,"column_end":10}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9799720,"byte_end":9799743,"line_start":167,"line_end":167,"column_start":3,"column_end":26}},{"value":"/ let f = format!(\"{:e}\", m128d::default());","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9799746,"byte_end":9799792,"line_start":168,"line_end":168,"column_start":3,"column_end":49}},{"value":"/ assert_eq!(&f, \"(0e0, 0e0)\");","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9799795,"byte_end":9799828,"line_start":169,"line_end":169,"column_start":3,"column_end":36}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9799831,"byte_end":9799838,"line_start":170,"line_end":170,"column_start":3,"column_end":10}}]},{"kind":"Method","id":{"krate":0,"index":176},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9800264,"byte_end":9800267,"line_start":188,"line_end":188,"column_start":6,"column_end":9},"name":"fmt","qualname":"<m128d as core::fmt::UpperExp>::fmt","value":"fn fmt(&Self, &mut core::fmt::Formatter) -> core::fmt::Result","parent":{"krate":1,"index":10131},"children":[],"decl_id":{"krate":1,"index":10132},"docs":" UpperExp formats each double.\n ```\n # use safe_arch::*;\n let f = format!(\"{:E}\", m128d::default());\n assert_eq!(&f, \"(0E0, 0E0)\");\n ```\n","sig":null,"attributes":[{"value":"/ UpperExp formats each double.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9800094,"byte_end":9800127,"line_start":182,"line_end":182,"column_start":3,"column_end":36}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9800130,"byte_end":9800137,"line_start":183,"line_end":183,"column_start":3,"column_end":10}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9800140,"byte_end":9800163,"line_start":184,"line_end":184,"column_start":3,"column_end":26}},{"value":"/ let f = format!(\"{:E}\", m128d::default());","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9800166,"byte_end":9800212,"line_start":185,"line_end":185,"column_start":3,"column_end":49}},{"value":"/ assert_eq!(&f, \"(0E0, 0E0)\");","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9800215,"byte_end":9800248,"line_start":186,"line_end":186,"column_start":3,"column_end":36}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9800251,"byte_end":9800258,"line_start":187,"line_end":187,"column_start":3,"column_end":10}}]},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9800717,"byte_end":9800720,"line_start":205,"line_end":205,"column_start":6,"column_end":9},"name":"fmt","qualname":"<m128d as core::fmt::LowerHex>::fmt","value":"fn fmt(&Self, &mut core::fmt::Formatter) -> core::fmt::Result","parent":{"krate":1,"index":10123},"children":[],"decl_id":{"krate":1,"index":10124},"docs":" LowerHex formats each double's bit pattern (via [`f64::to_bits`]).\n ```\n # use safe_arch::*;\n let f = format!(\"{:x}\", m128d::default());\n assert_eq!(&f, \"(0, 0)\");\n ```\n","sig":null,"attributes":[{"value":"/ LowerHex formats each double's bit pattern (via [`f64::to_bits`]).","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9800514,"byte_end":9800584,"line_start":199,"line_end":199,"column_start":3,"column_end":73}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9800587,"byte_end":9800594,"line_start":200,"line_end":200,"column_start":3,"column_end":10}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9800597,"byte_end":9800620,"line_start":201,"line_end":201,"column_start":3,"column_end":26}},{"value":"/ let f = format!(\"{:x}\", m128d::default());","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9800623,"byte_end":9800669,"line_start":202,"line_end":202,"column_start":3,"column_end":49}},{"value":"/ assert_eq!(&f, \"(0, 0)\");","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9800672,"byte_end":9800701,"line_start":203,"line_end":203,"column_start":3,"column_end":32}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9800704,"byte_end":9800711,"line_start":204,"line_end":204,"column_start":3,"column_end":10}}]},{"kind":"Method","id":{"krate":0,"index":180},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9801190,"byte_end":9801193,"line_start":222,"line_end":222,"column_start":6,"column_end":9},"name":"fmt","qualname":"<m128d as core::fmt::UpperHex>::fmt","value":"fn fmt(&Self, &mut core::fmt::Formatter) -> core::fmt::Result","parent":{"krate":1,"index":10125},"children":[],"decl_id":{"krate":1,"index":10126},"docs":" UpperHex formats each double's bit pattern (via [`f64::to_bits`]).\n ```\n # use safe_arch::*;\n let f = format!(\"{:X}\", m128d::default());\n assert_eq!(&f, \"(0, 0)\");\n ```\n","sig":null,"attributes":[{"value":"/ UpperHex formats each double's bit pattern (via [`f64::to_bits`]).","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9800987,"byte_end":9801057,"line_start":216,"line_end":216,"column_start":3,"column_end":73}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9801060,"byte_end":9801067,"line_start":217,"line_end":217,"column_start":3,"column_end":10}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9801070,"byte_end":9801093,"line_start":218,"line_end":218,"column_start":3,"column_end":26}},{"value":"/ let f = format!(\"{:X}\", m128d::default());","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9801096,"byte_end":9801142,"line_start":219,"line_end":219,"column_start":3,"column_end":49}},{"value":"/ assert_eq!(&f, \"(0, 0)\");","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9801145,"byte_end":9801174,"line_start":220,"line_end":220,"column_start":3,"column_end":32}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9801177,"byte_end":9801184,"line_start":221,"line_end":221,"column_start":3,"column_end":10}}]},{"kind":"Method","id":{"krate":0,"index":182},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9801657,"byte_end":9801660,"line_start":239,"line_end":239,"column_start":6,"column_end":9},"name":"fmt","qualname":"<m128d as core::fmt::Octal>::fmt","value":"fn fmt(&Self, &mut core::fmt::Formatter) -> core::fmt::Result","parent":{"krate":1,"index":10119},"children":[],"decl_id":{"krate":1,"index":10120},"docs":" Octal formats each double's bit pattern (via [`f64::to_bits`]).\n ```\n # use safe_arch::*;\n let f = format!(\"{:o}\", m128d::default());\n assert_eq!(&f, \"(0, 0)\");\n ```\n","sig":null,"attributes":[{"value":"/ Octal formats each double's bit pattern (via [`f64::to_bits`]).","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9801457,"byte_end":9801524,"line_start":233,"line_end":233,"column_start":3,"column_end":70}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9801527,"byte_end":9801534,"line_start":234,"line_end":234,"column_start":3,"column_end":10}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9801537,"byte_end":9801560,"line_start":235,"line_end":235,"column_start":3,"column_end":26}},{"value":"/ let f = format!(\"{:o}\", m128d::default());","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9801563,"byte_end":9801609,"line_start":236,"line_end":236,"column_start":3,"column_end":49}},{"value":"/ assert_eq!(&f, \"(0, 0)\");","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9801612,"byte_end":9801641,"line_start":237,"line_end":237,"column_start":3,"column_end":32}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9801644,"byte_end":9801651,"line_start":238,"line_end":238,"column_start":3,"column_end":10}}]},{"kind":"Struct","id":{"krate":0,"index":186},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9802880,"byte_end":9802885,"line_start":19,"line_end":19,"column_start":12,"column_end":17},"name":"m128i","qualname":"::x86_x64::m128i_::m128i","value":"","parent":null,"children":[],"decl_id":null,"docs":" The data for a 128-bit SSE register of integer data.","sig":null,"attributes":[{"value":"/ The data for a 128-bit SSE register of integer data.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9802400,"byte_end":9802456,"line_start":9,"line_end":9,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9802457,"byte_end":9802460,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * The exact layout to view the type as depends on the operation used.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9802461,"byte_end":9802534,"line_start":11,"line_end":11,"column_start":1,"column_end":74}},{"value":"/ * `From` and `Into` impls are provided for all the relevant signed integer","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9802535,"byte_end":9802613,"line_start":12,"line_end":12,"column_start":1,"column_end":79}},{"value":"/   array types.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9802614,"byte_end":9802632,"line_start":13,"line_end":13,"column_start":1,"column_end":19}},{"value":"/ * Formatting impls print as four `i32` values just because they have to pick","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9802633,"byte_end":9802713,"line_start":14,"line_end":14,"column_start":1,"column_end":81}},{"value":"/   something. If you want an alternative you can turn it into an array and","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9802714,"byte_end":9802791,"line_start":15,"line_end":15,"column_start":1,"column_end":78}},{"value":"/   print as you like.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9802792,"byte_end":9802816,"line_start":16,"line_end":16,"column_start":1,"column_end":25}},{"value":"repr(transparent)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9802817,"byte_end":9802837,"line_start":17,"line_end":17,"column_start":1,"column_end":21}},{"value":"allow(non_camel_case_types)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9802838,"byte_end":9802868,"line_start":18,"line_end":18,"column_start":1,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":188},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9802886,"byte_end":9802897,"line_start":19,"line_end":19,"column_start":18,"column_end":29},"name":"0","qualname":"::x86_x64::m128i_::m128i::0","value":"core::arch::x86_64::__m128i","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":193},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9803336,"byte_end":9803341,"line_start":37,"line_end":37,"column_start":6,"column_end":11},"name":"clone","qualname":"<m128i as core::clone::Clone>::clone","value":"fn clone(&Self) -> Self","parent":{"krate":1,"index":2801},"children":[],"decl_id":{"krate":1,"index":2802},"docs":"","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9803299,"byte_end":9803310,"line_start":35,"line_end":35,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9803313,"byte_end":9803330,"line_start":36,"line_end":36,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":196},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9803463,"byte_end":9803470,"line_start":46,"line_end":46,"column_start":6,"column_end":13},"name":"default","qualname":"<m128i as core::default::Default>::default","value":"fn default() -> Self","parent":{"krate":1,"index":3157},"children":[],"decl_id":{"krate":1,"index":3158},"docs":"","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9803426,"byte_end":9803437,"line_start":44,"line_end":44,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9803440,"byte_end":9803457,"line_start":45,"line_end":45,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":199},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9803606,"byte_end":9803610,"line_start":56,"line_end":56,"column_start":6,"column_end":10},"name":"from","qualname":"<m128i as core::convert::From>::from","value":"fn from([i8; ]) -> Self","parent":{"krate":1,"index":3085},"children":[],"decl_id":{"krate":1,"index":3087},"docs":"","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9803569,"byte_end":9803580,"line_start":54,"line_end":54,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9803583,"byte_end":9803600,"line_start":55,"line_end":55,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":203},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9803755,"byte_end":9803759,"line_start":64,"line_end":64,"column_start":6,"column_end":10},"name":"from","qualname":"<[i8; 16] as core::convert::From>::from","value":"fn from(m128i) -> Self","parent":{"krate":1,"index":3085},"children":[],"decl_id":{"krate":1,"index":3087},"docs":"","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9803718,"byte_end":9803729,"line_start":62,"line_end":62,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9803732,"byte_end":9803749,"line_start":63,"line_end":63,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":206},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9803897,"byte_end":9803901,"line_start":72,"line_end":72,"column_start":6,"column_end":10},"name":"from","qualname":"<m128i as core::convert::From>::from","value":"fn from([u8; ]) -> Self","parent":{"krate":1,"index":3085},"children":[],"decl_id":{"krate":1,"index":3087},"docs":"","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9803860,"byte_end":9803871,"line_start":70,"line_end":70,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9803874,"byte_end":9803891,"line_start":71,"line_end":71,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":210},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9804046,"byte_end":9804050,"line_start":80,"line_end":80,"column_start":6,"column_end":10},"name":"from","qualname":"<[u8; 16] as core::convert::From>::from","value":"fn from(m128i) -> Self","parent":{"krate":1,"index":3085},"children":[],"decl_id":{"krate":1,"index":3087},"docs":"","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9804009,"byte_end":9804020,"line_start":78,"line_end":78,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9804023,"byte_end":9804040,"line_start":79,"line_end":79,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":213},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9804199,"byte_end":9804203,"line_start":90,"line_end":90,"column_start":6,"column_end":10},"name":"from","qualname":"<m128i as core::convert::From>::from","value":"fn from([i16; ]) -> Self","parent":{"krate":1,"index":3085},"children":[],"decl_id":{"krate":1,"index":3087},"docs":"","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9804162,"byte_end":9804173,"line_start":88,"line_end":88,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9804176,"byte_end":9804193,"line_start":89,"line_end":89,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":217},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9804348,"byte_end":9804352,"line_start":98,"line_end":98,"column_start":6,"column_end":10},"name":"from","qualname":"<[i16; 8] as core::convert::From>::from","value":"fn from(m128i) -> Self","parent":{"krate":1,"index":3085},"children":[],"decl_id":{"krate":1,"index":3087},"docs":"","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9804311,"byte_end":9804322,"line_start":96,"line_end":96,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9804325,"byte_end":9804342,"line_start":97,"line_end":97,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":220},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9804490,"byte_end":9804494,"line_start":106,"line_end":106,"column_start":6,"column_end":10},"name":"from","qualname":"<m128i as core::convert::From>::from","value":"fn from([u16; ]) -> Self","parent":{"krate":1,"index":3085},"children":[],"decl_id":{"krate":1,"index":3087},"docs":"","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9804453,"byte_end":9804464,"line_start":104,"line_end":104,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9804467,"byte_end":9804484,"line_start":105,"line_end":105,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":224},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9804639,"byte_end":9804643,"line_start":114,"line_end":114,"column_start":6,"column_end":10},"name":"from","qualname":"<[u16; 8] as core::convert::From>::from","value":"fn from(m128i) -> Self","parent":{"krate":1,"index":3085},"children":[],"decl_id":{"krate":1,"index":3087},"docs":"","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9804602,"byte_end":9804613,"line_start":112,"line_end":112,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9804616,"byte_end":9804633,"line_start":113,"line_end":113,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":227},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9804792,"byte_end":9804796,"line_start":124,"line_end":124,"column_start":6,"column_end":10},"name":"from","qualname":"<m128i as core::convert::From>::from","value":"fn from([i32; ]) -> Self","parent":{"krate":1,"index":3085},"children":[],"decl_id":{"krate":1,"index":3087},"docs":"","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9804755,"byte_end":9804766,"line_start":122,"line_end":122,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9804769,"byte_end":9804786,"line_start":123,"line_end":123,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":231},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9804941,"byte_end":9804945,"line_start":132,"line_end":132,"column_start":6,"column_end":10},"name":"from","qualname":"<[i32; 4] as core::convert::From>::from","value":"fn from(m128i) -> Self","parent":{"krate":1,"index":3085},"children":[],"decl_id":{"krate":1,"index":3087},"docs":"","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9804904,"byte_end":9804915,"line_start":130,"line_end":130,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9804918,"byte_end":9804935,"line_start":131,"line_end":131,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":234},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9805083,"byte_end":9805087,"line_start":140,"line_end":140,"column_start":6,"column_end":10},"name":"from","qualname":"<m128i as core::convert::From>::from","value":"fn from([u32; ]) -> Self","parent":{"krate":1,"index":3085},"children":[],"decl_id":{"krate":1,"index":3087},"docs":"","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9805046,"byte_end":9805057,"line_start":138,"line_end":138,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9805060,"byte_end":9805077,"line_start":139,"line_end":139,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":238},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9805232,"byte_end":9805236,"line_start":148,"line_end":148,"column_start":6,"column_end":10},"name":"from","qualname":"<[u32; 4] as core::convert::From>::from","value":"fn from(m128i) -> Self","parent":{"krate":1,"index":3085},"children":[],"decl_id":{"krate":1,"index":3087},"docs":"","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9805195,"byte_end":9805206,"line_start":146,"line_end":146,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9805209,"byte_end":9805226,"line_start":147,"line_end":147,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":241},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9805385,"byte_end":9805389,"line_start":158,"line_end":158,"column_start":6,"column_end":10},"name":"from","qualname":"<m128i as core::convert::From>::from","value":"fn from([i64; ]) -> Self","parent":{"krate":1,"index":3085},"children":[],"decl_id":{"krate":1,"index":3087},"docs":"","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9805348,"byte_end":9805359,"line_start":156,"line_end":156,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9805362,"byte_end":9805379,"line_start":157,"line_end":157,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":245},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9805534,"byte_end":9805538,"line_start":166,"line_end":166,"column_start":6,"column_end":10},"name":"from","qualname":"<[i64; 2] as core::convert::From>::from","value":"fn from(m128i) -> Self","parent":{"krate":1,"index":3085},"children":[],"decl_id":{"krate":1,"index":3087},"docs":"","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9805497,"byte_end":9805508,"line_start":164,"line_end":164,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9805511,"byte_end":9805528,"line_start":165,"line_end":165,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":248},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9805676,"byte_end":9805680,"line_start":174,"line_end":174,"column_start":6,"column_end":10},"name":"from","qualname":"<m128i as core::convert::From>::from","value":"fn from([u64; ]) -> Self","parent":{"krate":1,"index":3085},"children":[],"decl_id":{"krate":1,"index":3087},"docs":"","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9805639,"byte_end":9805650,"line_start":172,"line_end":172,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9805653,"byte_end":9805670,"line_start":173,"line_end":173,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":252},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9805825,"byte_end":9805829,"line_start":182,"line_end":182,"column_start":6,"column_end":10},"name":"from","qualname":"<[u64; 2] as core::convert::From>::from","value":"fn from(m128i) -> Self","parent":{"krate":1,"index":3085},"children":[],"decl_id":{"krate":1,"index":3087},"docs":"","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9805788,"byte_end":9805799,"line_start":180,"line_end":180,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9805802,"byte_end":9805819,"line_start":181,"line_end":181,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":254},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9805975,"byte_end":9805979,"line_start":192,"line_end":192,"column_start":6,"column_end":10},"name":"from","qualname":"<m128i as core::convert::From>::from","value":"fn from(i128) -> Self","parent":{"krate":1,"index":3085},"children":[],"decl_id":{"krate":1,"index":3087},"docs":"","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9805938,"byte_end":9805949,"line_start":190,"line_end":190,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9805952,"byte_end":9805969,"line_start":191,"line_end":191,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":256},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9806112,"byte_end":9806116,"line_start":200,"line_end":200,"column_start":6,"column_end":10},"name":"from","qualname":"<i128 as core::convert::From>::from","value":"fn from(m128i) -> Self","parent":{"krate":1,"index":3085},"children":[],"decl_id":{"krate":1,"index":3087},"docs":"","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9806075,"byte_end":9806086,"line_start":198,"line_end":198,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9806089,"byte_end":9806106,"line_start":199,"line_end":199,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":258},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9806250,"byte_end":9806254,"line_start":208,"line_end":208,"column_start":6,"column_end":10},"name":"from","qualname":"<m128i as core::convert::From>::from","value":"fn from(u128) -> Self","parent":{"krate":1,"index":3085},"children":[],"decl_id":{"krate":1,"index":3087},"docs":"","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9806213,"byte_end":9806224,"line_start":206,"line_end":206,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9806227,"byte_end":9806244,"line_start":207,"line_end":207,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":260},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9806387,"byte_end":9806391,"line_start":216,"line_end":216,"column_start":6,"column_end":10},"name":"from","qualname":"<u128 as core::convert::From>::from","value":"fn from(m128i) -> Self","parent":{"krate":1,"index":3085},"children":[],"decl_id":{"krate":1,"index":3087},"docs":"","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9806350,"byte_end":9806361,"line_start":214,"line_end":214,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9806364,"byte_end":9806381,"line_start":215,"line_end":215,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":262},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9806726,"byte_end":9806729,"line_start":232,"line_end":232,"column_start":6,"column_end":9},"name":"fmt","qualname":"<m128i as core::fmt::Debug>::fmt","value":"fn fmt(&Self, &mut core::fmt::Formatter) -> core::fmt::Result","parent":{"krate":1,"index":10110},"children":[],"decl_id":{"krate":1,"index":10111},"docs":" Debug formats each `i32`.\n ```\n # use safe_arch::*;\n let f = format!(\"{:?}\", m128i::default());\n assert_eq!(&f, \"m128i(0, 0, 0, 0)\");\n ```\n","sig":null,"attributes":[{"value":"/ Debug formats each `i32`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9806553,"byte_end":9806582,"line_start":226,"line_end":226,"column_start":3,"column_end":32}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9806585,"byte_end":9806592,"line_start":227,"line_end":227,"column_start":3,"column_end":10}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9806595,"byte_end":9806618,"line_start":228,"line_end":228,"column_start":3,"column_end":26}},{"value":"/ let f = format!(\"{:?}\", m128i::default());","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9806621,"byte_end":9806667,"line_start":229,"line_end":229,"column_start":3,"column_end":49}},{"value":"/ assert_eq!(&f, \"m128i(0, 0, 0, 0)\");","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9806670,"byte_end":9806710,"line_start":230,"line_end":230,"column_start":3,"column_end":43}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9806713,"byte_end":9806720,"line_start":231,"line_end":231,"column_start":3,"column_end":10}}]},{"kind":"Method","id":{"krate":0,"index":265},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9807229,"byte_end":9807232,"line_start":251,"line_end":251,"column_start":6,"column_end":9},"name":"fmt","qualname":"<m128i as core::fmt::Display>::fmt","value":"fn fmt(&Self, &mut core::fmt::Formatter) -> core::fmt::Result","parent":{"krate":1,"index":10117},"children":[],"decl_id":{"krate":1,"index":10118},"docs":" Display formats each `i32`, and leaves the type name off of the font.\n ```\n # use safe_arch::*;\n let f = format!(\"{}\", m128i::default());\n assert_eq!(&f, \"(0, 0, 0, 0)\");\n ```\n","sig":null,"attributes":[{"value":"/ Display formats each `i32`, and leaves the type name off of the font.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9807019,"byte_end":9807092,"line_start":245,"line_end":245,"column_start":3,"column_end":76}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9807095,"byte_end":9807102,"line_start":246,"line_end":246,"column_start":3,"column_end":10}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9807105,"byte_end":9807128,"line_start":247,"line_end":247,"column_start":3,"column_end":26}},{"value":"/ let f = format!(\"{}\", m128i::default());","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9807131,"byte_end":9807175,"line_start":248,"line_end":248,"column_start":3,"column_end":47}},{"value":"/ assert_eq!(&f, \"(0, 0, 0, 0)\");","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9807178,"byte_end":9807213,"line_start":249,"line_end":249,"column_start":3,"column_end":38}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9807216,"byte_end":9807223,"line_start":250,"line_end":250,"column_start":3,"column_end":10}}]},{"kind":"Method","id":{"krate":0,"index":268},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9807687,"byte_end":9807690,"line_start":270,"line_end":270,"column_start":6,"column_end":9},"name":"fmt","qualname":"<m128i as core::fmt::Binary>::fmt","value":"fn fmt(&Self, &mut core::fmt::Formatter) -> core::fmt::Result","parent":{"krate":1,"index":10121},"children":[],"decl_id":{"krate":1,"index":10122},"docs":" Binary formats each `i32`.\n ```\n # use safe_arch::*;\n let f = format!(\"{:b}\", m128i::default());\n assert_eq!(&f, \"(0, 0, 0, 0)\");\n ```\n","sig":null,"attributes":[{"value":"/ Binary formats each `i32`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9807518,"byte_end":9807548,"line_start":264,"line_end":264,"column_start":3,"column_end":33}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9807551,"byte_end":9807558,"line_start":265,"line_end":265,"column_start":3,"column_end":10}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9807561,"byte_end":9807584,"line_start":266,"line_end":266,"column_start":3,"column_end":26}},{"value":"/ let f = format!(\"{:b}\", m128i::default());","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9807587,"byte_end":9807633,"line_start":267,"line_end":267,"column_start":3,"column_end":49}},{"value":"/ assert_eq!(&f, \"(0, 0, 0, 0)\");","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9807636,"byte_end":9807671,"line_start":268,"line_end":268,"column_start":3,"column_end":38}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9807674,"byte_end":9807681,"line_start":269,"line_end":269,"column_start":3,"column_end":10}}]},{"kind":"Method","id":{"krate":0,"index":271},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9808156,"byte_end":9808159,"line_start":289,"line_end":289,"column_start":6,"column_end":9},"name":"fmt","qualname":"<m128i as core::fmt::LowerExp>::fmt","value":"fn fmt(&Self, &mut core::fmt::Formatter) -> core::fmt::Result","parent":{"krate":1,"index":10129},"children":[],"decl_id":{"krate":1,"index":10130},"docs":" LowerExp formats each `i32`.\n ```\n # use safe_arch::*;\n let f = format!(\"{:e}\", m128i::default());\n assert_eq!(&f, \"(0e0, 0e0, 0e0, 0e0)\");\n ```\n","sig":null,"attributes":[{"value":"/ LowerExp formats each `i32`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9807977,"byte_end":9808009,"line_start":283,"line_end":283,"column_start":3,"column_end":35}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9808012,"byte_end":9808019,"line_start":284,"line_end":284,"column_start":3,"column_end":10}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9808022,"byte_end":9808045,"line_start":285,"line_end":285,"column_start":3,"column_end":26}},{"value":"/ let f = format!(\"{:e}\", m128i::default());","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9808048,"byte_end":9808094,"line_start":286,"line_end":286,"column_start":3,"column_end":49}},{"value":"/ assert_eq!(&f, \"(0e0, 0e0, 0e0, 0e0)\");","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9808097,"byte_end":9808140,"line_start":287,"line_end":287,"column_start":3,"column_end":46}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9808143,"byte_end":9808150,"line_start":288,"line_end":288,"column_start":3,"column_end":10}}]},{"kind":"Method","id":{"krate":0,"index":274},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9808627,"byte_end":9808630,"line_start":308,"line_end":308,"column_start":6,"column_end":9},"name":"fmt","qualname":"<m128i as core::fmt::UpperExp>::fmt","value":"fn fmt(&Self, &mut core::fmt::Formatter) -> core::fmt::Result","parent":{"krate":1,"index":10131},"children":[],"decl_id":{"krate":1,"index":10132},"docs":" UpperExp formats each `i32`.\n ```\n # use safe_arch::*;\n let f = format!(\"{:E}\", m128i::default());\n assert_eq!(&f, \"(0E0, 0E0, 0E0, 0E0)\");\n ```\n","sig":null,"attributes":[{"value":"/ UpperExp formats each `i32`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9808448,"byte_end":9808480,"line_start":302,"line_end":302,"column_start":3,"column_end":35}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9808483,"byte_end":9808490,"line_start":303,"line_end":303,"column_start":3,"column_end":10}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9808493,"byte_end":9808516,"line_start":304,"line_end":304,"column_start":3,"column_end":26}},{"value":"/ let f = format!(\"{:E}\", m128i::default());","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9808519,"byte_end":9808565,"line_start":305,"line_end":305,"column_start":3,"column_end":49}},{"value":"/ assert_eq!(&f, \"(0E0, 0E0, 0E0, 0E0)\");","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9808568,"byte_end":9808611,"line_start":306,"line_end":306,"column_start":3,"column_end":46}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9808614,"byte_end":9808621,"line_start":307,"line_end":307,"column_start":3,"column_end":10}}]},{"kind":"Method","id":{"krate":0,"index":277},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9809090,"byte_end":9809093,"line_start":327,"line_end":327,"column_start":6,"column_end":9},"name":"fmt","qualname":"<m128i as core::fmt::LowerHex>::fmt","value":"fn fmt(&Self, &mut core::fmt::Formatter) -> core::fmt::Result","parent":{"krate":1,"index":10123},"children":[],"decl_id":{"krate":1,"index":10124},"docs":" LowerHex formats each `i32`.\n ```\n # use safe_arch::*;\n let f = format!(\"{:x}\", m128i::default());\n assert_eq!(&f, \"(0, 0, 0, 0)\");\n ```\n","sig":null,"attributes":[{"value":"/ LowerHex formats each `i32`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9808919,"byte_end":9808951,"line_start":321,"line_end":321,"column_start":3,"column_end":35}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9808954,"byte_end":9808961,"line_start":322,"line_end":322,"column_start":3,"column_end":10}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9808964,"byte_end":9808987,"line_start":323,"line_end":323,"column_start":3,"column_end":26}},{"value":"/ let f = format!(\"{:x}\", m128i::default());","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9808990,"byte_end":9809036,"line_start":324,"line_end":324,"column_start":3,"column_end":49}},{"value":"/ assert_eq!(&f, \"(0, 0, 0, 0)\");","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9809039,"byte_end":9809074,"line_start":325,"line_end":325,"column_start":3,"column_end":38}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9809077,"byte_end":9809084,"line_start":326,"line_end":326,"column_start":3,"column_end":10}}]},{"kind":"Method","id":{"krate":0,"index":280},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9809553,"byte_end":9809556,"line_start":346,"line_end":346,"column_start":6,"column_end":9},"name":"fmt","qualname":"<m128i as core::fmt::UpperHex>::fmt","value":"fn fmt(&Self, &mut core::fmt::Formatter) -> core::fmt::Result","parent":{"krate":1,"index":10125},"children":[],"decl_id":{"krate":1,"index":10126},"docs":" UpperHex formats each `i32`.\n ```\n # use safe_arch::*;\n let f = format!(\"{:X}\", m128i::default());\n assert_eq!(&f, \"(0, 0, 0, 0)\");\n ```\n","sig":null,"attributes":[{"value":"/ UpperHex formats each `i32`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9809382,"byte_end":9809414,"line_start":340,"line_end":340,"column_start":3,"column_end":35}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9809417,"byte_end":9809424,"line_start":341,"line_end":341,"column_start":3,"column_end":10}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9809427,"byte_end":9809450,"line_start":342,"line_end":342,"column_start":3,"column_end":26}},{"value":"/ let f = format!(\"{:X}\", m128i::default());","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9809453,"byte_end":9809499,"line_start":343,"line_end":343,"column_start":3,"column_end":49}},{"value":"/ assert_eq!(&f, \"(0, 0, 0, 0)\");","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9809502,"byte_end":9809537,"line_start":344,"line_end":344,"column_start":3,"column_end":38}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9809540,"byte_end":9809547,"line_start":345,"line_end":345,"column_start":3,"column_end":10}}]},{"kind":"Method","id":{"krate":0,"index":283},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9810010,"byte_end":9810013,"line_start":365,"line_end":365,"column_start":6,"column_end":9},"name":"fmt","qualname":"<m128i as core::fmt::Octal>::fmt","value":"fn fmt(&Self, &mut core::fmt::Formatter) -> core::fmt::Result","parent":{"krate":1,"index":10119},"children":[],"decl_id":{"krate":1,"index":10120},"docs":" Octal formats each `i32`.\n ```\n # use safe_arch::*;\n let f = format!(\"{:o}\", m128i::default());\n assert_eq!(&f, \"(0, 0, 0, 0)\");\n ```\n","sig":null,"attributes":[{"value":"/ Octal formats each `i32`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9809842,"byte_end":9809871,"line_start":359,"line_end":359,"column_start":3,"column_end":32}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9809874,"byte_end":9809881,"line_start":360,"line_end":360,"column_start":3,"column_end":10}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9809884,"byte_end":9809907,"line_start":361,"line_end":361,"column_start":3,"column_end":26}},{"value":"/ let f = format!(\"{:o}\", m128i::default());","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9809910,"byte_end":9809956,"line_start":362,"line_end":362,"column_start":3,"column_end":49}},{"value":"/ assert_eq!(&f, \"(0, 0, 0, 0)\");","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9809959,"byte_end":9809994,"line_start":363,"line_end":363,"column_start":3,"column_end":38}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9809997,"byte_end":9810004,"line_start":364,"line_end":364,"column_start":3,"column_end":10}}]},{"kind":"Struct","id":{"krate":0,"index":288},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9811229,"byte_end":9811233,"line_start":16,"line_end":16,"column_start":12,"column_end":16},"name":"m256","qualname":"::x86_x64::m256_::m256","value":"","parent":null,"children":[],"decl_id":null,"docs":" The data for a 256-bit AVX register of eight `f32` lanes.","sig":null,"attributes":[{"value":"/ The data for a 256-bit AVX register of eight `f32` lanes.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9810905,"byte_end":9810966,"line_start":9,"line_end":9,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9810967,"byte_end":9810970,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * This is _very similar to_ having `[f32; 8]`. The main difference is that","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9810971,"byte_end":9811049,"line_start":11,"line_end":11,"column_start":1,"column_end":79}},{"value":"/   it's aligned to 32 instead of just 4, and of course you can perform","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9811050,"byte_end":9811123,"line_start":12,"line_end":12,"column_start":1,"column_end":74}},{"value":"/   various intrinsic operations on it.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9811124,"byte_end":9811165,"line_start":13,"line_end":13,"column_start":1,"column_end":42}},{"value":"repr(transparent)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9811166,"byte_end":9811186,"line_start":14,"line_end":14,"column_start":1,"column_end":21}},{"value":"allow(non_camel_case_types)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9811187,"byte_end":9811217,"line_start":15,"line_end":15,"column_start":1,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":290},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9811234,"byte_end":9811244,"line_start":16,"line_end":16,"column_start":17,"column_end":27},"name":"0","qualname":"::x86_x64::m256_::m256::0","value":"core::arch::x86_64::__m256","parent":{"krate":0,"index":288},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":295},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9811797,"byte_end":9811805,"line_start":37,"line_end":37,"column_start":10,"column_end":18},"name":"to_array","qualname":"<m256>::to_array","value":"fn to_array(Self) -> [f32; ]","parent":null,"children":[],"decl_id":null,"docs":" Transmutes the `m256` to an array.","sig":null,"attributes":[{"value":"/ Transmutes the `m256` to an array.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9811628,"byte_end":9811666,"line_start":32,"line_end":32,"column_start":3,"column_end":41}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9811669,"byte_end":9811672,"line_start":33,"line_end":33,"column_start":3,"column_end":6}},{"value":"/ Same as `m.into()`, just lets you be more explicit about what's happening.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9811675,"byte_end":9811753,"line_start":34,"line_end":34,"column_start":3,"column_end":81}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9811756,"byte_end":9811767,"line_start":35,"line_end":35,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9811770,"byte_end":9811787,"line_start":36,"line_end":36,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":297},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9812032,"byte_end":9812042,"line_start":47,"line_end":47,"column_start":10,"column_end":20},"name":"from_array","qualname":"<m256>::from_array","value":"fn from_array([f32; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Transmutes an array into `m256`.","sig":null,"attributes":[{"value":"/ Transmutes an array into `m256`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9811849,"byte_end":9811885,"line_start":41,"line_end":41,"column_start":3,"column_end":39}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9811888,"byte_end":9811891,"line_start":42,"line_end":42,"column_start":3,"column_end":6}},{"value":"/ Same as `m256::from(arr)`, it just lets you be more explicit about what's","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9811894,"byte_end":9811971,"line_start":43,"line_end":43,"column_start":3,"column_end":80}},{"value":"/ happening.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9811974,"byte_end":9811988,"line_start":44,"line_end":44,"column_start":3,"column_end":17}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9811991,"byte_end":9812002,"line_start":45,"line_end":45,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9812005,"byte_end":9812022,"line_start":46,"line_end":46,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":299},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9812271,"byte_end":9812278,"line_start":56,"line_end":56,"column_start":10,"column_end":17},"name":"to_bits","qualname":"<m256>::to_bits","value":"fn to_bits(Self) -> [u32; ]","parent":null,"children":[],"decl_id":null,"docs":" Converts into the bit patterns of these floats (`[u32;8]`).","sig":null,"attributes":[{"value":"/ Converts into the bit patterns of these floats (`[u32;8]`).","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9812086,"byte_end":9812149,"line_start":51,"line_end":51,"column_start":3,"column_end":66}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9812152,"byte_end":9812155,"line_start":52,"line_end":52,"column_start":3,"column_end":6}},{"value":"/ Like [`f32::to_bits`](f32::to_bits), but all eight lanes at once.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9812158,"byte_end":9812227,"line_start":53,"line_end":53,"column_start":3,"column_end":72}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9812230,"byte_end":9812241,"line_start":54,"line_end":54,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9812244,"byte_end":9812261,"line_start":55,"line_end":55,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":301},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9812537,"byte_end":9812546,"line_start":65,"line_end":65,"column_start":10,"column_end":19},"name":"from_bits","qualname":"<m256>::from_bits","value":"fn from_bits([u32; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Converts from the bit patterns of these floats (`[u32;8]`).","sig":null,"attributes":[{"value":"/ Converts from the bit patterns of these floats (`[u32;8]`).","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9812348,"byte_end":9812411,"line_start":60,"line_end":60,"column_start":3,"column_end":66}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9812414,"byte_end":9812417,"line_start":61,"line_end":61,"column_start":3,"column_end":6}},{"value":"/ Like [`f32::from_bits`](f32::from_bits), but all eight lanes at once.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9812420,"byte_end":9812493,"line_start":62,"line_end":62,"column_start":3,"column_end":76}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9812496,"byte_end":9812507,"line_start":63,"line_end":63,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9812510,"byte_end":9812527,"line_start":64,"line_end":64,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":304},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9812683,"byte_end":9812688,"line_start":73,"line_end":73,"column_start":6,"column_end":11},"name":"clone","qualname":"<m256 as core::clone::Clone>::clone","value":"fn clone(&Self) -> Self","parent":{"krate":1,"index":2801},"children":[],"decl_id":{"krate":1,"index":2802},"docs":"","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9812646,"byte_end":9812657,"line_start":71,"line_end":71,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9812660,"byte_end":9812677,"line_start":72,"line_end":72,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":307},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9812808,"byte_end":9812815,"line_start":82,"line_end":82,"column_start":6,"column_end":13},"name":"default","qualname":"<m256 as core::default::Default>::default","value":"fn default() -> Self","parent":{"krate":1,"index":3157},"children":[],"decl_id":{"krate":1,"index":3158},"docs":"","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9812771,"byte_end":9812782,"line_start":80,"line_end":80,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9812785,"byte_end":9812802,"line_start":81,"line_end":81,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":310},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9812940,"byte_end":9812944,"line_start":90,"line_end":90,"column_start":6,"column_end":10},"name":"from","qualname":"<m256 as core::convert::From>::from","value":"fn from([f32; ]) -> Self","parent":{"krate":1,"index":3085},"children":[],"decl_id":{"krate":1,"index":3087},"docs":"","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9812903,"byte_end":9812914,"line_start":88,"line_end":88,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9812917,"byte_end":9812934,"line_start":89,"line_end":89,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":314},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9813286,"byte_end":9813290,"line_start":101,"line_end":101,"column_start":6,"column_end":10},"name":"from","qualname":"<[f32; 8] as core::convert::From>::from","value":"fn from(m256) -> Self","parent":{"krate":1,"index":3085},"children":[],"decl_id":{"krate":1,"index":3087},"docs":"","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9813249,"byte_end":9813260,"line_start":99,"line_end":99,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9813263,"byte_end":9813280,"line_start":100,"line_end":100,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":316},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9813704,"byte_end":9813707,"line_start":118,"line_end":118,"column_start":6,"column_end":9},"name":"fmt","qualname":"<m256 as core::fmt::Debug>::fmt","value":"fn fmt(&Self, &mut core::fmt::Formatter) -> core::fmt::Result","parent":{"krate":1,"index":10110},"children":[],"decl_id":{"krate":1,"index":10111},"docs":" Debug formats each float.\n ```\n # use safe_arch::*;\n let f = format!(\"{:?}\", m256::default());\n assert_eq!(&f, \"m256(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)\");\n ```\n","sig":null,"attributes":[{"value":"/ Debug formats each float.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9813505,"byte_end":9813534,"line_start":112,"line_end":112,"column_start":3,"column_end":32}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9813537,"byte_end":9813544,"line_start":113,"line_end":113,"column_start":3,"column_end":10}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9813547,"byte_end":9813570,"line_start":114,"line_end":114,"column_start":3,"column_end":26}},{"value":"/ let f = format!(\"{:?}\", m256::default());","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9813573,"byte_end":9813618,"line_start":115,"line_end":115,"column_start":3,"column_end":48}},{"value":"/ assert_eq!(&f, \"m256(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)\");","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9813621,"byte_end":9813688,"line_start":116,"line_end":116,"column_start":3,"column_end":70}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9813691,"byte_end":9813698,"line_start":117,"line_end":117,"column_start":3,"column_end":10}}]},{"kind":"Method","id":{"krate":0,"index":318},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9814212,"byte_end":9814215,"line_start":137,"line_end":137,"column_start":6,"column_end":9},"name":"fmt","qualname":"<m256 as core::fmt::Display>::fmt","value":"fn fmt(&Self, &mut core::fmt::Formatter) -> core::fmt::Result","parent":{"krate":1,"index":10117},"children":[],"decl_id":{"krate":1,"index":10118},"docs":" Display formats each float, and leaves the type name off of the font.\n ```\n # use safe_arch::*;\n let f = format!(\"{}\", m256::default());\n assert_eq!(&f, \"(0, 0, 0, 0, 0, 0, 0, 0)\");\n ```\n","sig":null,"attributes":[{"value":"/ Display formats each float, and leaves the type name off of the font.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9813991,"byte_end":9814064,"line_start":131,"line_end":131,"column_start":3,"column_end":76}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9814067,"byte_end":9814074,"line_start":132,"line_end":132,"column_start":3,"column_end":10}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9814077,"byte_end":9814100,"line_start":133,"line_end":133,"column_start":3,"column_end":26}},{"value":"/ let f = format!(\"{}\", m256::default());","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9814103,"byte_end":9814146,"line_start":134,"line_end":134,"column_start":3,"column_end":46}},{"value":"/ assert_eq!(&f, \"(0, 0, 0, 0, 0, 0, 0, 0)\");","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9814149,"byte_end":9814196,"line_start":135,"line_end":135,"column_start":3,"column_end":50}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9814199,"byte_end":9814206,"line_start":136,"line_end":136,"column_start":3,"column_end":10}}]},{"kind":"Method","id":{"krate":0,"index":320},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9814713,"byte_end":9814716,"line_start":156,"line_end":156,"column_start":6,"column_end":9},"name":"fmt","qualname":"<m256 as core::fmt::Binary>::fmt","value":"fn fmt(&Self, &mut core::fmt::Formatter) -> core::fmt::Result","parent":{"krate":1,"index":10121},"children":[],"decl_id":{"krate":1,"index":10122},"docs":" Binary formats each float's bit pattern (via [`f32::to_bits`]).\n ```\n # use safe_arch::*;\n let f = format!(\"{:b}\", m256::default());\n assert_eq!(&f, \"(0, 0, 0, 0, 0, 0, 0, 0)\");\n ```\n","sig":null,"attributes":[{"value":"/ Binary formats each float's bit pattern (via [`f32::to_bits`]).","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9814496,"byte_end":9814563,"line_start":150,"line_end":150,"column_start":3,"column_end":70}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9814566,"byte_end":9814573,"line_start":151,"line_end":151,"column_start":3,"column_end":10}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9814576,"byte_end":9814599,"line_start":152,"line_end":152,"column_start":3,"column_end":26}},{"value":"/ let f = format!(\"{:b}\", m256::default());","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9814602,"byte_end":9814647,"line_start":153,"line_end":153,"column_start":3,"column_end":48}},{"value":"/ assert_eq!(&f, \"(0, 0, 0, 0, 0, 0, 0, 0)\");","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9814650,"byte_end":9814697,"line_start":154,"line_end":154,"column_start":3,"column_end":50}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9814700,"byte_end":9814707,"line_start":155,"line_end":155,"column_start":3,"column_end":10}}]},{"kind":"Method","id":{"krate":0,"index":322},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9815207,"byte_end":9815210,"line_start":175,"line_end":175,"column_start":6,"column_end":9},"name":"fmt","qualname":"<m256 as core::fmt::LowerExp>::fmt","value":"fn fmt(&Self, &mut core::fmt::Formatter) -> core::fmt::Result","parent":{"krate":1,"index":10129},"children":[],"decl_id":{"krate":1,"index":10130},"docs":" LowerExp formats each float.\n ```\n # use safe_arch::*;\n let f = format!(\"{:e}\", m256::default());\n assert_eq!(&f, \"(0e0, 0e0, 0e0, 0e0, 0e0, 0e0, 0e0, 0e0)\");\n ```\n","sig":null,"attributes":[{"value":"/ LowerExp formats each float.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9815009,"byte_end":9815041,"line_start":169,"line_end":169,"column_start":3,"column_end":35}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9815044,"byte_end":9815051,"line_start":170,"line_end":170,"column_start":3,"column_end":10}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9815054,"byte_end":9815077,"line_start":171,"line_end":171,"column_start":3,"column_end":26}},{"value":"/ let f = format!(\"{:e}\", m256::default());","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9815080,"byte_end":9815125,"line_start":172,"line_end":172,"column_start":3,"column_end":48}},{"value":"/ assert_eq!(&f, \"(0e0, 0e0, 0e0, 0e0, 0e0, 0e0, 0e0, 0e0)\");","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9815128,"byte_end":9815191,"line_start":173,"line_end":173,"column_start":3,"column_end":66}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9815194,"byte_end":9815201,"line_start":174,"line_end":174,"column_start":3,"column_end":10}}]},{"kind":"Method","id":{"krate":0,"index":324},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9815692,"byte_end":9815695,"line_start":194,"line_end":194,"column_start":6,"column_end":9},"name":"fmt","qualname":"<m256 as core::fmt::UpperExp>::fmt","value":"fn fmt(&Self, &mut core::fmt::Formatter) -> core::fmt::Result","parent":{"krate":1,"index":10131},"children":[],"decl_id":{"krate":1,"index":10132},"docs":" UpperExp formats each float.\n ```\n # use safe_arch::*;\n let f = format!(\"{:E}\", m256::default());\n assert_eq!(&f, \"(0E0, 0E0, 0E0, 0E0, 0E0, 0E0, 0E0, 0E0)\");\n ```\n","sig":null,"attributes":[{"value":"/ UpperExp formats each float.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9815494,"byte_end":9815526,"line_start":188,"line_end":188,"column_start":3,"column_end":35}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9815529,"byte_end":9815536,"line_start":189,"line_end":189,"column_start":3,"column_end":10}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9815539,"byte_end":9815562,"line_start":190,"line_end":190,"column_start":3,"column_end":26}},{"value":"/ let f = format!(\"{:E}\", m256::default());","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9815565,"byte_end":9815610,"line_start":191,"line_end":191,"column_start":3,"column_end":48}},{"value":"/ assert_eq!(&f, \"(0E0, 0E0, 0E0, 0E0, 0E0, 0E0, 0E0, 0E0)\");","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9815613,"byte_end":9815676,"line_start":192,"line_end":192,"column_start":3,"column_end":66}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9815679,"byte_end":9815686,"line_start":193,"line_end":193,"column_start":3,"column_end":10}}]},{"kind":"Method","id":{"krate":0,"index":326},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9816198,"byte_end":9816201,"line_start":213,"line_end":213,"column_start":6,"column_end":9},"name":"fmt","qualname":"<m256 as core::fmt::LowerHex>::fmt","value":"fn fmt(&Self, &mut core::fmt::Formatter) -> core::fmt::Result","parent":{"krate":1,"index":10123},"children":[],"decl_id":{"krate":1,"index":10124},"docs":" LowerHex formats each float's bit pattern (via [`f32::to_bits`]).\n ```\n # use safe_arch::*;\n let f = format!(\"{:x}\", m256::default());\n assert_eq!(&f, \"(0, 0, 0, 0, 0, 0, 0, 0)\");\n ```\n","sig":null,"attributes":[{"value":"/ LowerHex formats each float's bit pattern (via [`f32::to_bits`]).","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9815979,"byte_end":9816048,"line_start":207,"line_end":207,"column_start":3,"column_end":72}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9816051,"byte_end":9816058,"line_start":208,"line_end":208,"column_start":3,"column_end":10}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9816061,"byte_end":9816084,"line_start":209,"line_end":209,"column_start":3,"column_end":26}},{"value":"/ let f = format!(\"{:x}\", m256::default());","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9816087,"byte_end":9816132,"line_start":210,"line_end":210,"column_start":3,"column_end":48}},{"value":"/ assert_eq!(&f, \"(0, 0, 0, 0, 0, 0, 0, 0)\");","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9816135,"byte_end":9816182,"line_start":211,"line_end":211,"column_start":3,"column_end":50}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9816185,"byte_end":9816192,"line_start":212,"line_end":212,"column_start":3,"column_end":10}}]},{"kind":"Method","id":{"krate":0,"index":328},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9816715,"byte_end":9816718,"line_start":232,"line_end":232,"column_start":6,"column_end":9},"name":"fmt","qualname":"<m256 as core::fmt::UpperHex>::fmt","value":"fn fmt(&Self, &mut core::fmt::Formatter) -> core::fmt::Result","parent":{"krate":1,"index":10125},"children":[],"decl_id":{"krate":1,"index":10126},"docs":" UpperHex formats each float's bit pattern (via [`f32::to_bits`]).\n ```\n # use safe_arch::*;\n let f = format!(\"{:X}\", m256::default());\n assert_eq!(&f, \"(0, 0, 0, 0, 0, 0, 0, 0)\");\n ```\n","sig":null,"attributes":[{"value":"/ UpperHex formats each float's bit pattern (via [`f32::to_bits`]).","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9816496,"byte_end":9816565,"line_start":226,"line_end":226,"column_start":3,"column_end":72}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9816568,"byte_end":9816575,"line_start":227,"line_end":227,"column_start":3,"column_end":10}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9816578,"byte_end":9816601,"line_start":228,"line_end":228,"column_start":3,"column_end":26}},{"value":"/ let f = format!(\"{:X}\", m256::default());","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9816604,"byte_end":9816649,"line_start":229,"line_end":229,"column_start":3,"column_end":48}},{"value":"/ assert_eq!(&f, \"(0, 0, 0, 0, 0, 0, 0, 0)\");","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9816652,"byte_end":9816699,"line_start":230,"line_end":230,"column_start":3,"column_end":50}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9816702,"byte_end":9816709,"line_start":231,"line_end":231,"column_start":3,"column_end":10}}]},{"kind":"Method","id":{"krate":0,"index":330},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9817226,"byte_end":9817229,"line_start":251,"line_end":251,"column_start":6,"column_end":9},"name":"fmt","qualname":"<m256 as core::fmt::Octal>::fmt","value":"fn fmt(&Self, &mut core::fmt::Formatter) -> core::fmt::Result","parent":{"krate":1,"index":10119},"children":[],"decl_id":{"krate":1,"index":10120},"docs":" Octal formats each float's bit pattern (via [`f32::to_bits`]).\n ```\n # use safe_arch::*;\n let f = format!(\"{:o}\", m256::default());\n assert_eq!(&f, \"(0, 0, 0, 0, 0, 0, 0, 0)\");\n ```\n","sig":null,"attributes":[{"value":"/ Octal formats each float's bit pattern (via [`f32::to_bits`]).","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9817010,"byte_end":9817076,"line_start":245,"line_end":245,"column_start":3,"column_end":69}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9817079,"byte_end":9817086,"line_start":246,"line_end":246,"column_start":3,"column_end":10}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9817089,"byte_end":9817112,"line_start":247,"line_end":247,"column_start":3,"column_end":26}},{"value":"/ let f = format!(\"{:o}\", m256::default());","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9817115,"byte_end":9817160,"line_start":248,"line_end":248,"column_start":3,"column_end":48}},{"value":"/ assert_eq!(&f, \"(0, 0, 0, 0, 0, 0, 0, 0)\");","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9817163,"byte_end":9817210,"line_start":249,"line_end":249,"column_start":3,"column_end":50}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9817213,"byte_end":9817220,"line_start":250,"line_end":250,"column_start":3,"column_end":10}}]},{"kind":"Struct","id":{"krate":0,"index":334},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9818339,"byte_end":9818344,"line_start":16,"line_end":16,"column_start":12,"column_end":17},"name":"m256d","qualname":"::x86_x64::m256d_::m256d","value":"","parent":null,"children":[],"decl_id":null,"docs":" The data for a 256-bit AVX register of four `f64` values.","sig":null,"attributes":[{"value":"/ The data for a 256-bit AVX register of four `f64` values.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9818015,"byte_end":9818076,"line_start":9,"line_end":9,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9818077,"byte_end":9818080,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * This is _very similar to_ having `[f64; 4]`. The main difference is that","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9818081,"byte_end":9818159,"line_start":11,"line_end":11,"column_start":1,"column_end":79}},{"value":"/   it's aligned to 32 instead of just 4, and of course you can perform","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9818160,"byte_end":9818233,"line_start":12,"line_end":12,"column_start":1,"column_end":74}},{"value":"/   various intrinsic operations on it.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9818234,"byte_end":9818275,"line_start":13,"line_end":13,"column_start":1,"column_end":42}},{"value":"repr(transparent)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9818276,"byte_end":9818296,"line_start":14,"line_end":14,"column_start":1,"column_end":21}},{"value":"allow(non_camel_case_types)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9818297,"byte_end":9818327,"line_start":15,"line_end":15,"column_start":1,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":336},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9818345,"byte_end":9818356,"line_start":16,"line_end":16,"column_start":18,"column_end":29},"name":"0","qualname":"::x86_x64::m256d_::m256d::0","value":"core::arch::x86_64::__m256d","parent":{"krate":0,"index":334},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":341},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9818918,"byte_end":9818926,"line_start":37,"line_end":37,"column_start":10,"column_end":18},"name":"to_array","qualname":"<m256d>::to_array","value":"fn to_array(Self) -> [f64; ]","parent":null,"children":[],"decl_id":null,"docs":" Transmutes the `m256d` to an array.","sig":null,"attributes":[{"value":"/ Transmutes the `m256d` to an array.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9818748,"byte_end":9818787,"line_start":32,"line_end":32,"column_start":3,"column_end":42}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9818790,"byte_end":9818793,"line_start":33,"line_end":33,"column_start":3,"column_end":6}},{"value":"/ Same as `m.into()`, just lets you be more explicit about what's happening.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9818796,"byte_end":9818874,"line_start":34,"line_end":34,"column_start":3,"column_end":81}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9818877,"byte_end":9818888,"line_start":35,"line_end":35,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9818891,"byte_end":9818908,"line_start":36,"line_end":36,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":343},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9819155,"byte_end":9819165,"line_start":47,"line_end":47,"column_start":10,"column_end":20},"name":"from_array","qualname":"<m256d>::from_array","value":"fn from_array([f64; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Transmutes an array into `m256d`.","sig":null,"attributes":[{"value":"/ Transmutes an array into `m256d`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9818970,"byte_end":9819007,"line_start":41,"line_end":41,"column_start":3,"column_end":40}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9819010,"byte_end":9819013,"line_start":42,"line_end":42,"column_start":3,"column_end":6}},{"value":"/ Same as `m256d::from(arr)`, it just lets you be more explicit about what's","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9819016,"byte_end":9819094,"line_start":43,"line_end":43,"column_start":3,"column_end":81}},{"value":"/ happening.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9819097,"byte_end":9819111,"line_start":44,"line_end":44,"column_start":3,"column_end":17}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9819114,"byte_end":9819125,"line_start":45,"line_end":45,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9819128,"byte_end":9819145,"line_start":46,"line_end":46,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":345},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9819396,"byte_end":9819403,"line_start":58,"line_end":58,"column_start":10,"column_end":17},"name":"to_bits","qualname":"<m256d>::to_bits","value":"fn to_bits(Self) -> [u64; ]","parent":null,"children":[],"decl_id":null,"docs":" Converts into the bit patterns of these doubles (`[u64;4]`).","sig":null,"attributes":[{"value":"/ Converts into the bit patterns of these doubles (`[u64;4]`).","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9819215,"byte_end":9819279,"line_start":53,"line_end":53,"column_start":3,"column_end":67}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9819282,"byte_end":9819285,"line_start":54,"line_end":54,"column_start":3,"column_end":6}},{"value":"/ Like [`f64::to_bits`](f64::to_bits), but both lanes at once.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9819288,"byte_end":9819352,"line_start":55,"line_end":55,"column_start":3,"column_end":67}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9819355,"byte_end":9819366,"line_start":56,"line_end":56,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9819369,"byte_end":9819386,"line_start":57,"line_end":57,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":347},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9819658,"byte_end":9819667,"line_start":67,"line_end":67,"column_start":10,"column_end":19},"name":"from_bits","qualname":"<m256d>::from_bits","value":"fn from_bits([u64; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Converts from the bit patterns of these doubles (`[u64;4]`).","sig":null,"attributes":[{"value":"/ Converts from the bit patterns of these doubles (`[u64;4]`).","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9819473,"byte_end":9819537,"line_start":62,"line_end":62,"column_start":3,"column_end":67}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9819540,"byte_end":9819543,"line_start":63,"line_end":63,"column_start":3,"column_end":6}},{"value":"/ Like [`f64::from_bits`](f64::from_bits), but both lanes at once.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9819546,"byte_end":9819614,"line_start":64,"line_end":64,"column_start":3,"column_end":71}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9819617,"byte_end":9819628,"line_start":65,"line_end":65,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9819631,"byte_end":9819648,"line_start":66,"line_end":66,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":350},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9819805,"byte_end":9819810,"line_start":75,"line_end":75,"column_start":6,"column_end":11},"name":"clone","qualname":"<m256d as core::clone::Clone>::clone","value":"fn clone(&Self) -> Self","parent":{"krate":1,"index":2801},"children":[],"decl_id":{"krate":1,"index":2802},"docs":"","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9819768,"byte_end":9819779,"line_start":73,"line_end":73,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9819782,"byte_end":9819799,"line_start":74,"line_end":74,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":353},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9819932,"byte_end":9819939,"line_start":84,"line_end":84,"column_start":6,"column_end":13},"name":"default","qualname":"<m256d as core::default::Default>::default","value":"fn default() -> Self","parent":{"krate":1,"index":3157},"children":[],"decl_id":{"krate":1,"index":3158},"docs":"","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9819895,"byte_end":9819906,"line_start":82,"line_end":82,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9819909,"byte_end":9819926,"line_start":83,"line_end":83,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":356},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9820065,"byte_end":9820069,"line_start":92,"line_end":92,"column_start":6,"column_end":10},"name":"from","qualname":"<m256d as core::convert::From>::from","value":"fn from([f64; ]) -> Self","parent":{"krate":1,"index":3085},"children":[],"decl_id":{"krate":1,"index":3087},"docs":"","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9820028,"byte_end":9820039,"line_start":90,"line_end":90,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9820042,"byte_end":9820059,"line_start":91,"line_end":91,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":360},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9820412,"byte_end":9820416,"line_start":103,"line_end":103,"column_start":6,"column_end":10},"name":"from","qualname":"<[f64; 4] as core::convert::From>::from","value":"fn from(m256d) -> Self","parent":{"krate":1,"index":3085},"children":[],"decl_id":{"krate":1,"index":3087},"docs":"","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9820375,"byte_end":9820386,"line_start":101,"line_end":101,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9820389,"byte_end":9820406,"line_start":102,"line_end":102,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":362},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9820805,"byte_end":9820808,"line_start":120,"line_end":120,"column_start":6,"column_end":9},"name":"fmt","qualname":"<m256d as core::fmt::Debug>::fmt","value":"fn fmt(&Self, &mut core::fmt::Formatter) -> core::fmt::Result","parent":{"krate":1,"index":10110},"children":[],"decl_id":{"krate":1,"index":10111},"docs":" Debug formats each double.\n ```\n # use safe_arch::*;\n let f = format!(\"{:?}\", m256d::default());\n assert_eq!(&f, \"m256d(0.0, 0.0)\");\n ```\n","sig":null,"attributes":[{"value":"/ Debug formats each double.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9820633,"byte_end":9820663,"line_start":114,"line_end":114,"column_start":3,"column_end":33}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9820666,"byte_end":9820673,"line_start":115,"line_end":115,"column_start":3,"column_end":10}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9820676,"byte_end":9820699,"line_start":116,"line_end":116,"column_start":3,"column_end":26}},{"value":"/ let f = format!(\"{:?}\", m256d::default());","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9820702,"byte_end":9820748,"line_start":117,"line_end":117,"column_start":3,"column_end":49}},{"value":"/ assert_eq!(&f, \"m256d(0.0, 0.0)\");","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9820751,"byte_end":9820789,"line_start":118,"line_end":118,"column_start":3,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9820792,"byte_end":9820799,"line_start":119,"line_end":119,"column_start":3,"column_end":10}}]},{"kind":"Method","id":{"krate":0,"index":364},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9821258,"byte_end":9821261,"line_start":137,"line_end":137,"column_start":6,"column_end":9},"name":"fmt","qualname":"<m256d as core::fmt::Display>::fmt","value":"fn fmt(&Self, &mut core::fmt::Formatter) -> core::fmt::Result","parent":{"krate":1,"index":10117},"children":[],"decl_id":{"krate":1,"index":10118},"docs":" Display formats each double, and leaves the type name off of the font.\n ```\n # use safe_arch::*;\n let f = format!(\"{}\", m256d::default());\n assert_eq!(&f, \"(0, 0)\");\n ```\n","sig":null,"attributes":[{"value":"/ Display formats each double, and leaves the type name off of the font.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9821053,"byte_end":9821127,"line_start":131,"line_end":131,"column_start":3,"column_end":77}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9821130,"byte_end":9821137,"line_start":132,"line_end":132,"column_start":3,"column_end":10}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9821140,"byte_end":9821163,"line_start":133,"line_end":133,"column_start":3,"column_end":26}},{"value":"/ let f = format!(\"{}\", m256d::default());","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9821166,"byte_end":9821210,"line_start":134,"line_end":134,"column_start":3,"column_end":47}},{"value":"/ assert_eq!(&f, \"(0, 0)\");","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9821213,"byte_end":9821242,"line_start":135,"line_end":135,"column_start":3,"column_end":32}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9821245,"byte_end":9821252,"line_start":136,"line_end":136,"column_start":3,"column_end":10}}]},{"kind":"Method","id":{"krate":0,"index":366},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9821705,"byte_end":9821708,"line_start":154,"line_end":154,"column_start":6,"column_end":9},"name":"fmt","qualname":"<m256d as core::fmt::Binary>::fmt","value":"fn fmt(&Self, &mut core::fmt::Formatter) -> core::fmt::Result","parent":{"krate":1,"index":10121},"children":[],"decl_id":{"krate":1,"index":10122},"docs":" Binary formats each double's bit pattern (via [`f64::to_bits`]).\n ```\n # use safe_arch::*;\n let f = format!(\"{:b}\", m256d::default());\n assert_eq!(&f, \"(0, 0)\");\n ```\n","sig":null,"attributes":[{"value":"/ Binary formats each double's bit pattern (via [`f64::to_bits`]).","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9821504,"byte_end":9821572,"line_start":148,"line_end":148,"column_start":3,"column_end":71}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9821575,"byte_end":9821582,"line_start":149,"line_end":149,"column_start":3,"column_end":10}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9821585,"byte_end":9821608,"line_start":150,"line_end":150,"column_start":3,"column_end":26}},{"value":"/ let f = format!(\"{:b}\", m256d::default());","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9821611,"byte_end":9821657,"line_start":151,"line_end":151,"column_start":3,"column_end":49}},{"value":"/ assert_eq!(&f, \"(0, 0)\");","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9821660,"byte_end":9821689,"line_start":152,"line_end":152,"column_start":3,"column_end":32}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9821692,"byte_end":9821699,"line_start":153,"line_end":153,"column_start":3,"column_end":10}}]},{"kind":"Method","id":{"krate":0,"index":368},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9822141,"byte_end":9822144,"line_start":171,"line_end":171,"column_start":6,"column_end":9},"name":"fmt","qualname":"<m256d as core::fmt::LowerExp>::fmt","value":"fn fmt(&Self, &mut core::fmt::Formatter) -> core::fmt::Result","parent":{"krate":1,"index":10129},"children":[],"decl_id":{"krate":1,"index":10130},"docs":" LowerExp formats each double.\n ```\n # use safe_arch::*;\n let f = format!(\"{:e}\", m256d::default());\n assert_eq!(&f, \"(0e0, 0e0)\");\n ```\n","sig":null,"attributes":[{"value":"/ LowerExp formats each double.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9821971,"byte_end":9822004,"line_start":165,"line_end":165,"column_start":3,"column_end":36}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9822007,"byte_end":9822014,"line_start":166,"line_end":166,"column_start":3,"column_end":10}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9822017,"byte_end":9822040,"line_start":167,"line_end":167,"column_start":3,"column_end":26}},{"value":"/ let f = format!(\"{:e}\", m256d::default());","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9822043,"byte_end":9822089,"line_start":168,"line_end":168,"column_start":3,"column_end":49}},{"value":"/ assert_eq!(&f, \"(0e0, 0e0)\");","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9822092,"byte_end":9822125,"line_start":169,"line_end":169,"column_start":3,"column_end":36}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9822128,"byte_end":9822135,"line_start":170,"line_end":170,"column_start":3,"column_end":10}}]},{"kind":"Method","id":{"krate":0,"index":370},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9822561,"byte_end":9822564,"line_start":188,"line_end":188,"column_start":6,"column_end":9},"name":"fmt","qualname":"<m256d as core::fmt::UpperExp>::fmt","value":"fn fmt(&Self, &mut core::fmt::Formatter) -> core::fmt::Result","parent":{"krate":1,"index":10131},"children":[],"decl_id":{"krate":1,"index":10132},"docs":" UpperExp formats each double.\n ```\n # use safe_arch::*;\n let f = format!(\"{:E}\", m256d::default());\n assert_eq!(&f, \"(0E0, 0E0)\");\n ```\n","sig":null,"attributes":[{"value":"/ UpperExp formats each double.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9822391,"byte_end":9822424,"line_start":182,"line_end":182,"column_start":3,"column_end":36}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9822427,"byte_end":9822434,"line_start":183,"line_end":183,"column_start":3,"column_end":10}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9822437,"byte_end":9822460,"line_start":184,"line_end":184,"column_start":3,"column_end":26}},{"value":"/ let f = format!(\"{:E}\", m256d::default());","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9822463,"byte_end":9822509,"line_start":185,"line_end":185,"column_start":3,"column_end":49}},{"value":"/ assert_eq!(&f, \"(0E0, 0E0)\");","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9822512,"byte_end":9822545,"line_start":186,"line_end":186,"column_start":3,"column_end":36}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9822548,"byte_end":9822555,"line_start":187,"line_end":187,"column_start":3,"column_end":10}}]},{"kind":"Method","id":{"krate":0,"index":372},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9823014,"byte_end":9823017,"line_start":205,"line_end":205,"column_start":6,"column_end":9},"name":"fmt","qualname":"<m256d as core::fmt::LowerHex>::fmt","value":"fn fmt(&Self, &mut core::fmt::Formatter) -> core::fmt::Result","parent":{"krate":1,"index":10123},"children":[],"decl_id":{"krate":1,"index":10124},"docs":" LowerHex formats each double's bit pattern (via [`f64::to_bits`]).\n ```\n # use safe_arch::*;\n let f = format!(\"{:x}\", m256d::default());\n assert_eq!(&f, \"(0, 0)\");\n ```\n","sig":null,"attributes":[{"value":"/ LowerHex formats each double's bit pattern (via [`f64::to_bits`]).","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9822811,"byte_end":9822881,"line_start":199,"line_end":199,"column_start":3,"column_end":73}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9822884,"byte_end":9822891,"line_start":200,"line_end":200,"column_start":3,"column_end":10}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9822894,"byte_end":9822917,"line_start":201,"line_end":201,"column_start":3,"column_end":26}},{"value":"/ let f = format!(\"{:x}\", m256d::default());","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9822920,"byte_end":9822966,"line_start":202,"line_end":202,"column_start":3,"column_end":49}},{"value":"/ assert_eq!(&f, \"(0, 0)\");","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9822969,"byte_end":9822998,"line_start":203,"line_end":203,"column_start":3,"column_end":32}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9823001,"byte_end":9823008,"line_start":204,"line_end":204,"column_start":3,"column_end":10}}]},{"kind":"Method","id":{"krate":0,"index":374},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9823487,"byte_end":9823490,"line_start":222,"line_end":222,"column_start":6,"column_end":9},"name":"fmt","qualname":"<m256d as core::fmt::UpperHex>::fmt","value":"fn fmt(&Self, &mut core::fmt::Formatter) -> core::fmt::Result","parent":{"krate":1,"index":10125},"children":[],"decl_id":{"krate":1,"index":10126},"docs":" UpperHex formats each double's bit pattern (via [`f64::to_bits`]).\n ```\n # use safe_arch::*;\n let f = format!(\"{:X}\", m256d::default());\n assert_eq!(&f, \"(0, 0)\");\n ```\n","sig":null,"attributes":[{"value":"/ UpperHex formats each double's bit pattern (via [`f64::to_bits`]).","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9823284,"byte_end":9823354,"line_start":216,"line_end":216,"column_start":3,"column_end":73}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9823357,"byte_end":9823364,"line_start":217,"line_end":217,"column_start":3,"column_end":10}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9823367,"byte_end":9823390,"line_start":218,"line_end":218,"column_start":3,"column_end":26}},{"value":"/ let f = format!(\"{:X}\", m256d::default());","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9823393,"byte_end":9823439,"line_start":219,"line_end":219,"column_start":3,"column_end":49}},{"value":"/ assert_eq!(&f, \"(0, 0)\");","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9823442,"byte_end":9823471,"line_start":220,"line_end":220,"column_start":3,"column_end":32}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9823474,"byte_end":9823481,"line_start":221,"line_end":221,"column_start":3,"column_end":10}}]},{"kind":"Method","id":{"krate":0,"index":376},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9823954,"byte_end":9823957,"line_start":239,"line_end":239,"column_start":6,"column_end":9},"name":"fmt","qualname":"<m256d as core::fmt::Octal>::fmt","value":"fn fmt(&Self, &mut core::fmt::Formatter) -> core::fmt::Result","parent":{"krate":1,"index":10119},"children":[],"decl_id":{"krate":1,"index":10120},"docs":" Octal formats each double's bit pattern (via [`f64::to_bits`]).\n ```\n # use safe_arch::*;\n let f = format!(\"{:o}\", m256d::default());\n assert_eq!(&f, \"(0, 0)\");\n ```\n","sig":null,"attributes":[{"value":"/ Octal formats each double's bit pattern (via [`f64::to_bits`]).","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9823754,"byte_end":9823821,"line_start":233,"line_end":233,"column_start":3,"column_end":70}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9823824,"byte_end":9823831,"line_start":234,"line_end":234,"column_start":3,"column_end":10}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9823834,"byte_end":9823857,"line_start":235,"line_end":235,"column_start":3,"column_end":26}},{"value":"/ let f = format!(\"{:o}\", m256d::default());","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9823860,"byte_end":9823906,"line_start":236,"line_end":236,"column_start":3,"column_end":49}},{"value":"/ assert_eq!(&f, \"(0, 0)\");","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9823909,"byte_end":9823938,"line_start":237,"line_end":237,"column_start":3,"column_end":32}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9823941,"byte_end":9823948,"line_start":238,"line_end":238,"column_start":3,"column_end":10}}]},{"kind":"Struct","id":{"krate":0,"index":380},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9825177,"byte_end":9825182,"line_start":19,"line_end":19,"column_start":12,"column_end":17},"name":"m256i","qualname":"::x86_x64::m256i_::m256i","value":"","parent":null,"children":[],"decl_id":null,"docs":" The data for a 256-bit AVX register of integer data.","sig":null,"attributes":[{"value":"/ The data for a 256-bit AVX register of integer data.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9824697,"byte_end":9824753,"line_start":9,"line_end":9,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9824754,"byte_end":9824757,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * The exact layout to view the type as depends on the operation used.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9824758,"byte_end":9824831,"line_start":11,"line_end":11,"column_start":1,"column_end":74}},{"value":"/ * `From` and `Into` impls are provided for all the relevant signed integer","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9824832,"byte_end":9824910,"line_start":12,"line_end":12,"column_start":1,"column_end":79}},{"value":"/   array types.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9824911,"byte_end":9824929,"line_start":13,"line_end":13,"column_start":1,"column_end":19}},{"value":"/ * Formatting impls print as four `i32` values just because they have to pick","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9824930,"byte_end":9825010,"line_start":14,"line_end":14,"column_start":1,"column_end":81}},{"value":"/   something. If you want an alternative you can turn it into an array and","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9825011,"byte_end":9825088,"line_start":15,"line_end":15,"column_start":1,"column_end":78}},{"value":"/   print as you like.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9825089,"byte_end":9825113,"line_start":16,"line_end":16,"column_start":1,"column_end":25}},{"value":"repr(transparent)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9825114,"byte_end":9825134,"line_start":17,"line_end":17,"column_start":1,"column_end":21}},{"value":"allow(non_camel_case_types)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9825135,"byte_end":9825165,"line_start":18,"line_end":18,"column_start":1,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":382},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9825183,"byte_end":9825194,"line_start":19,"line_end":19,"column_start":18,"column_end":29},"name":"0","qualname":"::x86_x64::m256i_::m256i::0","value":"core::arch::x86_64::__m256i","parent":{"krate":0,"index":380},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":387},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9825633,"byte_end":9825638,"line_start":37,"line_end":37,"column_start":6,"column_end":11},"name":"clone","qualname":"<m256i as core::clone::Clone>::clone","value":"fn clone(&Self) -> Self","parent":{"krate":1,"index":2801},"children":[],"decl_id":{"krate":1,"index":2802},"docs":"","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9825596,"byte_end":9825607,"line_start":35,"line_end":35,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9825610,"byte_end":9825627,"line_start":36,"line_end":36,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":390},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9825760,"byte_end":9825767,"line_start":46,"line_end":46,"column_start":6,"column_end":13},"name":"default","qualname":"<m256i as core::default::Default>::default","value":"fn default() -> Self","parent":{"krate":1,"index":3157},"children":[],"decl_id":{"krate":1,"index":3158},"docs":"","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9825723,"byte_end":9825734,"line_start":44,"line_end":44,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9825737,"byte_end":9825754,"line_start":45,"line_end":45,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":393},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9825903,"byte_end":9825907,"line_start":56,"line_end":56,"column_start":6,"column_end":10},"name":"from","qualname":"<m256i as core::convert::From>::from","value":"fn from([i8; ]) -> Self","parent":{"krate":1,"index":3085},"children":[],"decl_id":{"krate":1,"index":3087},"docs":"","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9825866,"byte_end":9825877,"line_start":54,"line_end":54,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9825880,"byte_end":9825897,"line_start":55,"line_end":55,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":397},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9826052,"byte_end":9826056,"line_start":64,"line_end":64,"column_start":6,"column_end":10},"name":"from","qualname":"<[i8; 32] as core::convert::From>::from","value":"fn from(m256i) -> Self","parent":{"krate":1,"index":3085},"children":[],"decl_id":{"krate":1,"index":3087},"docs":"","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9826015,"byte_end":9826026,"line_start":62,"line_end":62,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9826029,"byte_end":9826046,"line_start":63,"line_end":63,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":400},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9826194,"byte_end":9826198,"line_start":72,"line_end":72,"column_start":6,"column_end":10},"name":"from","qualname":"<m256i as core::convert::From>::from","value":"fn from([u8; ]) -> Self","parent":{"krate":1,"index":3085},"children":[],"decl_id":{"krate":1,"index":3087},"docs":"","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9826157,"byte_end":9826168,"line_start":70,"line_end":70,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9826171,"byte_end":9826188,"line_start":71,"line_end":71,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":404},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9826343,"byte_end":9826347,"line_start":80,"line_end":80,"column_start":6,"column_end":10},"name":"from","qualname":"<[u8; 32] as core::convert::From>::from","value":"fn from(m256i) -> Self","parent":{"krate":1,"index":3085},"children":[],"decl_id":{"krate":1,"index":3087},"docs":"","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9826306,"byte_end":9826317,"line_start":78,"line_end":78,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9826320,"byte_end":9826337,"line_start":79,"line_end":79,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":407},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9826497,"byte_end":9826501,"line_start":90,"line_end":90,"column_start":6,"column_end":10},"name":"from","qualname":"<m256i as core::convert::From>::from","value":"fn from([i16; ]) -> Self","parent":{"krate":1,"index":3085},"children":[],"decl_id":{"krate":1,"index":3087},"docs":"","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9826460,"byte_end":9826471,"line_start":88,"line_end":88,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9826474,"byte_end":9826491,"line_start":89,"line_end":89,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":411},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9826648,"byte_end":9826652,"line_start":98,"line_end":98,"column_start":6,"column_end":10},"name":"from","qualname":"<[i16; 16] as core::convert::From>::from","value":"fn from(m256i) -> Self","parent":{"krate":1,"index":3085},"children":[],"decl_id":{"krate":1,"index":3087},"docs":"","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9826611,"byte_end":9826622,"line_start":96,"line_end":96,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9826625,"byte_end":9826642,"line_start":97,"line_end":97,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":414},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9826791,"byte_end":9826795,"line_start":106,"line_end":106,"column_start":6,"column_end":10},"name":"from","qualname":"<m256i as core::convert::From>::from","value":"fn from([u16; ]) -> Self","parent":{"krate":1,"index":3085},"children":[],"decl_id":{"krate":1,"index":3087},"docs":"","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9826754,"byte_end":9826765,"line_start":104,"line_end":104,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9826768,"byte_end":9826785,"line_start":105,"line_end":105,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":418},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9826942,"byte_end":9826946,"line_start":114,"line_end":114,"column_start":6,"column_end":10},"name":"from","qualname":"<[u16; 16] as core::convert::From>::from","value":"fn from(m256i) -> Self","parent":{"krate":1,"index":3085},"children":[],"decl_id":{"krate":1,"index":3087},"docs":"","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9826905,"byte_end":9826916,"line_start":112,"line_end":112,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9826919,"byte_end":9826936,"line_start":113,"line_end":113,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":421},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9827095,"byte_end":9827099,"line_start":124,"line_end":124,"column_start":6,"column_end":10},"name":"from","qualname":"<m256i as core::convert::From>::from","value":"fn from([i32; ]) -> Self","parent":{"krate":1,"index":3085},"children":[],"decl_id":{"krate":1,"index":3087},"docs":"","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9827058,"byte_end":9827069,"line_start":122,"line_end":122,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9827072,"byte_end":9827089,"line_start":123,"line_end":123,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":425},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9827244,"byte_end":9827248,"line_start":132,"line_end":132,"column_start":6,"column_end":10},"name":"from","qualname":"<[i32; 8] as core::convert::From>::from","value":"fn from(m256i) -> Self","parent":{"krate":1,"index":3085},"children":[],"decl_id":{"krate":1,"index":3087},"docs":"","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9827207,"byte_end":9827218,"line_start":130,"line_end":130,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9827221,"byte_end":9827238,"line_start":131,"line_end":131,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":428},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9827386,"byte_end":9827390,"line_start":140,"line_end":140,"column_start":6,"column_end":10},"name":"from","qualname":"<m256i as core::convert::From>::from","value":"fn from([u32; ]) -> Self","parent":{"krate":1,"index":3085},"children":[],"decl_id":{"krate":1,"index":3087},"docs":"","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9827349,"byte_end":9827360,"line_start":138,"line_end":138,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9827363,"byte_end":9827380,"line_start":139,"line_end":139,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":432},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9827535,"byte_end":9827539,"line_start":148,"line_end":148,"column_start":6,"column_end":10},"name":"from","qualname":"<[u32; 8] as core::convert::From>::from","value":"fn from(m256i) -> Self","parent":{"krate":1,"index":3085},"children":[],"decl_id":{"krate":1,"index":3087},"docs":"","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9827498,"byte_end":9827509,"line_start":146,"line_end":146,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9827512,"byte_end":9827529,"line_start":147,"line_end":147,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":435},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9827688,"byte_end":9827692,"line_start":158,"line_end":158,"column_start":6,"column_end":10},"name":"from","qualname":"<m256i as core::convert::From>::from","value":"fn from([i64; ]) -> Self","parent":{"krate":1,"index":3085},"children":[],"decl_id":{"krate":1,"index":3087},"docs":"","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9827651,"byte_end":9827662,"line_start":156,"line_end":156,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9827665,"byte_end":9827682,"line_start":157,"line_end":157,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":439},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9827837,"byte_end":9827841,"line_start":166,"line_end":166,"column_start":6,"column_end":10},"name":"from","qualname":"<[i64; 4] as core::convert::From>::from","value":"fn from(m256i) -> Self","parent":{"krate":1,"index":3085},"children":[],"decl_id":{"krate":1,"index":3087},"docs":"","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9827800,"byte_end":9827811,"line_start":164,"line_end":164,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9827814,"byte_end":9827831,"line_start":165,"line_end":165,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":442},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9827979,"byte_end":9827983,"line_start":174,"line_end":174,"column_start":6,"column_end":10},"name":"from","qualname":"<m256i as core::convert::From>::from","value":"fn from([u64; ]) -> Self","parent":{"krate":1,"index":3085},"children":[],"decl_id":{"krate":1,"index":3087},"docs":"","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9827942,"byte_end":9827953,"line_start":172,"line_end":172,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9827956,"byte_end":9827973,"line_start":173,"line_end":173,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":446},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9828128,"byte_end":9828132,"line_start":182,"line_end":182,"column_start":6,"column_end":10},"name":"from","qualname":"<[u64; 4] as core::convert::From>::from","value":"fn from(m256i) -> Self","parent":{"krate":1,"index":3085},"children":[],"decl_id":{"krate":1,"index":3087},"docs":"","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9828091,"byte_end":9828102,"line_start":180,"line_end":180,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9828105,"byte_end":9828122,"line_start":181,"line_end":181,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":449},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9828283,"byte_end":9828287,"line_start":192,"line_end":192,"column_start":6,"column_end":10},"name":"from","qualname":"<m256i as core::convert::From>::from","value":"fn from([i128; ]) -> Self","parent":{"krate":1,"index":3085},"children":[],"decl_id":{"krate":1,"index":3087},"docs":"","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9828246,"byte_end":9828257,"line_start":190,"line_end":190,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9828260,"byte_end":9828277,"line_start":191,"line_end":191,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":453},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9828430,"byte_end":9828434,"line_start":200,"line_end":200,"column_start":6,"column_end":10},"name":"from","qualname":"<[i128; 2] as core::convert::From>::from","value":"fn from(m256i) -> Self","parent":{"krate":1,"index":3085},"children":[],"decl_id":{"krate":1,"index":3087},"docs":"","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9828393,"byte_end":9828404,"line_start":198,"line_end":198,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9828407,"byte_end":9828424,"line_start":199,"line_end":199,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":456},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9828573,"byte_end":9828577,"line_start":208,"line_end":208,"column_start":6,"column_end":10},"name":"from","qualname":"<m256i as core::convert::From>::from","value":"fn from([u128; ]) -> Self","parent":{"krate":1,"index":3085},"children":[],"decl_id":{"krate":1,"index":3087},"docs":"","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9828536,"byte_end":9828547,"line_start":206,"line_end":206,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9828550,"byte_end":9828567,"line_start":207,"line_end":207,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":460},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9828720,"byte_end":9828724,"line_start":216,"line_end":216,"column_start":6,"column_end":10},"name":"from","qualname":"<[u128; 2] as core::convert::From>::from","value":"fn from(m256i) -> Self","parent":{"krate":1,"index":3085},"children":[],"decl_id":{"krate":1,"index":3087},"docs":"","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9828683,"byte_end":9828694,"line_start":214,"line_end":214,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9828697,"byte_end":9828714,"line_start":215,"line_end":215,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":462},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9829071,"byte_end":9829074,"line_start":232,"line_end":232,"column_start":6,"column_end":9},"name":"fmt","qualname":"<m256i as core::fmt::Debug>::fmt","value":"fn fmt(&Self, &mut core::fmt::Formatter) -> core::fmt::Result","parent":{"krate":1,"index":10110},"children":[],"decl_id":{"krate":1,"index":10111},"docs":" Debug formats each `i32`.\n ```\n # use safe_arch::*;\n let f = format!(\"{:?}\", m256i::default());\n assert_eq!(&f, \"m256i(0, 0, 0, 0, 0, 0, 0, 0)\");\n ```\n","sig":null,"attributes":[{"value":"/ Debug formats each `i32`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9828886,"byte_end":9828915,"line_start":226,"line_end":226,"column_start":3,"column_end":32}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9828918,"byte_end":9828925,"line_start":227,"line_end":227,"column_start":3,"column_end":10}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9828928,"byte_end":9828951,"line_start":228,"line_end":228,"column_start":3,"column_end":26}},{"value":"/ let f = format!(\"{:?}\", m256i::default());","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9828954,"byte_end":9829000,"line_start":229,"line_end":229,"column_start":3,"column_end":49}},{"value":"/ assert_eq!(&f, \"m256i(0, 0, 0, 0, 0, 0, 0, 0)\");","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9829003,"byte_end":9829055,"line_start":230,"line_end":230,"column_start":3,"column_end":55}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9829058,"byte_end":9829065,"line_start":231,"line_end":231,"column_start":3,"column_end":10}}]},{"kind":"Method","id":{"krate":0,"index":465},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9829586,"byte_end":9829589,"line_start":251,"line_end":251,"column_start":6,"column_end":9},"name":"fmt","qualname":"<m256i as core::fmt::Display>::fmt","value":"fn fmt(&Self, &mut core::fmt::Formatter) -> core::fmt::Result","parent":{"krate":1,"index":10117},"children":[],"decl_id":{"krate":1,"index":10118},"docs":" Display formats each `i32`, and leaves the type name off of the font.\n ```\n # use safe_arch::*;\n let f = format!(\"{}\", m256i::default());\n assert_eq!(&f, \"(0, 0, 0, 0, 0, 0, 0, 0)\");\n ```\n","sig":null,"attributes":[{"value":"/ Display formats each `i32`, and leaves the type name off of the font.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9829364,"byte_end":9829437,"line_start":245,"line_end":245,"column_start":3,"column_end":76}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9829440,"byte_end":9829447,"line_start":246,"line_end":246,"column_start":3,"column_end":10}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9829450,"byte_end":9829473,"line_start":247,"line_end":247,"column_start":3,"column_end":26}},{"value":"/ let f = format!(\"{}\", m256i::default());","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9829476,"byte_end":9829520,"line_start":248,"line_end":248,"column_start":3,"column_end":47}},{"value":"/ assert_eq!(&f, \"(0, 0, 0, 0, 0, 0, 0, 0)\");","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9829523,"byte_end":9829570,"line_start":249,"line_end":249,"column_start":3,"column_end":50}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9829573,"byte_end":9829580,"line_start":250,"line_end":250,"column_start":3,"column_end":10}}]},{"kind":"Method","id":{"krate":0,"index":468},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9830056,"byte_end":9830059,"line_start":270,"line_end":270,"column_start":6,"column_end":9},"name":"fmt","qualname":"<m256i as core::fmt::Binary>::fmt","value":"fn fmt(&Self, &mut core::fmt::Formatter) -> core::fmt::Result","parent":{"krate":1,"index":10121},"children":[],"decl_id":{"krate":1,"index":10122},"docs":" Binary formats each `i32`.\n ```\n # use safe_arch::*;\n let f = format!(\"{:b}\", m256i::default());\n assert_eq!(&f, \"(0, 0, 0, 0, 0, 0, 0, 0)\");\n ```\n","sig":null,"attributes":[{"value":"/ Binary formats each `i32`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9829875,"byte_end":9829905,"line_start":264,"line_end":264,"column_start":3,"column_end":33}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9829908,"byte_end":9829915,"line_start":265,"line_end":265,"column_start":3,"column_end":10}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9829918,"byte_end":9829941,"line_start":266,"line_end":266,"column_start":3,"column_end":26}},{"value":"/ let f = format!(\"{:b}\", m256i::default());","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9829944,"byte_end":9829990,"line_start":267,"line_end":267,"column_start":3,"column_end":49}},{"value":"/ assert_eq!(&f, \"(0, 0, 0, 0, 0, 0, 0, 0)\");","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9829993,"byte_end":9830040,"line_start":268,"line_end":268,"column_start":3,"column_end":50}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9830043,"byte_end":9830050,"line_start":269,"line_end":269,"column_start":3,"column_end":10}}]},{"kind":"Method","id":{"krate":0,"index":471},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9830545,"byte_end":9830548,"line_start":289,"line_end":289,"column_start":6,"column_end":9},"name":"fmt","qualname":"<m256i as core::fmt::LowerExp>::fmt","value":"fn fmt(&Self, &mut core::fmt::Formatter) -> core::fmt::Result","parent":{"krate":1,"index":10129},"children":[],"decl_id":{"krate":1,"index":10130},"docs":" LowerExp formats each `i32`.\n ```\n # use safe_arch::*;\n let f = format!(\"{:e}\", m256i::default());\n assert_eq!(&f, \"(0e0, 0e0, 0e0, 0e0, 0e0, 0e0, 0e0, 0e0)\");\n ```\n","sig":null,"attributes":[{"value":"/ LowerExp formats each `i32`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9830346,"byte_end":9830378,"line_start":283,"line_end":283,"column_start":3,"column_end":35}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9830381,"byte_end":9830388,"line_start":284,"line_end":284,"column_start":3,"column_end":10}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9830391,"byte_end":9830414,"line_start":285,"line_end":285,"column_start":3,"column_end":26}},{"value":"/ let f = format!(\"{:e}\", m256i::default());","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9830417,"byte_end":9830463,"line_start":286,"line_end":286,"column_start":3,"column_end":49}},{"value":"/ assert_eq!(&f, \"(0e0, 0e0, 0e0, 0e0, 0e0, 0e0, 0e0, 0e0)\");","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9830466,"byte_end":9830529,"line_start":287,"line_end":287,"column_start":3,"column_end":66}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9830532,"byte_end":9830539,"line_start":288,"line_end":288,"column_start":3,"column_end":10}}]},{"kind":"Method","id":{"krate":0,"index":474},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9831036,"byte_end":9831039,"line_start":308,"line_end":308,"column_start":6,"column_end":9},"name":"fmt","qualname":"<m256i as core::fmt::UpperExp>::fmt","value":"fn fmt(&Self, &mut core::fmt::Formatter) -> core::fmt::Result","parent":{"krate":1,"index":10131},"children":[],"decl_id":{"krate":1,"index":10132},"docs":" UpperExp formats each `i32`.\n ```\n # use safe_arch::*;\n let f = format!(\"{:E}\", m256i::default());\n assert_eq!(&f, \"(0E0, 0E0, 0E0, 0E0, 0E0, 0E0, 0E0, 0E0)\");\n ```\n","sig":null,"attributes":[{"value":"/ UpperExp formats each `i32`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9830837,"byte_end":9830869,"line_start":302,"line_end":302,"column_start":3,"column_end":35}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9830872,"byte_end":9830879,"line_start":303,"line_end":303,"column_start":3,"column_end":10}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9830882,"byte_end":9830905,"line_start":304,"line_end":304,"column_start":3,"column_end":26}},{"value":"/ let f = format!(\"{:E}\", m256i::default());","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9830908,"byte_end":9830954,"line_start":305,"line_end":305,"column_start":3,"column_end":49}},{"value":"/ assert_eq!(&f, \"(0E0, 0E0, 0E0, 0E0, 0E0, 0E0, 0E0, 0E0)\");","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9830957,"byte_end":9831020,"line_start":306,"line_end":306,"column_start":3,"column_end":66}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9831023,"byte_end":9831030,"line_start":307,"line_end":307,"column_start":3,"column_end":10}}]},{"kind":"Method","id":{"krate":0,"index":477},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9831511,"byte_end":9831514,"line_start":327,"line_end":327,"column_start":6,"column_end":9},"name":"fmt","qualname":"<m256i as core::fmt::LowerHex>::fmt","value":"fn fmt(&Self, &mut core::fmt::Formatter) -> core::fmt::Result","parent":{"krate":1,"index":10123},"children":[],"decl_id":{"krate":1,"index":10124},"docs":" LowerHex formats each `i32`.\n ```\n # use safe_arch::*;\n let f = format!(\"{:x}\", m256i::default());\n assert_eq!(&f, \"(0, 0, 0, 0, 0, 0, 0, 0)\");\n ```\n","sig":null,"attributes":[{"value":"/ LowerHex formats each `i32`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9831328,"byte_end":9831360,"line_start":321,"line_end":321,"column_start":3,"column_end":35}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9831363,"byte_end":9831370,"line_start":322,"line_end":322,"column_start":3,"column_end":10}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9831373,"byte_end":9831396,"line_start":323,"line_end":323,"column_start":3,"column_end":26}},{"value":"/ let f = format!(\"{:x}\", m256i::default());","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9831399,"byte_end":9831445,"line_start":324,"line_end":324,"column_start":3,"column_end":49}},{"value":"/ assert_eq!(&f, \"(0, 0, 0, 0, 0, 0, 0, 0)\");","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9831448,"byte_end":9831495,"line_start":325,"line_end":325,"column_start":3,"column_end":50}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9831498,"byte_end":9831505,"line_start":326,"line_end":326,"column_start":3,"column_end":10}}]},{"kind":"Method","id":{"krate":0,"index":480},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9831986,"byte_end":9831989,"line_start":346,"line_end":346,"column_start":6,"column_end":9},"name":"fmt","qualname":"<m256i as core::fmt::UpperHex>::fmt","value":"fn fmt(&Self, &mut core::fmt::Formatter) -> core::fmt::Result","parent":{"krate":1,"index":10125},"children":[],"decl_id":{"krate":1,"index":10126},"docs":" UpperHex formats each `i32`.\n ```\n # use safe_arch::*;\n let f = format!(\"{:X}\", m256i::default());\n assert_eq!(&f, \"(0, 0, 0, 0, 0, 0, 0, 0)\");\n ```\n","sig":null,"attributes":[{"value":"/ UpperHex formats each `i32`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9831803,"byte_end":9831835,"line_start":340,"line_end":340,"column_start":3,"column_end":35}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9831838,"byte_end":9831845,"line_start":341,"line_end":341,"column_start":3,"column_end":10}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9831848,"byte_end":9831871,"line_start":342,"line_end":342,"column_start":3,"column_end":26}},{"value":"/ let f = format!(\"{:X}\", m256i::default());","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9831874,"byte_end":9831920,"line_start":343,"line_end":343,"column_start":3,"column_end":49}},{"value":"/ assert_eq!(&f, \"(0, 0, 0, 0, 0, 0, 0, 0)\");","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9831923,"byte_end":9831970,"line_start":344,"line_end":344,"column_start":3,"column_end":50}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9831973,"byte_end":9831980,"line_start":345,"line_end":345,"column_start":3,"column_end":10}}]},{"kind":"Method","id":{"krate":0,"index":483},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9832455,"byte_end":9832458,"line_start":365,"line_end":365,"column_start":6,"column_end":9},"name":"fmt","qualname":"<m256i as core::fmt::Octal>::fmt","value":"fn fmt(&Self, &mut core::fmt::Formatter) -> core::fmt::Result","parent":{"krate":1,"index":10119},"children":[],"decl_id":{"krate":1,"index":10120},"docs":" Octal formats each `i32`.\n ```\n # use safe_arch::*;\n let f = format!(\"{:o}\", m256i::default());\n assert_eq!(&f, \"(0, 0, 0, 0, 0, 0, 0, 0)\");\n ```\n","sig":null,"attributes":[{"value":"/ Octal formats each `i32`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9832275,"byte_end":9832304,"line_start":359,"line_end":359,"column_start":3,"column_end":32}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9832307,"byte_end":9832314,"line_start":360,"line_end":360,"column_start":3,"column_end":10}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9832317,"byte_end":9832340,"line_start":361,"line_end":361,"column_start":3,"column_end":26}},{"value":"/ let f = format!(\"{:o}\", m256i::default());","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9832343,"byte_end":9832389,"line_start":362,"line_end":362,"column_start":3,"column_end":49}},{"value":"/ assert_eq!(&f, \"(0, 0, 0, 0, 0, 0, 0, 0)\");","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9832392,"byte_end":9832439,"line_start":363,"line_end":363,"column_start":3,"column_end":50}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9832442,"byte_end":9832449,"line_start":364,"line_end":364,"column_start":3,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":488},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9833479,"byte_end":9833487,"line_start":16,"line_end":16,"column_start":8,"column_end":16},"name":"add_m128","qualname":"::x86_x64::sse::add_m128","value":"fn add_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a + b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);\n let c = add_m128(a, b).to_array();\n assert_eq!(c, [6.0, 8.0, 10.0, 12.5]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a + b`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9833139,"byte_end":9833160,"line_start":5,"line_end":5,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9833161,"byte_end":9833168,"line_start":6,"line_end":6,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9833169,"byte_end":9833192,"line_start":7,"line_end":7,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9833193,"byte_end":9833244,"line_start":8,"line_end":8,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9833245,"byte_end":9833296,"line_start":9,"line_end":9,"column_start":1,"column_end":52}},{"value":"/ let c = add_m128(a, b).to_array();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9833297,"byte_end":9833335,"line_start":10,"line_end":10,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(c, [6.0, 8.0, 10.0, 12.5]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9833336,"byte_end":9833378,"line_start":11,"line_end":11,"column_start":1,"column_end":43}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9833379,"byte_end":9833386,"line_start":12,"line_end":12,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9833387,"byte_end":9833398,"line_start":13,"line_end":13,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9833399,"byte_end":9833416,"line_start":14,"line_end":14,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":489},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9833922,"byte_end":9833932,"line_start":31,"line_end":31,"column_start":8,"column_end":18},"name":"add_m128_s","qualname":"::x86_x64::sse::add_m128_s","value":"fn add_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a + b`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);\n let c = add_m128_s(a, b).to_array();\n assert_eq!(c, [6.0, 2.0, 3.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `a + b`, other lanes unchanged.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9833559,"byte_end":9833603,"line_start":20,"line_end":20,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9833604,"byte_end":9833611,"line_start":21,"line_end":21,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9833612,"byte_end":9833635,"line_start":22,"line_end":22,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9833636,"byte_end":9833687,"line_start":23,"line_end":23,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9833688,"byte_end":9833739,"line_start":24,"line_end":24,"column_start":1,"column_end":52}},{"value":"/ let c = add_m128_s(a, b).to_array();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9833740,"byte_end":9833780,"line_start":25,"line_end":25,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(c, [6.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9833781,"byte_end":9833821,"line_start":26,"line_end":26,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9833822,"byte_end":9833829,"line_start":27,"line_end":27,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9833830,"byte_end":9833841,"line_start":28,"line_end":28,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9833842,"byte_end":9833859,"line_start":29,"line_end":29,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":490},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9834344,"byte_end":9834355,"line_start":46,"line_end":46,"column_start":8,"column_end":19},"name":"bitand_m128","qualname":"::x86_x64::sse::bitand_m128","value":"fn bitand_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a & b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);\n let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);\n let c = bitand_m128(a, b).to_array();\n assert_eq!(c, [1.0, 0.0, 0.0, 0.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a & b`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9834004,"byte_end":9834024,"line_start":35,"line_end":35,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9834025,"byte_end":9834032,"line_start":36,"line_end":36,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9834033,"byte_end":9834056,"line_start":37,"line_end":37,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9834057,"byte_end":9834108,"line_start":38,"line_end":38,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9834109,"byte_end":9834160,"line_start":39,"line_end":39,"column_start":1,"column_end":52}},{"value":"/ let c = bitand_m128(a, b).to_array();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9834161,"byte_end":9834202,"line_start":40,"line_end":40,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [1.0, 0.0, 0.0, 0.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9834203,"byte_end":9834243,"line_start":41,"line_end":41,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9834244,"byte_end":9834251,"line_start":42,"line_end":42,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9834252,"byte_end":9834263,"line_start":43,"line_end":43,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9834264,"byte_end":9834281,"line_start":44,"line_end":44,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":491},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9834773,"byte_end":9834787,"line_start":61,"line_end":61,"column_start":8,"column_end":22},"name":"bitandnot_m128","qualname":"::x86_x64::sse::bitandnot_m128","value":"fn bitandnot_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `(!a) & b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);\n let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);\n let c = bitandnot_m128(a, b).to_array();\n assert_eq!(c, [0.0, 1.0, 0.0, 0.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `(!a) & b`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9834427,"byte_end":9834450,"line_start":50,"line_end":50,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9834451,"byte_end":9834458,"line_start":51,"line_end":51,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9834459,"byte_end":9834482,"line_start":52,"line_end":52,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9834483,"byte_end":9834534,"line_start":53,"line_end":53,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9834535,"byte_end":9834586,"line_start":54,"line_end":54,"column_start":1,"column_end":52}},{"value":"/ let c = bitandnot_m128(a, b).to_array();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9834587,"byte_end":9834631,"line_start":55,"line_end":55,"column_start":1,"column_end":45}},{"value":"/ assert_eq!(c, [0.0, 1.0, 0.0, 0.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9834632,"byte_end":9834672,"line_start":56,"line_end":56,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9834673,"byte_end":9834680,"line_start":57,"line_end":57,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9834681,"byte_end":9834692,"line_start":58,"line_end":58,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9834693,"byte_end":9834710,"line_start":59,"line_end":59,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":492},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9835235,"byte_end":9835251,"line_start":78,"line_end":78,"column_start":8,"column_end":24},"name":"cmp_eq_mask_m128","qualname":"::x86_x64::sse::cmp_eq_mask_m128","value":"fn cmp_eq_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a == b`.","sig":null,"attributes":[{"value":"/ Lanewise `a == b`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9834862,"byte_end":9834884,"line_start":65,"line_end":65,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9834885,"byte_end":9834888,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9834889,"byte_end":9834905,"line_start":67,"line_end":67,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9834906,"byte_end":9834913,"line_start":68,"line_end":68,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9834914,"byte_end":9834937,"line_start":69,"line_end":69,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9834938,"byte_end":9834989,"line_start":70,"line_end":70,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9834990,"byte_end":9835041,"line_start":71,"line_end":71,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_eq_mask_m128(a, b).to_bits();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9835042,"byte_end":9835087,"line_start":72,"line_end":72,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(c, [u32::MAX, 0, 0, u32::MAX]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9835088,"byte_end":9835134,"line_start":73,"line_end":73,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9835135,"byte_end":9835142,"line_start":74,"line_end":74,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9835143,"byte_end":9835154,"line_start":75,"line_end":75,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9835155,"byte_end":9835172,"line_start":76,"line_end":76,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":493},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9835730,"byte_end":9835748,"line_start":95,"line_end":95,"column_start":8,"column_end":26},"name":"cmp_eq_mask_m128_s","qualname":"::x86_x64::sse::cmp_eq_mask_m128_s","value":"fn cmp_eq_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a == b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a == b`, other lanes unchanged.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9835325,"byte_end":9835370,"line_start":82,"line_end":82,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9835371,"byte_end":9835374,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9835375,"byte_end":9835391,"line_start":84,"line_end":84,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9835392,"byte_end":9835399,"line_start":85,"line_end":85,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9835400,"byte_end":9835423,"line_start":86,"line_end":86,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9835424,"byte_end":9835475,"line_start":87,"line_end":87,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9835476,"byte_end":9835527,"line_start":88,"line_end":88,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_eq_mask_m128_s(a, b).to_bits();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9835528,"byte_end":9835575,"line_start":89,"line_end":89,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [u32::MAX, 0, 1_f32.to_bits(), 0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9835576,"byte_end":9835629,"line_start":90,"line_end":90,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9835630,"byte_end":9835637,"line_start":91,"line_end":91,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9835638,"byte_end":9835649,"line_start":92,"line_end":92,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9835650,"byte_end":9835667,"line_start":93,"line_end":93,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":494},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9836202,"byte_end":9836218,"line_start":112,"line_end":112,"column_start":8,"column_end":24},"name":"cmp_ge_mask_m128","qualname":"::x86_x64::sse::cmp_ge_mask_m128","value":"fn cmp_ge_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a >= b`.","sig":null,"attributes":[{"value":"/ Lanewise `a >= b`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9835822,"byte_end":9835844,"line_start":99,"line_end":99,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9835845,"byte_end":9835848,"line_start":100,"line_end":100,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9835849,"byte_end":9835865,"line_start":101,"line_end":101,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9835866,"byte_end":9835873,"line_start":102,"line_end":102,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9835874,"byte_end":9835897,"line_start":103,"line_end":103,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9835898,"byte_end":9835949,"line_start":104,"line_end":104,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9835950,"byte_end":9836001,"line_start":105,"line_end":105,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_ge_mask_m128(a, b).to_bits();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9836002,"byte_end":9836047,"line_start":106,"line_end":106,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(c, [0, u32::MAX, u32::MAX, u32::MAX]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9836048,"byte_end":9836101,"line_start":107,"line_end":107,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9836102,"byte_end":9836109,"line_start":108,"line_end":108,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9836110,"byte_end":9836121,"line_start":109,"line_end":109,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9836122,"byte_end":9836139,"line_start":110,"line_end":110,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":495},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9836725,"byte_end":9836743,"line_start":129,"line_end":129,"column_start":8,"column_end":26},"name":"cmp_ge_mask_m128_s","qualname":"::x86_x64::sse::cmp_ge_mask_m128_s","value":"fn cmp_ge_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a >= b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a >= b`, other lanes unchanged.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9836292,"byte_end":9836337,"line_start":116,"line_end":116,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9836338,"byte_end":9836341,"line_start":117,"line_end":117,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9836342,"byte_end":9836358,"line_start":118,"line_end":118,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9836359,"byte_end":9836366,"line_start":119,"line_end":119,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9836367,"byte_end":9836390,"line_start":120,"line_end":120,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([2.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9836391,"byte_end":9836442,"line_start":121,"line_end":121,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9836443,"byte_end":9836494,"line_start":122,"line_end":122,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_ge_mask_m128_s(a, b).to_bits();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9836495,"byte_end":9836542,"line_start":123,"line_end":123,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [u32::MAX, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9836543,"byte_end":9836624,"line_start":124,"line_end":124,"column_start":1,"column_end":82}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9836625,"byte_end":9836632,"line_start":125,"line_end":125,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9836633,"byte_end":9836644,"line_start":126,"line_end":126,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9836645,"byte_end":9836662,"line_start":127,"line_end":127,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":496},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9837189,"byte_end":9837205,"line_start":146,"line_end":146,"column_start":8,"column_end":24},"name":"cmp_gt_mask_m128","qualname":"::x86_x64::sse::cmp_gt_mask_m128","value":"fn cmp_gt_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a > b`.","sig":null,"attributes":[{"value":"/ Lanewise `a > b`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9836817,"byte_end":9836838,"line_start":133,"line_end":133,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9836839,"byte_end":9836842,"line_start":134,"line_end":134,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9836843,"byte_end":9836859,"line_start":135,"line_end":135,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9836860,"byte_end":9836867,"line_start":136,"line_end":136,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9836868,"byte_end":9836891,"line_start":137,"line_end":137,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9836892,"byte_end":9836943,"line_start":138,"line_end":138,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9836944,"byte_end":9836995,"line_start":139,"line_end":139,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_gt_mask_m128(a, b).to_bits();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9836996,"byte_end":9837041,"line_start":140,"line_end":140,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(c, [0, 0, u32::MAX, u32::MAX]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9837042,"byte_end":9837088,"line_start":141,"line_end":141,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9837089,"byte_end":9837096,"line_start":142,"line_end":142,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9837097,"byte_end":9837108,"line_start":143,"line_end":143,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9837109,"byte_end":9837126,"line_start":144,"line_end":144,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":497},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9837711,"byte_end":9837729,"line_start":163,"line_end":163,"column_start":8,"column_end":26},"name":"cmp_gt_mask_m128_s","qualname":"::x86_x64::sse::cmp_gt_mask_m128_s","value":"fn cmp_gt_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a > b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a > b`, other lanes unchanged.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9837279,"byte_end":9837323,"line_start":150,"line_end":150,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9837324,"byte_end":9837327,"line_start":151,"line_end":151,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9837328,"byte_end":9837344,"line_start":152,"line_end":152,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9837345,"byte_end":9837352,"line_start":153,"line_end":153,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9837353,"byte_end":9837376,"line_start":154,"line_end":154,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([2.5, 2.0, 3.0, 4.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9837377,"byte_end":9837428,"line_start":155,"line_end":155,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9837429,"byte_end":9837480,"line_start":156,"line_end":156,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_gt_mask_m128_s(a, b).to_bits();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9837481,"byte_end":9837528,"line_start":157,"line_end":157,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [u32::MAX, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9837529,"byte_end":9837610,"line_start":158,"line_end":158,"column_start":1,"column_end":82}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9837611,"byte_end":9837618,"line_start":159,"line_end":159,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9837619,"byte_end":9837630,"line_start":160,"line_end":160,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9837631,"byte_end":9837648,"line_start":161,"line_end":161,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":498},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9838176,"byte_end":9838192,"line_start":180,"line_end":180,"column_start":8,"column_end":24},"name":"cmp_le_mask_m128","qualname":"::x86_x64::sse::cmp_le_mask_m128","value":"fn cmp_le_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a <= b`.","sig":null,"attributes":[{"value":"/ Lanewise `a <= b`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9837803,"byte_end":9837825,"line_start":167,"line_end":167,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9837826,"byte_end":9837829,"line_start":168,"line_end":168,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9837830,"byte_end":9837846,"line_start":169,"line_end":169,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9837847,"byte_end":9837854,"line_start":170,"line_end":170,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9837855,"byte_end":9837878,"line_start":171,"line_end":171,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9837879,"byte_end":9837930,"line_start":172,"line_end":172,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9837931,"byte_end":9837982,"line_start":173,"line_end":173,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_le_mask_m128(a, b).to_bits();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9837983,"byte_end":9838028,"line_start":174,"line_end":174,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(c, [u32::MAX, u32::MAX, 0, 0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9838029,"byte_end":9838075,"line_start":175,"line_end":175,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9838076,"byte_end":9838083,"line_start":176,"line_end":176,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9838084,"byte_end":9838095,"line_start":177,"line_end":177,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9838096,"byte_end":9838113,"line_start":178,"line_end":178,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":499},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9838699,"byte_end":9838717,"line_start":197,"line_end":197,"column_start":8,"column_end":26},"name":"cmp_le_mask_m128_s","qualname":"::x86_x64::sse::cmp_le_mask_m128_s","value":"fn cmp_le_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a <= b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a <= b`, other lanes unchanged.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9838266,"byte_end":9838311,"line_start":184,"line_end":184,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9838312,"byte_end":9838315,"line_start":185,"line_end":185,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9838316,"byte_end":9838332,"line_start":186,"line_end":186,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9838333,"byte_end":9838340,"line_start":187,"line_end":187,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9838341,"byte_end":9838364,"line_start":188,"line_end":188,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([2.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9838365,"byte_end":9838416,"line_start":189,"line_end":189,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9838417,"byte_end":9838468,"line_start":190,"line_end":190,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_le_mask_m128_s(a, b).to_bits();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9838469,"byte_end":9838516,"line_start":191,"line_end":191,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [u32::MAX, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9838517,"byte_end":9838598,"line_start":192,"line_end":192,"column_start":1,"column_end":82}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9838599,"byte_end":9838606,"line_start":193,"line_end":193,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9838607,"byte_end":9838618,"line_start":194,"line_end":194,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9838619,"byte_end":9838636,"line_start":195,"line_end":195,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":500},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9839156,"byte_end":9839172,"line_start":214,"line_end":214,"column_start":8,"column_end":24},"name":"cmp_lt_mask_m128","qualname":"::x86_x64::sse::cmp_lt_mask_m128","value":"fn cmp_lt_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a < b`.","sig":null,"attributes":[{"value":"/ Lanewise `a < b`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9838791,"byte_end":9838812,"line_start":201,"line_end":201,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9838813,"byte_end":9838816,"line_start":202,"line_end":202,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9838817,"byte_end":9838833,"line_start":203,"line_end":203,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9838834,"byte_end":9838841,"line_start":204,"line_end":204,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9838842,"byte_end":9838865,"line_start":205,"line_end":205,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9838866,"byte_end":9838917,"line_start":206,"line_end":206,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9838918,"byte_end":9838969,"line_start":207,"line_end":207,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_lt_mask_m128(a, b).to_bits();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9838970,"byte_end":9839015,"line_start":208,"line_end":208,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(c, [u32::MAX, 0, 0, 0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9839016,"byte_end":9839055,"line_start":209,"line_end":209,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9839056,"byte_end":9839063,"line_start":210,"line_end":210,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9839064,"byte_end":9839075,"line_start":211,"line_end":211,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9839076,"byte_end":9839093,"line_start":212,"line_end":212,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":501},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9839678,"byte_end":9839696,"line_start":231,"line_end":231,"column_start":8,"column_end":26},"name":"cmp_lt_mask_m128_s","qualname":"::x86_x64::sse::cmp_lt_mask_m128_s","value":"fn cmp_lt_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a < b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a < b`, other lanes unchanged.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9839246,"byte_end":9839290,"line_start":218,"line_end":218,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9839291,"byte_end":9839294,"line_start":219,"line_end":219,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9839295,"byte_end":9839311,"line_start":220,"line_end":220,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9839312,"byte_end":9839319,"line_start":221,"line_end":221,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9839320,"byte_end":9839343,"line_start":222,"line_end":222,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9839344,"byte_end":9839395,"line_start":223,"line_end":223,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9839396,"byte_end":9839447,"line_start":224,"line_end":224,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_lt_mask_m128_s(a, b).to_bits();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9839448,"byte_end":9839495,"line_start":225,"line_end":225,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [u32::MAX, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9839496,"byte_end":9839577,"line_start":226,"line_end":226,"column_start":1,"column_end":82}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9839578,"byte_end":9839585,"line_start":227,"line_end":227,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9839586,"byte_end":9839597,"line_start":228,"line_end":228,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9839598,"byte_end":9839615,"line_start":229,"line_end":229,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":502},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9840144,"byte_end":9840161,"line_start":248,"line_end":248,"column_start":8,"column_end":25},"name":"cmp_neq_mask_m128","qualname":"::x86_x64::sse::cmp_neq_mask_m128","value":"fn cmp_neq_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a != b`.","sig":null,"attributes":[{"value":"/ Lanewise `a != b`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9839770,"byte_end":9839792,"line_start":235,"line_end":235,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9839793,"byte_end":9839796,"line_start":236,"line_end":236,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9839797,"byte_end":9839813,"line_start":237,"line_end":237,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9839814,"byte_end":9839821,"line_start":238,"line_end":238,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9839822,"byte_end":9839845,"line_start":239,"line_end":239,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9839846,"byte_end":9839897,"line_start":240,"line_end":240,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9839898,"byte_end":9839949,"line_start":241,"line_end":241,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_neq_mask_m128(a, b).to_bits();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9839950,"byte_end":9839996,"line_start":242,"line_end":242,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [0, u32::MAX, u32::MAX, 0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9839997,"byte_end":9840043,"line_start":243,"line_end":243,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9840044,"byte_end":9840051,"line_start":244,"line_end":244,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9840052,"byte_end":9840063,"line_start":245,"line_end":245,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9840064,"byte_end":9840081,"line_start":246,"line_end":246,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":503},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9840635,"byte_end":9840654,"line_start":265,"line_end":265,"column_start":8,"column_end":27},"name":"cmp_neq_mask_m128_s","qualname":"::x86_x64::sse::cmp_neq_mask_m128_s","value":"fn cmp_neq_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a != b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a != b`, other lanes unchanged.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9840236,"byte_end":9840281,"line_start":252,"line_end":252,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9840282,"byte_end":9840285,"line_start":253,"line_end":253,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9840286,"byte_end":9840302,"line_start":254,"line_end":254,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9840303,"byte_end":9840310,"line_start":255,"line_end":255,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9840311,"byte_end":9840334,"line_start":256,"line_end":256,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9840335,"byte_end":9840386,"line_start":257,"line_end":257,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9840387,"byte_end":9840438,"line_start":258,"line_end":258,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_neq_mask_m128_s(a, b).to_bits();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9840439,"byte_end":9840487,"line_start":259,"line_end":259,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, 0, 1_f32.to_bits(), 0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9840488,"byte_end":9840534,"line_start":260,"line_end":260,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9840535,"byte_end":9840542,"line_start":261,"line_end":261,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9840543,"byte_end":9840554,"line_start":262,"line_end":262,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9840555,"byte_end":9840572,"line_start":263,"line_end":263,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":504},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9841099,"byte_end":9841116,"line_start":282,"line_end":282,"column_start":8,"column_end":25},"name":"cmp_nge_mask_m128","qualname":"::x86_x64::sse::cmp_nge_mask_m128","value":"fn cmp_nge_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `!(a >= b)`.","sig":null,"attributes":[{"value":"/ Lanewise `!(a >= b)`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9840729,"byte_end":9840754,"line_start":269,"line_end":269,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9840755,"byte_end":9840758,"line_start":270,"line_end":270,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9840759,"byte_end":9840775,"line_start":271,"line_end":271,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9840776,"byte_end":9840783,"line_start":272,"line_end":272,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9840784,"byte_end":9840807,"line_start":273,"line_end":273,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9840808,"byte_end":9840859,"line_start":274,"line_end":274,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9840860,"byte_end":9840911,"line_start":275,"line_end":275,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_nge_mask_m128(a, b).to_bits();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9840912,"byte_end":9840958,"line_start":276,"line_end":276,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [u32::MAX, 0, 0, 0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9840959,"byte_end":9840998,"line_start":277,"line_end":277,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9840999,"byte_end":9841006,"line_start":278,"line_end":278,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9841007,"byte_end":9841018,"line_start":279,"line_end":279,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9841019,"byte_end":9841036,"line_start":280,"line_end":280,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":505},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9841621,"byte_end":9841640,"line_start":299,"line_end":299,"column_start":8,"column_end":27},"name":"cmp_nge_mask_m128_s","qualname":"::x86_x64::sse::cmp_nge_mask_m128_s","value":"fn cmp_nge_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `!(a >= b)`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `!(a >= b)`, other lanes unchanged.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9841191,"byte_end":9841239,"line_start":286,"line_end":286,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9841240,"byte_end":9841243,"line_start":287,"line_end":287,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9841244,"byte_end":9841260,"line_start":288,"line_end":288,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9841261,"byte_end":9841268,"line_start":289,"line_end":289,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9841269,"byte_end":9841292,"line_start":290,"line_end":290,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([2.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9841293,"byte_end":9841344,"line_start":291,"line_end":291,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9841345,"byte_end":9841396,"line_start":292,"line_end":292,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_nge_mask_m128_s(a, b).to_bits();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9841397,"byte_end":9841445,"line_start":293,"line_end":293,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9841446,"byte_end":9841520,"line_start":294,"line_end":294,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9841521,"byte_end":9841528,"line_start":295,"line_end":295,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9841529,"byte_end":9841540,"line_start":296,"line_end":296,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9841541,"byte_end":9841558,"line_start":297,"line_end":297,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":506},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9842091,"byte_end":9842108,"line_start":316,"line_end":316,"column_start":8,"column_end":25},"name":"cmp_ngt_mask_m128","qualname":"::x86_x64::sse::cmp_ngt_mask_m128","value":"fn cmp_ngt_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `!(a > b)`.","sig":null,"attributes":[{"value":"/ Lanewise `!(a > b)`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9841715,"byte_end":9841739,"line_start":303,"line_end":303,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9841740,"byte_end":9841743,"line_start":304,"line_end":304,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9841744,"byte_end":9841760,"line_start":305,"line_end":305,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9841761,"byte_end":9841768,"line_start":306,"line_end":306,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9841769,"byte_end":9841792,"line_start":307,"line_end":307,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9841793,"byte_end":9841844,"line_start":308,"line_end":308,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9841845,"byte_end":9841896,"line_start":309,"line_end":309,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_ngt_mask_m128(a, b).to_bits();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9841897,"byte_end":9841943,"line_start":310,"line_end":310,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [u32::MAX, u32::MAX, 0, 0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9841944,"byte_end":9841990,"line_start":311,"line_end":311,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9841991,"byte_end":9841998,"line_start":312,"line_end":312,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9841999,"byte_end":9842010,"line_start":313,"line_end":313,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9842011,"byte_end":9842028,"line_start":314,"line_end":314,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":507},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9842612,"byte_end":9842631,"line_start":333,"line_end":333,"column_start":8,"column_end":27},"name":"cmp_ngt_mask_m128_s","qualname":"::x86_x64::sse::cmp_ngt_mask_m128_s","value":"fn cmp_ngt_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `!(a > b)`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `!(a > b)`, other lanes unchanged.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9842183,"byte_end":9842230,"line_start":320,"line_end":320,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9842231,"byte_end":9842234,"line_start":321,"line_end":321,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9842235,"byte_end":9842251,"line_start":322,"line_end":322,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9842252,"byte_end":9842259,"line_start":323,"line_end":323,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9842260,"byte_end":9842283,"line_start":324,"line_end":324,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([2.5, 2.0, 3.0, 4.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9842284,"byte_end":9842335,"line_start":325,"line_end":325,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9842336,"byte_end":9842387,"line_start":326,"line_end":326,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_ngt_mask_m128_s(a, b).to_bits();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9842388,"byte_end":9842436,"line_start":327,"line_end":327,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9842437,"byte_end":9842511,"line_start":328,"line_end":328,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9842512,"byte_end":9842519,"line_start":329,"line_end":329,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9842520,"byte_end":9842531,"line_start":330,"line_end":330,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9842532,"byte_end":9842549,"line_start":331,"line_end":331,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":508},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9843083,"byte_end":9843100,"line_start":350,"line_end":350,"column_start":8,"column_end":25},"name":"cmp_nle_mask_m128","qualname":"::x86_x64::sse::cmp_nle_mask_m128","value":"fn cmp_nle_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `!(a <= b)`.","sig":null,"attributes":[{"value":"/ Lanewise `!(a <= b)`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9842706,"byte_end":9842731,"line_start":337,"line_end":337,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9842732,"byte_end":9842735,"line_start":338,"line_end":338,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9842736,"byte_end":9842752,"line_start":339,"line_end":339,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9842753,"byte_end":9842760,"line_start":340,"line_end":340,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9842761,"byte_end":9842784,"line_start":341,"line_end":341,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9842785,"byte_end":9842836,"line_start":342,"line_end":342,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9842837,"byte_end":9842888,"line_start":343,"line_end":343,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_nle_mask_m128(a, b).to_bits();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9842889,"byte_end":9842935,"line_start":344,"line_end":344,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [0, 0, u32::MAX, u32::MAX]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9842936,"byte_end":9842982,"line_start":345,"line_end":345,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9842983,"byte_end":9842990,"line_start":346,"line_end":346,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9842991,"byte_end":9843002,"line_start":347,"line_end":347,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9843003,"byte_end":9843020,"line_start":348,"line_end":348,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":509},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9843605,"byte_end":9843624,"line_start":367,"line_end":367,"column_start":8,"column_end":27},"name":"cmp_nle_mask_m128_s","qualname":"::x86_x64::sse::cmp_nle_mask_m128_s","value":"fn cmp_nle_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `!(a <= b)`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `!(a <= b)`, other lanes unchanged.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9843175,"byte_end":9843223,"line_start":354,"line_end":354,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9843224,"byte_end":9843227,"line_start":355,"line_end":355,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9843228,"byte_end":9843244,"line_start":356,"line_end":356,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9843245,"byte_end":9843252,"line_start":357,"line_end":357,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9843253,"byte_end":9843276,"line_start":358,"line_end":358,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([2.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9843277,"byte_end":9843328,"line_start":359,"line_end":359,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9843329,"byte_end":9843380,"line_start":360,"line_end":360,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_nle_mask_m128_s(a, b).to_bits();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9843381,"byte_end":9843429,"line_start":361,"line_end":361,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9843430,"byte_end":9843504,"line_start":362,"line_end":362,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9843505,"byte_end":9843512,"line_start":363,"line_end":363,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9843513,"byte_end":9843524,"line_start":364,"line_end":364,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9843525,"byte_end":9843542,"line_start":365,"line_end":365,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":510},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9844082,"byte_end":9844099,"line_start":384,"line_end":384,"column_start":8,"column_end":25},"name":"cmp_nlt_mask_m128","qualname":"::x86_x64::sse::cmp_nlt_mask_m128","value":"fn cmp_nlt_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `!(a < b)`.","sig":null,"attributes":[{"value":"/ Lanewise `!(a < b)`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9843699,"byte_end":9843723,"line_start":371,"line_end":371,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9843724,"byte_end":9843727,"line_start":372,"line_end":372,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9843728,"byte_end":9843744,"line_start":373,"line_end":373,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9843745,"byte_end":9843752,"line_start":374,"line_end":374,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9843753,"byte_end":9843776,"line_start":375,"line_end":375,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9843777,"byte_end":9843828,"line_start":376,"line_end":376,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9843829,"byte_end":9843880,"line_start":377,"line_end":377,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_nlt_mask_m128(a, b).to_bits();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9843881,"byte_end":9843927,"line_start":378,"line_end":378,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [0, u32::MAX, u32::MAX, u32::MAX]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9843928,"byte_end":9843981,"line_start":379,"line_end":379,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9843982,"byte_end":9843989,"line_start":380,"line_end":380,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9843990,"byte_end":9844001,"line_start":381,"line_end":381,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9844002,"byte_end":9844019,"line_start":382,"line_end":382,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":511},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9844603,"byte_end":9844622,"line_start":401,"line_end":401,"column_start":8,"column_end":27},"name":"cmp_nlt_mask_m128_s","qualname":"::x86_x64::sse::cmp_nlt_mask_m128_s","value":"fn cmp_nlt_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `!(a < b)`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `!(a < b)`, other lanes unchanged.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9844174,"byte_end":9844221,"line_start":388,"line_end":388,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9844222,"byte_end":9844225,"line_start":389,"line_end":389,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9844226,"byte_end":9844242,"line_start":390,"line_end":390,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9844243,"byte_end":9844250,"line_start":391,"line_end":391,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9844251,"byte_end":9844274,"line_start":392,"line_end":392,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9844275,"byte_end":9844326,"line_start":393,"line_end":393,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9844327,"byte_end":9844378,"line_start":394,"line_end":394,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_nlt_mask_m128_s(a, b).to_bits();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9844379,"byte_end":9844427,"line_start":395,"line_end":395,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9844428,"byte_end":9844502,"line_start":396,"line_end":396,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9844503,"byte_end":9844510,"line_start":397,"line_end":397,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9844511,"byte_end":9844522,"line_start":398,"line_end":398,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9844523,"byte_end":9844540,"line_start":399,"line_end":399,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":512},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9845112,"byte_end":9845134,"line_start":418,"line_end":418,"column_start":8,"column_end":30},"name":"cmp_ordinary_mask_m128","qualname":"::x86_x64::sse::cmp_ordinary_mask_m128","value":"fn cmp_ordinary_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `(!a.is_nan()) & (!b.is_nan())`.","sig":null,"attributes":[{"value":"/ Lanewise `(!a.is_nan()) & (!b.is_nan())`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9844697,"byte_end":9844742,"line_start":405,"line_end":405,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9844743,"byte_end":9844746,"line_start":406,"line_end":406,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9844747,"byte_end":9844763,"line_start":407,"line_end":407,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9844764,"byte_end":9844771,"line_start":408,"line_end":408,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9844772,"byte_end":9844795,"line_start":409,"line_end":409,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([0.0, f32::NAN, 0.0, f32::NAN]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9844796,"byte_end":9844857,"line_start":410,"line_end":410,"column_start":1,"column_end":62}},{"value":"/ let b = m128::from_array([0.0, 0.0, f32::NAN, f32::NAN]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9844858,"byte_end":9844919,"line_start":411,"line_end":411,"column_start":1,"column_end":62}},{"value":"/ let c = cmp_ordinary_mask_m128(a, b).to_bits();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9844920,"byte_end":9844971,"line_start":412,"line_end":412,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(c, [u32::MAX, 0, 0, 0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9844972,"byte_end":9845011,"line_start":413,"line_end":413,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9845012,"byte_end":9845019,"line_start":414,"line_end":414,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9845020,"byte_end":9845031,"line_start":415,"line_end":415,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9845032,"byte_end":9845049,"line_start":416,"line_end":416,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":513},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9845686,"byte_end":9845710,"line_start":435,"line_end":435,"column_start":8,"column_end":32},"name":"cmp_ordinary_mask_m128_s","qualname":"::x86_x64::sse::cmp_ordinary_mask_m128_s","value":"fn cmp_ordinary_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `(!a.is_nan()) & (!b.is_nan())`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `(!a.is_nan()) & (!b.is_nan())`, other lanes unchanged.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9845209,"byte_end":9845277,"line_start":422,"line_end":422,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9845278,"byte_end":9845281,"line_start":423,"line_end":423,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9845282,"byte_end":9845298,"line_start":424,"line_end":424,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9845299,"byte_end":9845306,"line_start":425,"line_end":425,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9845307,"byte_end":9845330,"line_start":426,"line_end":426,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([0.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9845331,"byte_end":9845382,"line_start":427,"line_end":427,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([0.0, f32::NAN, f32::NAN, f32::NAN]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9845383,"byte_end":9845449,"line_start":428,"line_end":428,"column_start":1,"column_end":67}},{"value":"/ let c = cmp_ordinary_mask_m128_s(a, b).to_bits();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9845450,"byte_end":9845503,"line_start":429,"line_end":429,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c, [u32::MAX, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9845504,"byte_end":9845585,"line_start":430,"line_end":430,"column_start":1,"column_end":82}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9845586,"byte_end":9845593,"line_start":431,"line_end":431,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9845594,"byte_end":9845605,"line_start":432,"line_end":432,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9845606,"byte_end":9845623,"line_start":433,"line_end":433,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":514},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9846205,"byte_end":9846224,"line_start":452,"line_end":452,"column_start":8,"column_end":27},"name":"cmp_unord_mask_m128","qualname":"::x86_x64::sse::cmp_unord_mask_m128","value":"fn cmp_unord_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a.is_nan() | b.is_nan()`.","sig":null,"attributes":[{"value":"/ Lanewise `a.is_nan() | b.is_nan()`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9845785,"byte_end":9845824,"line_start":439,"line_end":439,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9845825,"byte_end":9845828,"line_start":440,"line_end":440,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9845829,"byte_end":9845845,"line_start":441,"line_end":441,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9845846,"byte_end":9845853,"line_start":442,"line_end":442,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9845854,"byte_end":9845877,"line_start":443,"line_end":443,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([0.0, f32::NAN, 0.0, f32::NAN]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9845878,"byte_end":9845939,"line_start":444,"line_end":444,"column_start":1,"column_end":62}},{"value":"/ let b = m128::from_array([0.0, 0.0, f32::NAN, f32::NAN]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9845940,"byte_end":9846001,"line_start":445,"line_end":445,"column_start":1,"column_end":62}},{"value":"/ let c = cmp_unord_mask_m128(a, b).to_bits();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9846002,"byte_end":9846050,"line_start":446,"line_end":446,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, u32::MAX, u32::MAX, u32::MAX]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9846051,"byte_end":9846104,"line_start":447,"line_end":447,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9846105,"byte_end":9846112,"line_start":448,"line_end":448,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9846113,"byte_end":9846124,"line_start":449,"line_end":449,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9846125,"byte_end":9846142,"line_start":450,"line_end":450,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":515},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9846762,"byte_end":9846783,"line_start":469,"line_end":469,"column_start":8,"column_end":29},"name":"cmp_unord_mask_m128_s","qualname":"::x86_x64::sse::cmp_unord_mask_m128_s","value":"fn cmp_unord_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a.is_nan() | b.is_nan()`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a.is_nan() | b.is_nan()`, other lanes unchanged.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9846301,"byte_end":9846363,"line_start":456,"line_end":456,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9846364,"byte_end":9846367,"line_start":457,"line_end":457,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9846368,"byte_end":9846384,"line_start":458,"line_end":458,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9846385,"byte_end":9846392,"line_start":459,"line_end":459,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9846393,"byte_end":9846416,"line_start":460,"line_end":460,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([0.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9846417,"byte_end":9846468,"line_start":461,"line_end":461,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([0.0, f32::NAN, f32::NAN, f32::NAN]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9846469,"byte_end":9846535,"line_start":462,"line_end":462,"column_start":1,"column_end":67}},{"value":"/ let c = cmp_unord_mask_m128_s(a, b).to_bits();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9846536,"byte_end":9846586,"line_start":463,"line_end":463,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(c, [0, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9846587,"byte_end":9846661,"line_start":464,"line_end":464,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9846662,"byte_end":9846669,"line_start":465,"line_end":465,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9846670,"byte_end":9846681,"line_start":466,"line_end":466,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9846682,"byte_end":9846699,"line_start":467,"line_end":467,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":516},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9847189,"byte_end":9847206,"line_start":485,"line_end":485,"column_start":8,"column_end":25},"name":"cmp_eq_i32_m128_s","qualname":"::x86_x64::sse::cmp_eq_i32_m128_s","value":"fn cmp_eq_i32_m128_s(m128, m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane equality.","sig":null,"attributes":[{"value":"/ Low lane equality.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9846860,"byte_end":9846882,"line_start":473,"line_end":473,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9846883,"byte_end":9846886,"line_start":474,"line_end":474,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9846887,"byte_end":9846904,"line_start":475,"line_end":475,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9846905,"byte_end":9846912,"line_start":476,"line_end":476,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9846913,"byte_end":9846936,"line_start":477,"line_end":477,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9846937,"byte_end":9846988,"line_start":478,"line_end":478,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 1.0, 1.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9846989,"byte_end":9847040,"line_start":479,"line_end":479,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(1_i32, cmp_eq_i32_m128_s(a, b));","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9847041,"byte_end":9847088,"line_start":480,"line_end":480,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9847089,"byte_end":9847096,"line_start":481,"line_end":481,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9847097,"byte_end":9847108,"line_start":482,"line_end":482,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9847109,"byte_end":9847126,"line_start":483,"line_end":483,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":517},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9847619,"byte_end":9847636,"line_start":501,"line_end":501,"column_start":8,"column_end":25},"name":"cmp_ge_i32_m128_s","qualname":"::x86_x64::sse::cmp_ge_i32_m128_s","value":"fn cmp_ge_i32_m128_s(m128, m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane greater than or equal to.","sig":null,"attributes":[{"value":"/ Low lane greater than or equal to.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9847274,"byte_end":9847312,"line_start":489,"line_end":489,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9847313,"byte_end":9847316,"line_start":490,"line_end":490,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9847317,"byte_end":9847334,"line_start":491,"line_end":491,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9847335,"byte_end":9847342,"line_start":492,"line_end":492,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9847343,"byte_end":9847366,"line_start":493,"line_end":493,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([2.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9847367,"byte_end":9847418,"line_start":494,"line_end":494,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 1.0, 1.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9847419,"byte_end":9847470,"line_start":495,"line_end":495,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(1_i32, cmp_ge_i32_m128_s(a, b));","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9847471,"byte_end":9847518,"line_start":496,"line_end":496,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9847519,"byte_end":9847526,"line_start":497,"line_end":497,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9847527,"byte_end":9847538,"line_start":498,"line_end":498,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9847539,"byte_end":9847556,"line_start":499,"line_end":499,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":518},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9848037,"byte_end":9848054,"line_start":517,"line_end":517,"column_start":8,"column_end":25},"name":"cmp_gt_i32_m128_s","qualname":"::x86_x64::sse::cmp_gt_i32_m128_s","value":"fn cmp_gt_i32_m128_s(m128, m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane greater than.","sig":null,"attributes":[{"value":"/ Low lane greater than.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9847704,"byte_end":9847730,"line_start":505,"line_end":505,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9847731,"byte_end":9847734,"line_start":506,"line_end":506,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9847735,"byte_end":9847752,"line_start":507,"line_end":507,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9847753,"byte_end":9847760,"line_start":508,"line_end":508,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9847761,"byte_end":9847784,"line_start":509,"line_end":509,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([2.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9847785,"byte_end":9847836,"line_start":510,"line_end":510,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 1.0, 1.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9847837,"byte_end":9847888,"line_start":511,"line_end":511,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(1_i32, cmp_gt_i32_m128_s(a, b));","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9847889,"byte_end":9847936,"line_start":512,"line_end":512,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9847937,"byte_end":9847944,"line_start":513,"line_end":513,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9847945,"byte_end":9847956,"line_start":514,"line_end":514,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9847957,"byte_end":9847974,"line_start":515,"line_end":515,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":519},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9848464,"byte_end":9848481,"line_start":533,"line_end":533,"column_start":8,"column_end":25},"name":"cmp_le_i32_m128_s","qualname":"::x86_x64::sse::cmp_le_i32_m128_s","value":"fn cmp_le_i32_m128_s(m128, m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane less than or equal to.","sig":null,"attributes":[{"value":"/ Low lane less than or equal to.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9848122,"byte_end":9848157,"line_start":521,"line_end":521,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9848158,"byte_end":9848161,"line_start":522,"line_end":522,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9848162,"byte_end":9848179,"line_start":523,"line_end":523,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9848180,"byte_end":9848187,"line_start":524,"line_end":524,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9848188,"byte_end":9848211,"line_start":525,"line_end":525,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([0.5, 2.0, 3.0, 4.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9848212,"byte_end":9848263,"line_start":526,"line_end":526,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 1.0, 1.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9848264,"byte_end":9848315,"line_start":527,"line_end":527,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(1_i32, cmp_le_i32_m128_s(a, b));","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9848316,"byte_end":9848363,"line_start":528,"line_end":528,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9848364,"byte_end":9848371,"line_start":529,"line_end":529,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9848372,"byte_end":9848383,"line_start":530,"line_end":530,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9848384,"byte_end":9848401,"line_start":531,"line_end":531,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":520},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9848879,"byte_end":9848896,"line_start":549,"line_end":549,"column_start":8,"column_end":25},"name":"cmp_lt_i32_m128_s","qualname":"::x86_x64::sse::cmp_lt_i32_m128_s","value":"fn cmp_lt_i32_m128_s(m128, m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane less than.","sig":null,"attributes":[{"value":"/ Low lane less than.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9848549,"byte_end":9848572,"line_start":537,"line_end":537,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9848573,"byte_end":9848576,"line_start":538,"line_end":538,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9848577,"byte_end":9848594,"line_start":539,"line_end":539,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9848595,"byte_end":9848602,"line_start":540,"line_end":540,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9848603,"byte_end":9848626,"line_start":541,"line_end":541,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([0.5, 2.0, 3.0, 4.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9848627,"byte_end":9848678,"line_start":542,"line_end":542,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 1.0, 1.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9848679,"byte_end":9848730,"line_start":543,"line_end":543,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(1_i32, cmp_lt_i32_m128_s(a, b));","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9848731,"byte_end":9848778,"line_start":544,"line_end":544,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9848779,"byte_end":9848786,"line_start":545,"line_end":545,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9848787,"byte_end":9848798,"line_start":546,"line_end":546,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9848799,"byte_end":9848816,"line_start":547,"line_end":547,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":521},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9849298,"byte_end":9849316,"line_start":565,"line_end":565,"column_start":8,"column_end":26},"name":"cmp_neq_i32_m128_s","qualname":"::x86_x64::sse::cmp_neq_i32_m128_s","value":"fn cmp_neq_i32_m128_s(m128, m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane not equal to.","sig":null,"attributes":[{"value":"/ Low lane not equal to.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9848964,"byte_end":9848990,"line_start":553,"line_end":553,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9848991,"byte_end":9848994,"line_start":554,"line_end":554,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9848995,"byte_end":9849012,"line_start":555,"line_end":555,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9849013,"byte_end":9849020,"line_start":556,"line_end":556,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9849021,"byte_end":9849044,"line_start":557,"line_end":557,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9849045,"byte_end":9849096,"line_start":558,"line_end":558,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 1.0, 1.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9849097,"byte_end":9849148,"line_start":559,"line_end":559,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(0_i32, cmp_neq_i32_m128_s(a, b));","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9849149,"byte_end":9849197,"line_start":560,"line_end":560,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9849198,"byte_end":9849205,"line_start":561,"line_end":561,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9849206,"byte_end":9849217,"line_start":562,"line_end":562,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9849218,"byte_end":9849235,"line_start":563,"line_end":563,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":522},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9849817,"byte_end":9849843,"line_start":581,"line_end":581,"column_start":8,"column_end":34},"name":"convert_i32_replace_m128_s","qualname":"::x86_x64::sse::convert_i32_replace_m128_s","value":"fn convert_i32_replace_m128_s(m128, i32) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Convert `i32` to `f32` and replace the low lane of the input.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = convert_i32_replace_m128_s(a, 5_i32).to_array();\n assert_eq!(b, [5.0, 2.0, 3.0, 4.0]);\n ```\n * **Intrinsic:** [`_mm_cvtsi32_ss`]\n * **Assembly:** `cvtsi2ss xmm, r32`\n","sig":null,"attributes":[{"value":"/ Convert `i32` to `f32` and replace the low lane of the input.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9849385,"byte_end":9849450,"line_start":569,"line_end":569,"column_start":1,"column_end":66}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9849451,"byte_end":9849458,"line_start":570,"line_end":570,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9849459,"byte_end":9849482,"line_start":571,"line_end":571,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9849483,"byte_end":9849534,"line_start":572,"line_end":572,"column_start":1,"column_end":52}},{"value":"/ let b = convert_i32_replace_m128_s(a, 5_i32).to_array();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9849535,"byte_end":9849595,"line_start":573,"line_end":573,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(b, [5.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9849596,"byte_end":9849636,"line_start":574,"line_end":574,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9849637,"byte_end":9849644,"line_start":575,"line_end":575,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtsi32_ss`]","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9849645,"byte_end":9849684,"line_start":576,"line_end":576,"column_start":1,"column_end":40}},{"value":"/ * **Assembly:** `cvtsi2ss xmm, r32`","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9849685,"byte_end":9849724,"line_start":577,"line_end":577,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9849725,"byte_end":9849736,"line_start":578,"line_end":578,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9849737,"byte_end":9849754,"line_start":579,"line_end":579,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":523},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9850754,"byte_end":9850773,"line_start":611,"line_end":611,"column_start":8,"column_end":27},"name":"get_f32_from_m128_s","qualname":"::x86_x64::sse::get_f32_from_m128_s","value":"fn get_f32_from_m128_s(m128) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Gets the low lane as an individual `f32` value.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n assert_eq!(1_f32, get_f32_from_m128_s(a));\n ```\n","sig":null,"attributes":[{"value":"/ Gets the low lane as an individual `f32` value.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9850471,"byte_end":9850522,"line_start":602,"line_end":602,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9850523,"byte_end":9850530,"line_start":603,"line_end":603,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9850531,"byte_end":9850554,"line_start":604,"line_end":604,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9850555,"byte_end":9850606,"line_start":605,"line_end":605,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(1_f32, get_f32_from_m128_s(a));","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9850607,"byte_end":9850653,"line_start":606,"line_end":606,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9850654,"byte_end":9850661,"line_start":607,"line_end":607,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9850662,"byte_end":9850673,"line_start":608,"line_end":608,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9850674,"byte_end":9850691,"line_start":609,"line_end":609,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":524},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9851130,"byte_end":9851149,"line_start":624,"line_end":624,"column_start":8,"column_end":27},"name":"get_i32_from_m128_s","qualname":"::x86_x64::sse::get_i32_from_m128_s","value":"fn get_i32_from_m128_s(m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Converts the low lane to `i32` and extracts as an individual value.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n assert_eq!(1_i32, get_i32_from_m128_s(a));\n ```\n","sig":null,"attributes":[{"value":"/ Converts the low lane to `i32` and extracts as an individual value.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9850827,"byte_end":9850898,"line_start":615,"line_end":615,"column_start":1,"column_end":72}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9850899,"byte_end":9850906,"line_start":616,"line_end":616,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9850907,"byte_end":9850930,"line_start":617,"line_end":617,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9850931,"byte_end":9850982,"line_start":618,"line_end":618,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(1_i32, get_i32_from_m128_s(a));","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9850983,"byte_end":9851029,"line_start":619,"line_end":619,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9851030,"byte_end":9851037,"line_start":620,"line_end":620,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9851038,"byte_end":9851049,"line_start":621,"line_end":621,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9851050,"byte_end":9851067,"line_start":622,"line_end":622,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":525},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9851949,"byte_end":9851957,"line_start":653,"line_end":653,"column_start":8,"column_end":16},"name":"div_m128","qualname":"::x86_x64::sse::div_m128","value":"fn div_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a / b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);\n let b = m128::from_array([2.0, 6.0, 13.0, 2.0]);\n let c = div_m128(a, b).to_array();\n assert_eq!(c, [5.0, 2.0, 1.0, 7.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a / b`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9851606,"byte_end":9851627,"line_start":642,"line_end":642,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9851628,"byte_end":9851635,"line_start":643,"line_end":643,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9851636,"byte_end":9851659,"line_start":644,"line_end":644,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9851660,"byte_end":9851715,"line_start":645,"line_end":645,"column_start":1,"column_end":56}},{"value":"/ let b = m128::from_array([2.0, 6.0, 13.0, 2.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9851716,"byte_end":9851768,"line_start":646,"line_end":646,"column_start":1,"column_end":53}},{"value":"/ let c = div_m128(a, b).to_array();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9851769,"byte_end":9851807,"line_start":647,"line_end":647,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(c, [5.0, 2.0, 1.0, 7.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9851808,"byte_end":9851848,"line_start":648,"line_end":648,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9851849,"byte_end":9851856,"line_start":649,"line_end":649,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9851857,"byte_end":9851868,"line_start":650,"line_end":650,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9851869,"byte_end":9851886,"line_start":651,"line_end":651,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":526},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9852400,"byte_end":9852410,"line_start":668,"line_end":668,"column_start":8,"column_end":18},"name":"div_m128_s","qualname":"::x86_x64::sse::div_m128_s","value":"fn div_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a / b`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);\n let b = m128::from_array([2.0, 6.0, 13.0, 2.0]);\n let c = div_m128_s(a, b).to_array();\n assert_eq!(c, [5.0, 12.0, 13.0, 14.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `a / b`, other lanes unchanged.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9852029,"byte_end":9852073,"line_start":657,"line_end":657,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9852074,"byte_end":9852081,"line_start":658,"line_end":658,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9852082,"byte_end":9852105,"line_start":659,"line_end":659,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9852106,"byte_end":9852161,"line_start":660,"line_end":660,"column_start":1,"column_end":56}},{"value":"/ let b = m128::from_array([2.0, 6.0, 13.0, 2.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9852162,"byte_end":9852214,"line_start":661,"line_end":661,"column_start":1,"column_end":53}},{"value":"/ let c = div_m128_s(a, b).to_array();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9852215,"byte_end":9852255,"line_start":662,"line_end":662,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(c, [5.0, 12.0, 13.0, 14.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9852256,"byte_end":9852299,"line_start":663,"line_end":663,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9852300,"byte_end":9852307,"line_start":664,"line_end":664,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9852308,"byte_end":9852319,"line_start":665,"line_end":665,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9852320,"byte_end":9852337,"line_start":666,"line_end":666,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":527},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9852780,"byte_end":9852789,"line_start":682,"line_end":682,"column_start":8,"column_end":17},"name":"load_m128","qualname":"::x86_x64::sse::load_m128","value":"fn load_m128(&m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register.\n ```\n # use safe_arch::*;\n let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);\n let b = load_m128(&a);\n assert_eq!(a.to_bits(), b.to_bits());\n ```\n","sig":null,"attributes":[{"value":"/ Loads the reference into a register.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9852482,"byte_end":9852522,"line_start":672,"line_end":672,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9852523,"byte_end":9852530,"line_start":673,"line_end":673,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9852531,"byte_end":9852554,"line_start":674,"line_end":674,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9852555,"byte_end":9852610,"line_start":675,"line_end":675,"column_start":1,"column_end":56}},{"value":"/ let b = load_m128(&a);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9852611,"byte_end":9852637,"line_start":676,"line_end":676,"column_start":1,"column_end":27}},{"value":"/ assert_eq!(a.to_bits(), b.to_bits());","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9852638,"byte_end":9852679,"line_start":677,"line_end":677,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9852680,"byte_end":9852687,"line_start":678,"line_end":678,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9852688,"byte_end":9852699,"line_start":679,"line_end":679,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9852700,"byte_end":9852717,"line_start":680,"line_end":680,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":528},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9853246,"byte_end":9853265,"line_start":697,"line_end":697,"column_start":8,"column_end":27},"name":"load_f32_splat_m128","qualname":"::x86_x64::sse::load_f32_splat_m128","value":"fn load_f32_splat_m128(&f32) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Loads the `f32` reference into all lanes of a register.\n ```\n # use safe_arch::*;\n let a = 1.0;\n let b = load_f32_splat_m128(&a);\n assert_eq!(m128::from_array([1.0, 1.0, 1.0, 1.0]).to_bits(), b.to_bits());\n ```\n","sig":null,"attributes":[{"value":"/ Loads the `f32` reference into all lanes of a register.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9852876,"byte_end":9852935,"line_start":686,"line_end":686,"column_start":1,"column_end":60}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9852936,"byte_end":9852943,"line_start":687,"line_end":687,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9852944,"byte_end":9852967,"line_start":688,"line_end":688,"column_start":1,"column_end":24}},{"value":"/ let a = 1.0;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9852968,"byte_end":9852984,"line_start":689,"line_end":689,"column_start":1,"column_end":17}},{"value":"/ let b = load_f32_splat_m128(&a);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9852985,"byte_end":9853021,"line_start":690,"line_end":690,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(m128::from_array([1.0, 1.0, 1.0, 1.0]).to_bits(), b.to_bits());","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9853022,"byte_end":9853100,"line_start":691,"line_end":691,"column_start":1,"column_end":79}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9853101,"byte_end":9853108,"line_start":692,"line_end":692,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9853109,"byte_end":9853120,"line_start":693,"line_end":693,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9853121,"byte_end":9853138,"line_start":694,"line_end":694,"column_start":1,"column_end":18}},{"value":"allow(clippy :: trivially_copy_pass_by_ref)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9853139,"byte_end":9853183,"line_start":695,"line_end":695,"column_start":1,"column_end":45}}]},{"kind":"Function","id":{"krate":0,"index":529},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9853754,"byte_end":9853769,"line_start":713,"line_end":713,"column_start":8,"column_end":23},"name":"load_f32_m128_s","qualname":"::x86_x64::sse::load_f32_m128_s","value":"fn load_f32_m128_s(&f32) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Loads the `f32` reference into the low lane of the register.\n ```\n # use safe_arch::*;\n let a = 1.0;\n let b = load_f32_m128_s(&a);\n assert_eq!(m128::from_array([1.0, 0.0, 0.0, 0.0]).to_bits(), b.to_bits());\n ```\n","sig":null,"attributes":[{"value":"/ Loads the `f32` reference into the low lane of the register.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9853383,"byte_end":9853447,"line_start":702,"line_end":702,"column_start":1,"column_end":65}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9853448,"byte_end":9853455,"line_start":703,"line_end":703,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9853456,"byte_end":9853479,"line_start":704,"line_end":704,"column_start":1,"column_end":24}},{"value":"/ let a = 1.0;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9853480,"byte_end":9853496,"line_start":705,"line_end":705,"column_start":1,"column_end":17}},{"value":"/ let b = load_f32_m128_s(&a);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9853497,"byte_end":9853529,"line_start":706,"line_end":706,"column_start":1,"column_end":33}},{"value":"/ assert_eq!(m128::from_array([1.0, 0.0, 0.0, 0.0]).to_bits(), b.to_bits());","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9853530,"byte_end":9853608,"line_start":707,"line_end":707,"column_start":1,"column_end":79}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9853609,"byte_end":9853616,"line_start":708,"line_end":708,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9853617,"byte_end":9853628,"line_start":709,"line_end":709,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9853629,"byte_end":9853646,"line_start":710,"line_end":710,"column_start":1,"column_end":18}},{"value":"allow(clippy :: trivially_copy_pass_by_ref)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9853647,"byte_end":9853691,"line_start":711,"line_end":711,"column_start":1,"column_end":45}}]},{"kind":"Function","id":{"krate":0,"index":530},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9854193,"byte_end":9854210,"line_start":727,"line_end":727,"column_start":8,"column_end":25},"name":"load_reverse_m128","qualname":"::x86_x64::sse::load_reverse_m128","value":"fn load_reverse_m128(&m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register with reversed order.\n ```\n # use safe_arch::*;\n let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);\n let b = load_reverse_m128(&a);\n assert_eq!(m128::from_array([14.0, 13.0, 12.0, 10.0]).to_bits(), b.to_bits());\n ```\n","sig":null,"attributes":[{"value":"/ Loads the reference into a register with reversed order.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9853826,"byte_end":9853886,"line_start":717,"line_end":717,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9853887,"byte_end":9853894,"line_start":718,"line_end":718,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9853895,"byte_end":9853918,"line_start":719,"line_end":719,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9853919,"byte_end":9853974,"line_start":720,"line_end":720,"column_start":1,"column_end":56}},{"value":"/ let b = load_reverse_m128(&a);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9853975,"byte_end":9854009,"line_start":721,"line_end":721,"column_start":1,"column_end":35}},{"value":"/ assert_eq!(m128::from_array([14.0, 13.0, 12.0, 10.0]).to_bits(), b.to_bits());","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9854010,"byte_end":9854092,"line_start":722,"line_end":722,"column_start":1,"column_end":83}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9854093,"byte_end":9854100,"line_start":723,"line_end":723,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9854101,"byte_end":9854112,"line_start":724,"line_end":724,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9854113,"byte_end":9854130,"line_start":725,"line_end":725,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":531},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9854783,"byte_end":9854802,"line_start":745,"line_end":745,"column_start":8,"column_end":27},"name":"load_unaligned_m128","qualname":"::x86_x64::sse::load_unaligned_m128","value":"fn load_unaligned_m128(&[f32; ]) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register.","sig":null,"attributes":[{"value":"/ Loads the reference into a register.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9854298,"byte_end":9854338,"line_start":731,"line_end":731,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9854339,"byte_end":9854342,"line_start":732,"line_end":732,"column_start":1,"column_end":4}},{"value":"/ This generally has no speed penalty if the reference happens to be 16-byte","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9854343,"byte_end":9854421,"line_start":733,"line_end":733,"column_start":1,"column_end":79}},{"value":"/ aligned, but there is a slight speed penalty if the reference is only 4-byte","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9854422,"byte_end":9854502,"line_start":734,"line_end":734,"column_start":1,"column_end":81}},{"value":"/ aligned.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9854503,"byte_end":9854515,"line_start":735,"line_end":735,"column_start":1,"column_end":13}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9854516,"byte_end":9854523,"line_start":736,"line_end":736,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9854524,"byte_end":9854547,"line_start":737,"line_end":737,"column_start":1,"column_end":24}},{"value":"/ let a = [10.0, 12.0, 13.0, 14.0];","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9854548,"byte_end":9854585,"line_start":738,"line_end":738,"column_start":1,"column_end":38}},{"value":"/ let b = load_unaligned_m128(&a);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9854586,"byte_end":9854622,"line_start":739,"line_end":739,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(m128::from_array(a).to_bits(), b.to_bits());","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9854623,"byte_end":9854682,"line_start":740,"line_end":740,"column_start":1,"column_end":60}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9854683,"byte_end":9854690,"line_start":741,"line_end":741,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9854691,"byte_end":9854702,"line_start":742,"line_end":742,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9854703,"byte_end":9854720,"line_start":743,"line_end":743,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":534},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9855242,"byte_end":9855250,"line_start":760,"line_end":760,"column_start":8,"column_end":16},"name":"max_m128","qualname":"::x86_x64::sse::max_m128","value":"fn max_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `max(a, b)`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);\n let c = max_m128(a, b).to_array();\n assert_eq!(c, [5.0, 12.0, 7.0, 8.5]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `max(a, b)`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9854898,"byte_end":9854923,"line_start":749,"line_end":749,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9854924,"byte_end":9854931,"line_start":750,"line_end":750,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9854932,"byte_end":9854955,"line_start":751,"line_end":751,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9854956,"byte_end":9855008,"line_start":752,"line_end":752,"column_start":1,"column_end":53}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9855009,"byte_end":9855060,"line_start":753,"line_end":753,"column_start":1,"column_end":52}},{"value":"/ let c = max_m128(a, b).to_array();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9855061,"byte_end":9855099,"line_start":754,"line_end":754,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(c, [5.0, 12.0, 7.0, 8.5]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9855100,"byte_end":9855141,"line_start":755,"line_end":755,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9855142,"byte_end":9855149,"line_start":756,"line_end":756,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9855150,"byte_end":9855161,"line_start":757,"line_end":757,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9855162,"byte_end":9855179,"line_start":758,"line_end":758,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":535},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9855691,"byte_end":9855701,"line_start":775,"line_end":775,"column_start":8,"column_end":18},"name":"max_m128_s","qualname":"::x86_x64::sse::max_m128_s","value":"fn max_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `max(a, b)`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);\n let c = max_m128_s(a, b).to_array();\n assert_eq!(c, [5.0, 12.0, 3.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `max(a, b)`, other lanes unchanged.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9855322,"byte_end":9855370,"line_start":764,"line_end":764,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9855371,"byte_end":9855378,"line_start":765,"line_end":765,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9855379,"byte_end":9855402,"line_start":766,"line_end":766,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9855403,"byte_end":9855455,"line_start":767,"line_end":767,"column_start":1,"column_end":53}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9855456,"byte_end":9855507,"line_start":768,"line_end":768,"column_start":1,"column_end":52}},{"value":"/ let c = max_m128_s(a, b).to_array();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9855508,"byte_end":9855548,"line_start":769,"line_end":769,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(c, [5.0, 12.0, 3.0, 4.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9855549,"byte_end":9855590,"line_start":770,"line_end":770,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9855591,"byte_end":9855598,"line_start":771,"line_end":771,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9855599,"byte_end":9855610,"line_start":772,"line_end":772,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9855611,"byte_end":9855628,"line_start":773,"line_end":773,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":536},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9856116,"byte_end":9856124,"line_start":790,"line_end":790,"column_start":8,"column_end":16},"name":"min_m128","qualname":"::x86_x64::sse::min_m128","value":"fn min_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `min(a, b)`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);\n let c = min_m128(a, b).to_array();\n assert_eq!(c, [1.0, 6.0, 3.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `min(a, b)`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9855773,"byte_end":9855798,"line_start":779,"line_end":779,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9855799,"byte_end":9855806,"line_start":780,"line_end":780,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9855807,"byte_end":9855830,"line_start":781,"line_end":781,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9855831,"byte_end":9855883,"line_start":782,"line_end":782,"column_start":1,"column_end":53}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9855884,"byte_end":9855935,"line_start":783,"line_end":783,"column_start":1,"column_end":52}},{"value":"/ let c = min_m128(a, b).to_array();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9855936,"byte_end":9855974,"line_start":784,"line_end":784,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(c, [1.0, 6.0, 3.0, 4.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9855975,"byte_end":9856015,"line_start":785,"line_end":785,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9856016,"byte_end":9856023,"line_start":786,"line_end":786,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9856024,"byte_end":9856035,"line_start":787,"line_end":787,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9856036,"byte_end":9856053,"line_start":788,"line_end":788,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":537},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9856565,"byte_end":9856575,"line_start":805,"line_end":805,"column_start":8,"column_end":18},"name":"min_m128_s","qualname":"::x86_x64::sse::min_m128_s","value":"fn min_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `min(a, b)`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);\n let b = m128::from_array([0.0, 6.0, 7.0, 8.5]);\n let c = min_m128_s(a, b).to_array();\n assert_eq!(c, [0.0, 12.0, 3.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `min(a, b)`, other lanes unchanged.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9856196,"byte_end":9856244,"line_start":794,"line_end":794,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9856245,"byte_end":9856252,"line_start":795,"line_end":795,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9856253,"byte_end":9856276,"line_start":796,"line_end":796,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9856277,"byte_end":9856329,"line_start":797,"line_end":797,"column_start":1,"column_end":53}},{"value":"/ let b = m128::from_array([0.0, 6.0, 7.0, 8.5]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9856330,"byte_end":9856381,"line_start":798,"line_end":798,"column_start":1,"column_end":52}},{"value":"/ let c = min_m128_s(a, b).to_array();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9856382,"byte_end":9856422,"line_start":799,"line_end":799,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(c, [0.0, 12.0, 3.0, 4.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9856423,"byte_end":9856464,"line_start":800,"line_end":800,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9856465,"byte_end":9856472,"line_start":801,"line_end":801,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9856473,"byte_end":9856484,"line_start":802,"line_end":802,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9856485,"byte_end":9856502,"line_start":803,"line_end":803,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":538},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9857028,"byte_end":9857039,"line_start":820,"line_end":820,"column_start":8,"column_end":19},"name":"move_m128_s","qualname":"::x86_x64::sse::move_m128_s","value":"fn move_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Move the low lane of `b` to `a`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);\n let b = m128::from_array([8.0, 6.0, 7.0, 8.5]);\n let c = move_m128_s(a, b).to_array();\n assert_eq!(c, [8.0, 12.0, 3.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Move the low lane of `b` to `a`, other lanes unchanged.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9856647,"byte_end":9856706,"line_start":809,"line_end":809,"column_start":1,"column_end":60}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9856707,"byte_end":9856714,"line_start":810,"line_end":810,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9856715,"byte_end":9856738,"line_start":811,"line_end":811,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9856739,"byte_end":9856791,"line_start":812,"line_end":812,"column_start":1,"column_end":53}},{"value":"/ let b = m128::from_array([8.0, 6.0, 7.0, 8.5]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9856792,"byte_end":9856843,"line_start":813,"line_end":813,"column_start":1,"column_end":52}},{"value":"/ let c = move_m128_s(a, b).to_array();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9856844,"byte_end":9856885,"line_start":814,"line_end":814,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [8.0, 12.0, 3.0, 4.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9856886,"byte_end":9856927,"line_start":815,"line_end":815,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9856928,"byte_end":9856935,"line_start":816,"line_end":816,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9856936,"byte_end":9856947,"line_start":817,"line_end":817,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9856948,"byte_end":9856965,"line_start":818,"line_end":818,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":539},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9857518,"byte_end":9857536,"line_start":835,"line_end":835,"column_start":8,"column_end":26},"name":"move_high_low_m128","qualname":"::x86_x64::sse::move_high_low_m128","value":"fn move_high_low_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Move the high lanes of `b` to the low lanes of `a`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);\n let b = m128::from_array([8.0, 6.0, 7.0, 8.5]);\n let c = move_high_low_m128(a, b).to_array();\n assert_eq!(c, [7.0, 8.5, 3.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Move the high lanes of `b` to the low lanes of `a`, other lanes unchanged.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9857112,"byte_end":9857190,"line_start":824,"line_end":824,"column_start":1,"column_end":79}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9857191,"byte_end":9857198,"line_start":825,"line_end":825,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9857199,"byte_end":9857222,"line_start":826,"line_end":826,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9857223,"byte_end":9857275,"line_start":827,"line_end":827,"column_start":1,"column_end":53}},{"value":"/ let b = m128::from_array([8.0, 6.0, 7.0, 8.5]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9857276,"byte_end":9857327,"line_start":828,"line_end":828,"column_start":1,"column_end":52}},{"value":"/ let c = move_high_low_m128(a, b).to_array();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9857328,"byte_end":9857376,"line_start":829,"line_end":829,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [7.0, 8.5, 3.0, 4.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9857377,"byte_end":9857417,"line_start":830,"line_end":830,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9857418,"byte_end":9857425,"line_start":831,"line_end":831,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9857426,"byte_end":9857437,"line_start":832,"line_end":832,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9857438,"byte_end":9857455,"line_start":833,"line_end":833,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":540},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9858018,"byte_end":9858036,"line_start":850,"line_end":850,"column_start":8,"column_end":26},"name":"move_low_high_m128","qualname":"::x86_x64::sse::move_low_high_m128","value":"fn move_low_high_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Move the low lanes of `b` to the high lanes of `a`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);\n let b = m128::from_array([8.0, 6.0, 7.0, 8.5]);\n let c = move_low_high_m128(a, b).to_array();\n assert_eq!(c, [1.0, 12.0, 8.0, 6.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Move the low lanes of `b` to the high lanes of `a`, other lanes unchanged.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9857611,"byte_end":9857689,"line_start":839,"line_end":839,"column_start":1,"column_end":79}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9857690,"byte_end":9857697,"line_start":840,"line_end":840,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9857698,"byte_end":9857721,"line_start":841,"line_end":841,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9857722,"byte_end":9857774,"line_start":842,"line_end":842,"column_start":1,"column_end":53}},{"value":"/ let b = m128::from_array([8.0, 6.0, 7.0, 8.5]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9857775,"byte_end":9857826,"line_start":843,"line_end":843,"column_start":1,"column_end":52}},{"value":"/ let c = move_low_high_m128(a, b).to_array();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9857827,"byte_end":9857875,"line_start":844,"line_end":844,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [1.0, 12.0, 8.0, 6.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9857876,"byte_end":9857917,"line_start":845,"line_end":845,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9857918,"byte_end":9857925,"line_start":846,"line_end":846,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9857926,"byte_end":9857937,"line_start":847,"line_end":847,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9857938,"byte_end":9857955,"line_start":848,"line_end":848,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":541},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9858464,"byte_end":9858478,"line_start":866,"line_end":866,"column_start":8,"column_end":22},"name":"move_mask_m128","qualname":"::x86_x64::sse::move_mask_m128","value":"fn move_mask_m128(m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Gathers the sign bit of each lane.","sig":null,"attributes":[{"value":"/ Gathers the sign bit of each lane.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9858111,"byte_end":9858149,"line_start":854,"line_end":854,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9858150,"byte_end":9858153,"line_start":855,"line_end":855,"column_start":1,"column_end":4}},{"value":"/ The output has lane 0 as bit 0, lane 1 as bit 1, and so on.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9858154,"byte_end":9858217,"line_start":856,"line_end":856,"column_start":1,"column_end":64}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9858218,"byte_end":9858225,"line_start":857,"line_end":857,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9858226,"byte_end":9858249,"line_start":858,"line_end":858,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([-1.0, 12.0, -3.0, -4.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9858250,"byte_end":9858305,"line_start":859,"line_end":859,"column_start":1,"column_end":56}},{"value":"/ let i = move_mask_m128(a);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9858306,"byte_end":9858336,"line_start":860,"line_end":860,"column_start":1,"column_end":31}},{"value":"/ assert_eq!(i, 0b1101);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9858337,"byte_end":9858363,"line_start":861,"line_end":861,"column_start":1,"column_end":27}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9858364,"byte_end":9858371,"line_start":862,"line_end":862,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9858372,"byte_end":9858383,"line_start":863,"line_end":863,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9858384,"byte_end":9858401,"line_start":864,"line_end":864,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":542},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9858875,"byte_end":9858883,"line_start":881,"line_end":881,"column_start":8,"column_end":16},"name":"mul_m128","qualname":"::x86_x64::sse::mul_m128","value":"fn mul_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a * b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);\n let c = mul_m128(a, b).to_array();\n assert_eq!(c, [5.0, 12.0, 21.0, 34.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a * b`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9858534,"byte_end":9858555,"line_start":870,"line_end":870,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9858556,"byte_end":9858563,"line_start":871,"line_end":871,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9858564,"byte_end":9858587,"line_start":872,"line_end":872,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9858588,"byte_end":9858639,"line_start":873,"line_end":873,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9858640,"byte_end":9858691,"line_start":874,"line_end":874,"column_start":1,"column_end":52}},{"value":"/ let c = mul_m128(a, b).to_array();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9858692,"byte_end":9858730,"line_start":875,"line_end":875,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(c, [5.0, 12.0, 21.0, 34.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9858731,"byte_end":9858774,"line_start":876,"line_end":876,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9858775,"byte_end":9858782,"line_start":877,"line_end":877,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9858783,"byte_end":9858794,"line_start":878,"line_end":878,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9858795,"byte_end":9858812,"line_start":879,"line_end":879,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":543},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9859318,"byte_end":9859328,"line_start":896,"line_end":896,"column_start":8,"column_end":18},"name":"mul_m128_s","qualname":"::x86_x64::sse::mul_m128_s","value":"fn mul_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a * b`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);\n let c = mul_m128_s(a, b).to_array();\n assert_eq!(c, [5.0, 2.0, 3.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `a * b`, other lanes unchanged.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9858955,"byte_end":9858999,"line_start":885,"line_end":885,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9859000,"byte_end":9859007,"line_start":886,"line_end":886,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9859008,"byte_end":9859031,"line_start":887,"line_end":887,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9859032,"byte_end":9859083,"line_start":888,"line_end":888,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9859084,"byte_end":9859135,"line_start":889,"line_end":889,"column_start":1,"column_end":52}},{"value":"/ let c = mul_m128_s(a, b).to_array();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9859136,"byte_end":9859176,"line_start":890,"line_end":890,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(c, [5.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9859177,"byte_end":9859217,"line_start":891,"line_end":891,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9859218,"byte_end":9859225,"line_start":892,"line_end":892,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9859226,"byte_end":9859237,"line_start":893,"line_end":893,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9859238,"byte_end":9859255,"line_start":894,"line_end":894,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":544},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9859739,"byte_end":9859749,"line_start":911,"line_end":911,"column_start":8,"column_end":18},"name":"bitor_m128","qualname":"::x86_x64::sse::bitor_m128","value":"fn bitor_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a | b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);\n let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);\n let c = bitor_m128(a, b).to_array();\n assert_eq!(c, [1.0, 1.0, 1.0, 0.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a | b`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9859400,"byte_end":9859420,"line_start":900,"line_end":900,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9859421,"byte_end":9859428,"line_start":901,"line_end":901,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9859429,"byte_end":9859452,"line_start":902,"line_end":902,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9859453,"byte_end":9859504,"line_start":903,"line_end":903,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9859505,"byte_end":9859556,"line_start":904,"line_end":904,"column_start":1,"column_end":52}},{"value":"/ let c = bitor_m128(a, b).to_array();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9859557,"byte_end":9859597,"line_start":905,"line_end":905,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(c, [1.0, 1.0, 1.0, 0.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9859598,"byte_end":9859638,"line_start":906,"line_end":906,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9859639,"byte_end":9859646,"line_start":907,"line_end":907,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9859647,"byte_end":9859658,"line_start":908,"line_end":908,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9859659,"byte_end":9859676,"line_start":909,"line_end":909,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":545},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9860206,"byte_end":9860221,"line_start":928,"line_end":928,"column_start":8,"column_end":23},"name":"reciprocal_m128","qualname":"::x86_x64::sse::reciprocal_m128","value":"fn reciprocal_m128(m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `1.0 / a` approximation.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 4.0, 8.0]);\n let b = reciprocal_m128(a).to_array();\n let expected = [1.0, 0.5, 0.25, 0.125];\n for i in 0..4 {\n   assert!((b[i] - expected[i]).abs() < 0.001);\n }\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `1.0 / a` approximation.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9859820,"byte_end":9859857,"line_start":915,"line_end":915,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9859858,"byte_end":9859865,"line_start":916,"line_end":916,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9859866,"byte_end":9859889,"line_start":917,"line_end":917,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 4.0, 8.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9859890,"byte_end":9859941,"line_start":918,"line_end":918,"column_start":1,"column_end":52}},{"value":"/ let b = reciprocal_m128(a).to_array();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9859942,"byte_end":9859984,"line_start":919,"line_end":919,"column_start":1,"column_end":43}},{"value":"/ let expected = [1.0, 0.5, 0.25, 0.125];","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9859985,"byte_end":9860028,"line_start":920,"line_end":920,"column_start":1,"column_end":44}},{"value":"/ for i in 0..4 {","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9860029,"byte_end":9860048,"line_start":921,"line_end":921,"column_start":1,"column_end":20}},{"value":"/   assert!((b[i] - expected[i]).abs() < 0.001);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9860049,"byte_end":9860099,"line_start":922,"line_end":922,"column_start":1,"column_end":51}},{"value":"/ }","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9860100,"byte_end":9860105,"line_start":923,"line_end":923,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9860106,"byte_end":9860113,"line_start":924,"line_end":924,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9860114,"byte_end":9860125,"line_start":925,"line_end":925,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9860126,"byte_end":9860143,"line_start":926,"line_end":926,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":546},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9860687,"byte_end":9860704,"line_start":945,"line_end":945,"column_start":8,"column_end":25},"name":"reciprocal_m128_s","qualname":"::x86_x64::sse::reciprocal_m128_s","value":"fn reciprocal_m128_s(m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `1.0 / a` approximation, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 4.0, 8.0]);\n let b = reciprocal_m128_s(a).to_array();\n let expected = [1.0, 2.0, 4.0, 8.0];\n for i in 0..4 {\n   assert!((b[i] - expected[i]).abs() < 0.001);\n }\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `1.0 / a` approximation, other lanes unchanged.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9860279,"byte_end":9860339,"line_start":932,"line_end":932,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9860340,"byte_end":9860347,"line_start":933,"line_end":933,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9860348,"byte_end":9860371,"line_start":934,"line_end":934,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 4.0, 8.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9860372,"byte_end":9860423,"line_start":935,"line_end":935,"column_start":1,"column_end":52}},{"value":"/ let b = reciprocal_m128_s(a).to_array();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9860424,"byte_end":9860468,"line_start":936,"line_end":936,"column_start":1,"column_end":45}},{"value":"/ let expected = [1.0, 2.0, 4.0, 8.0];","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9860469,"byte_end":9860509,"line_start":937,"line_end":937,"column_start":1,"column_end":41}},{"value":"/ for i in 0..4 {","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9860510,"byte_end":9860529,"line_start":938,"line_end":938,"column_start":1,"column_end":20}},{"value":"/   assert!((b[i] - expected[i]).abs() < 0.001);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9860530,"byte_end":9860580,"line_start":939,"line_end":939,"column_start":1,"column_end":51}},{"value":"/ }","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9860581,"byte_end":9860586,"line_start":940,"line_end":940,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9860587,"byte_end":9860594,"line_start":941,"line_end":941,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9860595,"byte_end":9860606,"line_start":942,"line_end":942,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9860607,"byte_end":9860624,"line_start":943,"line_end":943,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":547},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9861163,"byte_end":9861183,"line_start":962,"line_end":962,"column_start":8,"column_end":28},"name":"reciprocal_sqrt_m128","qualname":"::x86_x64::sse::reciprocal_sqrt_m128","value":"fn reciprocal_sqrt_m128(m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `1.0 / sqrt(a)` approximation.\n ```\n # use safe_arch::*;\n let a = m128::from_array([16.0, 9.0, 4.0, 25.0]);\n let b = reciprocal_sqrt_m128(a).to_array();\n let expected = [0.25, 0.33333, 0.5, 0.2];\n for i in 0..4 {\n   assert!((b[i] - expected[i]).abs() < 0.001);\n }\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `1.0 / sqrt(a)` approximation.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9860762,"byte_end":9860805,"line_start":949,"line_end":949,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9860806,"byte_end":9860813,"line_start":950,"line_end":950,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9860814,"byte_end":9860837,"line_start":951,"line_end":951,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([16.0, 9.0, 4.0, 25.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9860838,"byte_end":9860891,"line_start":952,"line_end":952,"column_start":1,"column_end":54}},{"value":"/ let b = reciprocal_sqrt_m128(a).to_array();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9860892,"byte_end":9860939,"line_start":953,"line_end":953,"column_start":1,"column_end":48}},{"value":"/ let expected = [0.25, 0.33333, 0.5, 0.2];","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9860940,"byte_end":9860985,"line_start":954,"line_end":954,"column_start":1,"column_end":46}},{"value":"/ for i in 0..4 {","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9860986,"byte_end":9861005,"line_start":955,"line_end":955,"column_start":1,"column_end":20}},{"value":"/   assert!((b[i] - expected[i]).abs() < 0.001);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9861006,"byte_end":9861056,"line_start":956,"line_end":956,"column_start":1,"column_end":51}},{"value":"/ }","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9861057,"byte_end":9861062,"line_start":957,"line_end":957,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9861063,"byte_end":9861070,"line_start":958,"line_end":958,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9861071,"byte_end":9861082,"line_start":959,"line_end":959,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9861083,"byte_end":9861100,"line_start":960,"line_end":960,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":548},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9861666,"byte_end":9861688,"line_start":979,"line_end":979,"column_start":8,"column_end":30},"name":"reciprocal_sqrt_m128_s","qualname":"::x86_x64::sse::reciprocal_sqrt_m128_s","value":"fn reciprocal_sqrt_m128_s(m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `1.0 / sqrt(a)` approximation, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([16.0, 8.0, 9.0, 10.0]);\n let b = reciprocal_sqrt_m128_s(a).to_array();\n let expected = [0.25, 8.0, 9.0, 10.0];\n for i in 0..4 {\n   assert!((b[i] - expected[i]).abs() < 0.001);\n }\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `1.0 / sqrt(a)` approximation, other lanes unchanged.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9861243,"byte_end":9861309,"line_start":966,"line_end":966,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9861310,"byte_end":9861317,"line_start":967,"line_end":967,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9861318,"byte_end":9861341,"line_start":968,"line_end":968,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([16.0, 8.0, 9.0, 10.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9861342,"byte_end":9861395,"line_start":969,"line_end":969,"column_start":1,"column_end":54}},{"value":"/ let b = reciprocal_sqrt_m128_s(a).to_array();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9861396,"byte_end":9861445,"line_start":970,"line_end":970,"column_start":1,"column_end":50}},{"value":"/ let expected = [0.25, 8.0, 9.0, 10.0];","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9861446,"byte_end":9861488,"line_start":971,"line_end":971,"column_start":1,"column_end":43}},{"value":"/ for i in 0..4 {","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9861489,"byte_end":9861508,"line_start":972,"line_end":972,"column_start":1,"column_end":20}},{"value":"/   assert!((b[i] - expected[i]).abs() < 0.001);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9861509,"byte_end":9861559,"line_start":973,"line_end":973,"column_start":1,"column_end":51}},{"value":"/ }","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9861560,"byte_end":9861565,"line_start":974,"line_end":974,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9861566,"byte_end":9861573,"line_start":975,"line_end":975,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9861574,"byte_end":9861585,"line_start":976,"line_end":976,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9861586,"byte_end":9861603,"line_start":977,"line_end":977,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":549},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9862080,"byte_end":9862088,"line_start":993,"line_end":993,"column_start":8,"column_end":16},"name":"set_m128","qualname":"::x86_x64::sse::set_m128","value":"fn set_m128(f32, f32, f32, f32) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128`, first arg is the high lane.\n ```\n # use safe_arch::*;\n let a = set_m128(1.0, 2.0, 3.0, 4.0).to_array();\n let b = m128::from_array([4.0, 3.0, 2.0, 1.0]).to_array();\n assert_eq!(a, b);\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128`, first arg is the high lane.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9861748,"byte_end":9861809,"line_start":983,"line_end":983,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9861810,"byte_end":9861817,"line_start":984,"line_end":984,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9861818,"byte_end":9861841,"line_start":985,"line_end":985,"column_start":1,"column_end":24}},{"value":"/ let a = set_m128(1.0, 2.0, 3.0, 4.0).to_array();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9861842,"byte_end":9861894,"line_start":986,"line_end":986,"column_start":1,"column_end":53}},{"value":"/ let b = m128::from_array([4.0, 3.0, 2.0, 1.0]).to_array();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9861895,"byte_end":9861957,"line_start":987,"line_end":987,"column_start":1,"column_end":63}},{"value":"/ assert_eq!(a, b);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9861958,"byte_end":9861979,"line_start":988,"line_end":988,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9861980,"byte_end":9861987,"line_start":989,"line_end":989,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9861988,"byte_end":9861999,"line_start":990,"line_end":990,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9862000,"byte_end":9862017,"line_start":991,"line_end":991,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":550},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9862517,"byte_end":9862527,"line_start":1007,"line_end":1007,"column_start":8,"column_end":18},"name":"set_m128_s","qualname":"::x86_x64::sse::set_m128_s","value":"fn set_m128_s(f32) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128`, first arg is the high lane.\n ```\n # use safe_arch::*;\n let a = set_m128_s(1.0).to_array();\n let b = m128::from_array([1.0, 0.0, 0.0, 0.0]).to_array();\n assert_eq!(a, b);\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128`, first arg is the high lane.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9862198,"byte_end":9862259,"line_start":997,"line_end":997,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9862260,"byte_end":9862267,"line_start":998,"line_end":998,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9862268,"byte_end":9862291,"line_start":999,"line_end":999,"column_start":1,"column_end":24}},{"value":"/ let a = set_m128_s(1.0).to_array();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9862292,"byte_end":9862331,"line_start":1000,"line_end":1000,"column_start":1,"column_end":40}},{"value":"/ let b = m128::from_array([1.0, 0.0, 0.0, 0.0]).to_array();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9862332,"byte_end":9862394,"line_start":1001,"line_end":1001,"column_start":1,"column_end":63}},{"value":"/ assert_eq!(a, b);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9862395,"byte_end":9862416,"line_start":1002,"line_end":1002,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9862417,"byte_end":9862424,"line_start":1003,"line_end":1003,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9862425,"byte_end":9862436,"line_start":1004,"line_end":1004,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9862437,"byte_end":9862454,"line_start":1005,"line_end":1005,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":551},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9862882,"byte_end":9862896,"line_start":1021,"line_end":1021,"column_start":8,"column_end":22},"name":"set_splat_m128","qualname":"::x86_x64::sse::set_splat_m128","value":"fn set_splat_m128(f32) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Splats the value to all lanes.\n ```\n # use safe_arch::*;\n let a = set_splat_m128(1.0).to_array();\n let b = m128::from_array([1.0, 1.0, 1.0, 1.0]).to_array();\n assert_eq!(a, b);\n ```\n","sig":null,"attributes":[{"value":"/ Splats the value to all lanes.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9862586,"byte_end":9862620,"line_start":1011,"line_end":1011,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9862621,"byte_end":9862628,"line_start":1012,"line_end":1012,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9862629,"byte_end":9862652,"line_start":1013,"line_end":1013,"column_start":1,"column_end":24}},{"value":"/ let a = set_splat_m128(1.0).to_array();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9862653,"byte_end":9862696,"line_start":1014,"line_end":1014,"column_start":1,"column_end":44}},{"value":"/ let b = m128::from_array([1.0, 1.0, 1.0, 1.0]).to_array();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9862697,"byte_end":9862759,"line_start":1015,"line_end":1015,"column_start":1,"column_end":63}},{"value":"/ assert_eq!(a, b);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9862760,"byte_end":9862781,"line_start":1016,"line_end":1016,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9862782,"byte_end":9862789,"line_start":1017,"line_end":1017,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9862790,"byte_end":9862801,"line_start":1018,"line_end":1018,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9862802,"byte_end":9862819,"line_start":1019,"line_end":1019,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":552},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9863296,"byte_end":9863313,"line_start":1035,"line_end":1035,"column_start":8,"column_end":25},"name":"set_reversed_m128","qualname":"::x86_x64::sse::set_reversed_m128","value":"fn set_reversed_m128(f32, f32, f32, f32) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128`, first arg is the low lane.\n ```\n # use safe_arch::*;\n let a = set_reversed_m128(1.0, 2.0, 3.0, 4.0).to_array();\n let b = m128::from_array([1.0, 2.0, 3.0, 4.0]).to_array();\n assert_eq!(a, b);\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128`, first arg is the low lane.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9862956,"byte_end":9863016,"line_start":1025,"line_end":1025,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9863017,"byte_end":9863024,"line_start":1026,"line_end":1026,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9863025,"byte_end":9863048,"line_start":1027,"line_end":1027,"column_start":1,"column_end":24}},{"value":"/ let a = set_reversed_m128(1.0, 2.0, 3.0, 4.0).to_array();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9863049,"byte_end":9863110,"line_start":1028,"line_end":1028,"column_start":1,"column_end":62}},{"value":"/ let b = m128::from_array([1.0, 2.0, 3.0, 4.0]).to_array();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9863111,"byte_end":9863173,"line_start":1029,"line_end":1029,"column_start":1,"column_end":63}},{"value":"/ assert_eq!(a, b);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9863174,"byte_end":9863195,"line_start":1030,"line_end":1030,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9863196,"byte_end":9863203,"line_start":1031,"line_end":1031,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9863204,"byte_end":9863215,"line_start":1032,"line_end":1032,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9863216,"byte_end":9863233,"line_start":1033,"line_end":1033,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":553},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9863655,"byte_end":9863666,"line_start":1048,"line_end":1048,"column_start":8,"column_end":19},"name":"zeroed_m128","qualname":"::x86_x64::sse::zeroed_m128","value":"fn zeroed_m128() -> m128","parent":null,"children":[],"decl_id":null,"docs":" All lanes zero.\n ```\n # use safe_arch::*;\n let a = zeroed_m128().to_array();\n assert_eq!(a, [0.0, 0.0, 0.0, 0.0]);\n ```\n","sig":null,"attributes":[{"value":"/ All lanes zero.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9863424,"byte_end":9863443,"line_start":1039,"line_end":1039,"column_start":1,"column_end":20}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9863444,"byte_end":9863451,"line_start":1040,"line_end":1040,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9863452,"byte_end":9863475,"line_start":1041,"line_end":1041,"column_start":1,"column_end":24}},{"value":"/ let a = zeroed_m128().to_array();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9863476,"byte_end":9863513,"line_start":1042,"line_end":1042,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(a, [0.0, 0.0, 0.0, 0.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9863514,"byte_end":9863554,"line_start":1043,"line_end":1043,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9863555,"byte_end":9863562,"line_start":1044,"line_end":1044,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9863563,"byte_end":9863574,"line_start":1045,"line_end":1045,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9863575,"byte_end":9863592,"line_start":1046,"line_end":1046,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":555},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9865808,"byte_end":9865817,"line_start":1105,"line_end":1105,"column_start":8,"column_end":17},"name":"sqrt_m128","qualname":"::x86_x64::sse::sqrt_m128","value":"fn sqrt_m128(m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `sqrt(a)`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([25.0, 16.0, 9.0, 4.0]);\n let b = sqrt_m128(a).to_array();\n assert_eq!(b, [5.0, 4.0, 3.0, 2.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `sqrt(a)`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9865520,"byte_end":9865543,"line_start":1095,"line_end":1095,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9865544,"byte_end":9865551,"line_start":1096,"line_end":1096,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9865552,"byte_end":9865575,"line_start":1097,"line_end":1097,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([25.0, 16.0, 9.0, 4.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9865576,"byte_end":9865629,"line_start":1098,"line_end":1098,"column_start":1,"column_end":54}},{"value":"/ let b = sqrt_m128(a).to_array();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9865630,"byte_end":9865666,"line_start":1099,"line_end":1099,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(b, [5.0, 4.0, 3.0, 2.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9865667,"byte_end":9865707,"line_start":1100,"line_end":1100,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9865708,"byte_end":9865715,"line_start":1101,"line_end":1101,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9865716,"byte_end":9865727,"line_start":1102,"line_end":1102,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9865728,"byte_end":9865745,"line_start":1103,"line_end":1103,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":556},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9866187,"byte_end":9866198,"line_start":1119,"line_end":1119,"column_start":8,"column_end":19},"name":"sqrt_m128_s","qualname":"::x86_x64::sse::sqrt_m128_s","value":"fn sqrt_m128_s(m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `sqrt(a)`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([4.0, 8.0, 7.0, 6.0]);\n let b = sqrt_m128_s(a).to_array();\n assert_eq!(b, [2.0, 8.0, 7.0, 6.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `sqrt(a)`, other lanes unchanged.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9865876,"byte_end":9865922,"line_start":1109,"line_end":1109,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9865923,"byte_end":9865930,"line_start":1110,"line_end":1110,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9865931,"byte_end":9865954,"line_start":1111,"line_end":1111,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([4.0, 8.0, 7.0, 6.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9865955,"byte_end":9866006,"line_start":1112,"line_end":1112,"column_start":1,"column_end":52}},{"value":"/ let b = sqrt_m128_s(a).to_array();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9866007,"byte_end":9866045,"line_start":1113,"line_end":1113,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(b, [2.0, 8.0, 7.0, 6.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9866046,"byte_end":9866086,"line_start":1114,"line_end":1114,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9866087,"byte_end":9866094,"line_start":1115,"line_end":1115,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9866095,"byte_end":9866106,"line_start":1116,"line_end":1116,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9866107,"byte_end":9866124,"line_start":1117,"line_end":1117,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":557},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9866607,"byte_end":9866617,"line_start":1134,"line_end":1134,"column_start":8,"column_end":18},"name":"store_m128","qualname":"::x86_x64::sse::store_m128","value":"fn store_m128(&mut m128, m128)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);\n let mut b = zeroed_m128();\n store_m128(&mut b, a);\n let c = b.to_array();\n assert_eq!(c, [10.0, 12.0, 13.0, 14.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the value to the reference given.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9866257,"byte_end":9866301,"line_start":1123,"line_end":1123,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9866302,"byte_end":9866309,"line_start":1124,"line_end":1124,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9866310,"byte_end":9866333,"line_start":1125,"line_end":1125,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9866334,"byte_end":9866389,"line_start":1126,"line_end":1126,"column_start":1,"column_end":56}},{"value":"/ let mut b = zeroed_m128();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9866390,"byte_end":9866420,"line_start":1127,"line_end":1127,"column_start":1,"column_end":31}},{"value":"/ store_m128(&mut b, a);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9866421,"byte_end":9866447,"line_start":1128,"line_end":1128,"column_start":1,"column_end":27}},{"value":"/ let c = b.to_array();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9866448,"byte_end":9866473,"line_start":1129,"line_end":1129,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(c, [10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9866474,"byte_end":9866518,"line_start":1130,"line_end":1130,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9866519,"byte_end":9866526,"line_start":1131,"line_end":1131,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9866527,"byte_end":9866544,"line_start":1132,"line_end":1132,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":558},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9867010,"byte_end":9867022,"line_start":1148,"line_end":1148,"column_start":8,"column_end":20},"name":"store_m128_s","qualname":"::x86_x64::sse::store_m128_s","value":"fn store_m128_s(&mut f32, m128)","parent":null,"children":[],"decl_id":null,"docs":" Stores the low lane value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);\n let mut f = 0.0;\n store_m128_s(&mut f, a);\n assert_eq!(f, 10.0);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the low lane value to the reference given.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9866705,"byte_end":9866758,"line_start":1138,"line_end":1138,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9866759,"byte_end":9866766,"line_start":1139,"line_end":1139,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9866767,"byte_end":9866790,"line_start":1140,"line_end":1140,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9866791,"byte_end":9866846,"line_start":1141,"line_end":1141,"column_start":1,"column_end":56}},{"value":"/ let mut f = 0.0;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9866847,"byte_end":9866867,"line_start":1142,"line_end":1142,"column_start":1,"column_end":21}},{"value":"/ store_m128_s(&mut f, a);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9866868,"byte_end":9866896,"line_start":1143,"line_end":1143,"column_start":1,"column_end":29}},{"value":"/ assert_eq!(f, 10.0);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9866897,"byte_end":9866921,"line_start":1144,"line_end":1144,"column_start":1,"column_end":25}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9866922,"byte_end":9866929,"line_start":1145,"line_end":1145,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9866930,"byte_end":9866947,"line_start":1146,"line_end":1146,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":559},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9867474,"byte_end":9867490,"line_start":1163,"line_end":1163,"column_start":8,"column_end":24},"name":"store_splat_m128","qualname":"::x86_x64::sse::store_splat_m128","value":"fn store_splat_m128(&mut m128, m128)","parent":null,"children":[],"decl_id":null,"docs":" Stores the low lane value to all lanes of the reference given.\n ```\n # use safe_arch::*;\n let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);\n let mut b = zeroed_m128();\n store_splat_m128(&mut b, a);\n let c = b.to_array();\n assert_eq!(c, [10.0, 10.0, 10.0, 10.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the low lane value to all lanes of the reference given.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9867096,"byte_end":9867162,"line_start":1152,"line_end":1152,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9867163,"byte_end":9867170,"line_start":1153,"line_end":1153,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9867171,"byte_end":9867194,"line_start":1154,"line_end":1154,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9867195,"byte_end":9867250,"line_start":1155,"line_end":1155,"column_start":1,"column_end":56}},{"value":"/ let mut b = zeroed_m128();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9867251,"byte_end":9867281,"line_start":1156,"line_end":1156,"column_start":1,"column_end":31}},{"value":"/ store_splat_m128(&mut b, a);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9867282,"byte_end":9867314,"line_start":1157,"line_end":1157,"column_start":1,"column_end":33}},{"value":"/ let c = b.to_array();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9867315,"byte_end":9867340,"line_start":1158,"line_end":1158,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(c, [10.0, 10.0, 10.0, 10.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9867341,"byte_end":9867385,"line_start":1159,"line_end":1159,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9867386,"byte_end":9867393,"line_start":1160,"line_end":1160,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9867394,"byte_end":9867411,"line_start":1161,"line_end":1161,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":560},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9867954,"byte_end":9867972,"line_start":1178,"line_end":1178,"column_start":8,"column_end":26},"name":"store_reverse_m128","qualname":"::x86_x64::sse::store_reverse_m128","value":"fn store_reverse_m128(&mut m128, m128)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given in reverse order.\n ```\n # use safe_arch::*;\n let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);\n let mut b = zeroed_m128();\n store_reverse_m128(&mut b, a);\n let c = b.to_array();\n assert_eq!(c, [14.0, 13.0, 12.0, 10.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the value to the reference given in reverse order.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9867579,"byte_end":9867640,"line_start":1167,"line_end":1167,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9867641,"byte_end":9867648,"line_start":1168,"line_end":1168,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9867649,"byte_end":9867672,"line_start":1169,"line_end":1169,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9867673,"byte_end":9867728,"line_start":1170,"line_end":1170,"column_start":1,"column_end":56}},{"value":"/ let mut b = zeroed_m128();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9867729,"byte_end":9867759,"line_start":1171,"line_end":1171,"column_start":1,"column_end":31}},{"value":"/ store_reverse_m128(&mut b, a);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9867760,"byte_end":9867794,"line_start":1172,"line_end":1172,"column_start":1,"column_end":35}},{"value":"/ let c = b.to_array();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9867795,"byte_end":9867820,"line_start":1173,"line_end":1173,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(c, [14.0, 13.0, 12.0, 10.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9867821,"byte_end":9867865,"line_start":1174,"line_end":1174,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9867866,"byte_end":9867873,"line_start":1175,"line_end":1175,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9867874,"byte_end":9867891,"line_start":1176,"line_end":1176,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":561},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9868567,"byte_end":9868587,"line_start":1196,"line_end":1196,"column_start":8,"column_end":28},"name":"store_unaligned_m128","qualname":"::x86_x64::sse::store_unaligned_m128","value":"fn store_unaligned_m128(&mut [f32; ], m128)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given.","sig":null,"attributes":[{"value":"/ Stores the value to the reference given.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9868061,"byte_end":9868105,"line_start":1182,"line_end":1182,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9868106,"byte_end":9868109,"line_start":1183,"line_end":1183,"column_start":1,"column_end":4}},{"value":"/ This generally has no speed penalty if the reference happens to be 16-byte","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9868110,"byte_end":9868188,"line_start":1184,"line_end":1184,"column_start":1,"column_end":79}},{"value":"/ aligned, but there is a slight speed penalty if the reference is only 4-byte","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9868189,"byte_end":9868269,"line_start":1185,"line_end":1185,"column_start":1,"column_end":81}},{"value":"/ aligned.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9868270,"byte_end":9868282,"line_start":1186,"line_end":1186,"column_start":1,"column_end":13}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9868283,"byte_end":9868290,"line_start":1187,"line_end":1187,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9868291,"byte_end":9868314,"line_start":1188,"line_end":1188,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9868315,"byte_end":9868370,"line_start":1189,"line_end":1189,"column_start":1,"column_end":56}},{"value":"/ let mut b = [0.0; 4];","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9868371,"byte_end":9868396,"line_start":1190,"line_end":1190,"column_start":1,"column_end":26}},{"value":"/ store_unaligned_m128(&mut b, a);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9868397,"byte_end":9868433,"line_start":1191,"line_end":1191,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(b, [10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9868434,"byte_end":9868478,"line_start":1192,"line_end":1192,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9868479,"byte_end":9868486,"line_start":1193,"line_end":1193,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9868487,"byte_end":9868504,"line_start":1194,"line_end":1194,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":563},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9869009,"byte_end":9869017,"line_start":1211,"line_end":1211,"column_start":8,"column_end":16},"name":"sub_m128","qualname":"::x86_x64::sse::sub_m128","value":"fn sub_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a - b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 8.0, 12.0, 3.0]);\n let c = sub_m128(a, b).to_array();\n assert_eq!(c, [-4.0, -6.0, -9.0, 1.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a - b`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9868667,"byte_end":9868688,"line_start":1200,"line_end":1200,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9868689,"byte_end":9868696,"line_start":1201,"line_end":1201,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9868697,"byte_end":9868720,"line_start":1202,"line_end":1202,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9868721,"byte_end":9868772,"line_start":1203,"line_end":1203,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([5.0, 8.0, 12.0, 3.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9868773,"byte_end":9868825,"line_start":1204,"line_end":1204,"column_start":1,"column_end":53}},{"value":"/ let c = sub_m128(a, b).to_array();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9868826,"byte_end":9868864,"line_start":1205,"line_end":1205,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(c, [-4.0, -6.0, -9.0, 1.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9868865,"byte_end":9868908,"line_start":1206,"line_end":1206,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9868909,"byte_end":9868916,"line_start":1207,"line_end":1207,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9868917,"byte_end":9868928,"line_start":1208,"line_end":1208,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9868929,"byte_end":9868946,"line_start":1209,"line_end":1209,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":564},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9869454,"byte_end":9869464,"line_start":1226,"line_end":1226,"column_start":8,"column_end":18},"name":"sub_m128_s","qualname":"::x86_x64::sse::sub_m128_s","value":"fn sub_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a - b`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 8.0, 12.0, 3.0]);\n let c = sub_m128_s(a, b).to_array();\n assert_eq!(c, [-4.0, 2.0, 3.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `a - b`, other lanes unchanged.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9869089,"byte_end":9869133,"line_start":1215,"line_end":1215,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9869134,"byte_end":9869141,"line_start":1216,"line_end":1216,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9869142,"byte_end":9869165,"line_start":1217,"line_end":1217,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9869166,"byte_end":9869217,"line_start":1218,"line_end":1218,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([5.0, 8.0, 12.0, 3.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9869218,"byte_end":9869270,"line_start":1219,"line_end":1219,"column_start":1,"column_end":53}},{"value":"/ let c = sub_m128_s(a, b).to_array();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9869271,"byte_end":9869311,"line_start":1220,"line_end":1220,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(c, [-4.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9869312,"byte_end":9869353,"line_start":1221,"line_end":1221,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9869354,"byte_end":9869361,"line_start":1222,"line_end":1222,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9869362,"byte_end":9869373,"line_start":1223,"line_end":1223,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9869374,"byte_end":9869391,"line_start":1224,"line_end":1224,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":565},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9870215,"byte_end":9870234,"line_start":1245,"line_end":1245,"column_start":8,"column_end":27},"name":"transpose_four_m128","qualname":"::x86_x64::sse::transpose_four_m128","value":"fn transpose_four_m128(&mut m128, &mut m128, &mut m128, &mut m128)","parent":null,"children":[],"decl_id":null,"docs":" Transpose four `m128` as if they were a 4x4 matrix.\n ```\n # use safe_arch::*;\n let mut a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let mut b = m128::from_array([5.0, 6.0, 7.0, 8.0]);\n let mut c = m128::from_array([9.0, 10.0, 11.0, 12.0]);\n let mut d = m128::from_array([13.0, 14.0, 15.0, 16.0]);\n transpose_four_m128(&mut a, &mut b, &mut c, &mut d);\n assert_eq!(a.to_array(), [1.0, 5.0, 9.0, 13.0]);\n assert_eq!(b.to_array(), [2.0, 6.0, 10.0, 14.0]);\n assert_eq!(c.to_array(), [3.0, 7.0, 11.0, 15.0]);\n assert_eq!(d.to_array(), [4.0, 8.0, 12.0, 16.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Transpose four `m128` as if they were a 4x4 matrix.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9869536,"byte_end":9869591,"line_start":1230,"line_end":1230,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9869592,"byte_end":9869599,"line_start":1231,"line_end":1231,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9869600,"byte_end":9869623,"line_start":1232,"line_end":1232,"column_start":1,"column_end":24}},{"value":"/ let mut a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9869624,"byte_end":9869679,"line_start":1233,"line_end":1233,"column_start":1,"column_end":56}},{"value":"/ let mut b = m128::from_array([5.0, 6.0, 7.0, 8.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9869680,"byte_end":9869735,"line_start":1234,"line_end":1234,"column_start":1,"column_end":56}},{"value":"/ let mut c = m128::from_array([9.0, 10.0, 11.0, 12.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9869736,"byte_end":9869794,"line_start":1235,"line_end":1235,"column_start":1,"column_end":59}},{"value":"/ let mut d = m128::from_array([13.0, 14.0, 15.0, 16.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9869795,"byte_end":9869854,"line_start":1236,"line_end":1236,"column_start":1,"column_end":60}},{"value":"/ transpose_four_m128(&mut a, &mut b, &mut c, &mut d);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9869855,"byte_end":9869911,"line_start":1237,"line_end":1237,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(a.to_array(), [1.0, 5.0, 9.0, 13.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9869912,"byte_end":9869964,"line_start":1238,"line_end":1238,"column_start":1,"column_end":53}},{"value":"/ assert_eq!(b.to_array(), [2.0, 6.0, 10.0, 14.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9869965,"byte_end":9870018,"line_start":1239,"line_end":1239,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c.to_array(), [3.0, 7.0, 11.0, 15.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9870019,"byte_end":9870072,"line_start":1240,"line_end":1240,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(d.to_array(), [4.0, 8.0, 12.0, 16.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9870073,"byte_end":9870126,"line_start":1241,"line_end":1241,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9870127,"byte_end":9870134,"line_start":1242,"line_end":1242,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9870135,"byte_end":9870152,"line_start":1243,"line_end":1243,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":566},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9870749,"byte_end":9870765,"line_start":1262,"line_end":1262,"column_start":8,"column_end":24},"name":"unpack_high_m128","qualname":"::x86_x64::sse::unpack_high_m128","value":"fn unpack_high_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave high lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.0]);\n let c = unpack_high_m128(a, b).to_array();\n assert_eq!(c, [3.0, 7.0, 4.0, 8.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave high lanes of `a` and `b`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9870372,"byte_end":9870424,"line_start":1251,"line_end":1251,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9870425,"byte_end":9870432,"line_start":1252,"line_end":1252,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9870433,"byte_end":9870456,"line_start":1253,"line_end":1253,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9870457,"byte_end":9870508,"line_start":1254,"line_end":1254,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9870509,"byte_end":9870560,"line_start":1255,"line_end":1255,"column_start":1,"column_end":52}},{"value":"/ let c = unpack_high_m128(a, b).to_array();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9870561,"byte_end":9870607,"line_start":1256,"line_end":1256,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [3.0, 7.0, 4.0, 8.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9870608,"byte_end":9870648,"line_start":1257,"line_end":1257,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9870649,"byte_end":9870656,"line_start":1258,"line_end":1258,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9870657,"byte_end":9870668,"line_start":1259,"line_end":1259,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9870669,"byte_end":9870686,"line_start":1260,"line_end":1260,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":567},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9871217,"byte_end":9871232,"line_start":1277,"line_end":1277,"column_start":8,"column_end":23},"name":"unpack_low_m128","qualname":"::x86_x64::sse::unpack_low_m128","value":"fn unpack_low_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave low lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.0]);\n let c = unpack_low_m128(a, b).to_array();\n assert_eq!(c, [1.0, 5.0, 2.0, 6.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave low lanes of `a` and `b`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9870842,"byte_end":9870893,"line_start":1266,"line_end":1266,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9870894,"byte_end":9870901,"line_start":1267,"line_end":1267,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9870902,"byte_end":9870925,"line_start":1268,"line_end":1268,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9870926,"byte_end":9870977,"line_start":1269,"line_end":1269,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9870978,"byte_end":9871029,"line_start":1270,"line_end":1270,"column_start":1,"column_end":52}},{"value":"/ let c = unpack_low_m128(a, b).to_array();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9871030,"byte_end":9871075,"line_start":1271,"line_end":1271,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(c, [1.0, 5.0, 2.0, 6.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9871076,"byte_end":9871116,"line_start":1272,"line_end":1272,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9871117,"byte_end":9871124,"line_start":1273,"line_end":1273,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9871125,"byte_end":9871136,"line_start":1274,"line_end":1274,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9871137,"byte_end":9871154,"line_start":1275,"line_end":1275,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":568},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9871649,"byte_end":9871660,"line_start":1292,"line_end":1292,"column_start":8,"column_end":19},"name":"bitxor_m128","qualname":"::x86_x64::sse::bitxor_m128","value":"fn bitxor_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a ^ b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);\n let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);\n let c = bitxor_m128(a, b).to_array();\n assert_eq!(c, [0.0, 1.0, 1.0, 0.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a ^ b`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9871309,"byte_end":9871329,"line_start":1281,"line_end":1281,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9871330,"byte_end":9871337,"line_start":1282,"line_end":1282,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9871338,"byte_end":9871361,"line_start":1283,"line_end":1283,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9871362,"byte_end":9871413,"line_start":1284,"line_end":1284,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9871414,"byte_end":9871465,"line_start":1285,"line_end":1285,"column_start":1,"column_end":52}},{"value":"/ let c = bitxor_m128(a, b).to_array();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9871466,"byte_end":9871507,"line_start":1286,"line_end":1286,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [0.0, 1.0, 1.0, 0.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9871508,"byte_end":9871548,"line_start":1287,"line_end":1287,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9871549,"byte_end":9871556,"line_start":1288,"line_end":1288,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9871557,"byte_end":9871568,"line_start":1289,"line_end":1289,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9871569,"byte_end":9871586,"line_start":1290,"line_end":1290,"column_start":1,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":571},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9872412,"byte_end":9872415,"line_start":1311,"line_end":1311,"column_start":6,"column_end":9},"name":"add","qualname":"<m128 as core::ops::Add>::add","value":"fn add(Self, Self) -> Self","parent":{"krate":1,"index":3247},"children":[],"decl_id":{"krate":1,"index":3250},"docs":"","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9872375,"byte_end":9872386,"line_start":1309,"line_end":1309,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9872389,"byte_end":9872406,"line_start":1310,"line_end":1310,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":573},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9872524,"byte_end":9872534,"line_start":1317,"line_end":1317,"column_start":6,"column_end":16},"name":"add_assign","qualname":"<m128 as core::ops::AddAssign>::add_assign","value":"fn add_assign(&mut Self, Self)","parent":{"krate":1,"index":3278},"children":[],"decl_id":{"krate":1,"index":3280},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9872501,"byte_end":9872518,"line_start":1316,"line_end":1316,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":576},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9872675,"byte_end":9872681,"line_start":1326,"line_end":1326,"column_start":6,"column_end":12},"name":"bitand","qualname":"<m128 as core::ops::BitAnd>::bitand","value":"fn bitand(Self, Self) -> Self","parent":{"krate":1,"index":3306},"children":[],"decl_id":{"krate":1,"index":3309},"docs":"","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9872638,"byte_end":9872649,"line_start":1324,"line_end":1324,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9872652,"byte_end":9872669,"line_start":1325,"line_end":1325,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":578},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9872796,"byte_end":9872809,"line_start":1332,"line_end":1332,"column_start":6,"column_end":19},"name":"bitand_assign","qualname":"<m128 as core::ops::BitAndAssign>::bitand_assign","value":"fn bitand_assign(&mut Self, Self)","parent":{"krate":1,"index":3333},"children":[],"decl_id":{"krate":1,"index":3335},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9872773,"byte_end":9872790,"line_start":1331,"line_end":1331,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":581},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9872949,"byte_end":9872954,"line_start":1341,"line_end":1341,"column_start":6,"column_end":11},"name":"bitor","qualname":"<m128 as core::ops::BitOr>::bitor","value":"fn bitor(Self, Self) -> Self","parent":{"krate":1,"index":3311},"children":[],"decl_id":{"krate":1,"index":3314},"docs":"","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9872912,"byte_end":9872923,"line_start":1339,"line_end":1339,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9872926,"byte_end":9872943,"line_start":1340,"line_end":1340,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":583},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9873067,"byte_end":9873079,"line_start":1347,"line_end":1347,"column_start":6,"column_end":18},"name":"bitor_assign","qualname":"<m128 as core::ops::BitOrAssign>::bitor_assign","value":"fn bitor_assign(&mut Self, Self)","parent":{"krate":1,"index":3337},"children":[],"decl_id":{"krate":1,"index":3339},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9873044,"byte_end":9873061,"line_start":1346,"line_end":1346,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":586},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9873220,"byte_end":9873226,"line_start":1356,"line_end":1356,"column_start":6,"column_end":12},"name":"bitxor","qualname":"<m128 as core::ops::BitXor>::bitxor","value":"fn bitxor(Self, Self) -> Self","parent":{"krate":1,"index":3316},"children":[],"decl_id":{"krate":1,"index":3319},"docs":"","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9873183,"byte_end":9873194,"line_start":1354,"line_end":1354,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9873197,"byte_end":9873214,"line_start":1355,"line_end":1355,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":588},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9873341,"byte_end":9873354,"line_start":1362,"line_end":1362,"column_start":6,"column_end":19},"name":"bitxor_assign","qualname":"<m128 as core::ops::BitXorAssign>::bitxor_assign","value":"fn bitxor_assign(&mut Self, Self)","parent":{"krate":1,"index":3341},"children":[],"decl_id":{"krate":1,"index":3343},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9873318,"byte_end":9873335,"line_start":1361,"line_end":1361,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":591},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9873492,"byte_end":9873495,"line_start":1371,"line_end":1371,"column_start":6,"column_end":9},"name":"div","qualname":"<m128 as core::ops::Div>::div","value":"fn div(Self, Self) -> Self","parent":{"krate":1,"index":3262},"children":[],"decl_id":{"krate":1,"index":3265},"docs":"","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9873455,"byte_end":9873466,"line_start":1369,"line_end":1369,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9873469,"byte_end":9873486,"line_start":1370,"line_end":1370,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":593},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9873604,"byte_end":9873614,"line_start":1377,"line_end":1377,"column_start":6,"column_end":16},"name":"div_assign","qualname":"<m128 as core::ops::DivAssign>::div_assign","value":"fn div_assign(&mut Self, Self)","parent":{"krate":1,"index":3290},"children":[],"decl_id":{"krate":1,"index":3292},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9873581,"byte_end":9873598,"line_start":1376,"line_end":1376,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":596},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9873752,"byte_end":9873755,"line_start":1386,"line_end":1386,"column_start":6,"column_end":9},"name":"mul","qualname":"<m128 as core::ops::Mul>::mul","value":"fn mul(Self, Self) -> Self","parent":{"krate":1,"index":3257},"children":[],"decl_id":{"krate":1,"index":3260},"docs":"","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9873715,"byte_end":9873726,"line_start":1384,"line_end":1384,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9873729,"byte_end":9873746,"line_start":1385,"line_end":1385,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":598},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9873864,"byte_end":9873874,"line_start":1392,"line_end":1392,"column_start":6,"column_end":16},"name":"mul_assign","qualname":"<m128 as core::ops::MulAssign>::mul_assign","value":"fn mul_assign(&mut Self, Self)","parent":{"krate":1,"index":3286},"children":[],"decl_id":{"krate":1,"index":3288},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9873841,"byte_end":9873858,"line_start":1391,"line_end":1391,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":601},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9874012,"byte_end":9874015,"line_start":1401,"line_end":1401,"column_start":6,"column_end":9},"name":"neg","qualname":"<m128 as core::ops::Neg>::neg","value":"fn neg(Self) -> Self","parent":{"krate":1,"index":3274},"children":[],"decl_id":{"krate":1,"index":3276},"docs":"","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9873975,"byte_end":9873986,"line_start":1399,"line_end":1399,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9873989,"byte_end":9874006,"line_start":1400,"line_end":1400,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":604},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9874332,"byte_end":9874335,"line_start":1414,"line_end":1414,"column_start":6,"column_end":9},"name":"not","qualname":"<m128 as core::ops::Not>::not","value":"fn not(Self) -> Self","parent":{"krate":1,"index":3299},"children":[],"decl_id":{"krate":1,"index":3301},"docs":" Not a direct intrinsic, but it's very useful and the implementation is\n simple enough.","sig":null,"attributes":[{"value":"/ Not a direct intrinsic, but it's very useful and the implementation is","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9874117,"byte_end":9874191,"line_start":1408,"line_end":1408,"column_start":3,"column_end":77}},{"value":"/ simple enough.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9874194,"byte_end":9874212,"line_start":1409,"line_end":1409,"column_start":3,"column_end":21}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9874215,"byte_end":9874218,"line_start":1410,"line_end":1410,"column_start":3,"column_end":6}},{"value":"/ Negates the bits by performing an `xor` with an all-1s bit pattern.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9874221,"byte_end":9874292,"line_start":1411,"line_end":1411,"column_start":3,"column_end":74}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9874295,"byte_end":9874306,"line_start":1412,"line_end":1412,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9874309,"byte_end":9874326,"line_start":1413,"line_end":1413,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":607},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9874521,"byte_end":9874524,"line_start":1424,"line_end":1424,"column_start":6,"column_end":9},"name":"sub","qualname":"<m128 as core::ops::Sub>::sub","value":"fn sub(Self, Self) -> Self","parent":{"krate":1,"index":3252},"children":[],"decl_id":{"krate":1,"index":3255},"docs":"","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9874484,"byte_end":9874495,"line_start":1422,"line_end":1422,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9874498,"byte_end":9874515,"line_start":1423,"line_end":1423,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":609},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9874633,"byte_end":9874643,"line_start":1430,"line_end":1430,"column_start":6,"column_end":16},"name":"sub_assign","qualname":"<m128 as core::ops::SubAssign>::sub_assign","value":"fn sub_assign(&mut Self, Self)","parent":{"krate":1,"index":3282},"children":[],"decl_id":{"krate":1,"index":3284},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9874610,"byte_end":9874627,"line_start":1429,"line_end":1429,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":611},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9874843,"byte_end":9874845,"line_start":1439,"line_end":1439,"column_start":6,"column_end":8},"name":"eq","qualname":"<m128 as core::cmp::PartialEq>::eq","value":"fn eq(&Self, &Self) -> bool","parent":{"krate":1,"index":2831},"children":[],"decl_id":{"krate":1,"index":2833},"docs":" Not a direct intrinsic, this is a `cmp_eq_mask` and then a `move_mask`.\n","sig":null,"attributes":[{"value":"/ Not a direct intrinsic, this is a `cmp_eq_mask` and then a `move_mask`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9874728,"byte_end":9874803,"line_start":1436,"line_end":1436,"column_start":3,"column_end":78}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9874806,"byte_end":9874817,"line_start":1437,"line_end":1437,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9874820,"byte_end":9874837,"line_start":1438,"line_end":1438,"column_start":3,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":615},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9876959,"byte_end":9876971,"line_start":22,"line_end":22,"column_start":8,"column_end":20},"name":"add_i8_m128i","qualname":"::x86_x64::sse2::add_i8_m128i","value":"fn add_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a + b` with lanes as `i8`.\n ```\n # use safe_arch::*;\n let a =\n   m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n let b = m128i::from([\n   0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127,\n ]);\n let c: [i8; 16] = add_i8_m128i(a, b).into();\n assert_eq!(\n   c,\n   [0, 12, 4, 16, 8, 20, 12, 24, 16, 28, -10, 32, 34, -10, 38, -114]\n );\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a + b` with lanes as `i8`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9876437,"byte_end":9876477,"line_start":5,"line_end":5,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9876478,"byte_end":9876485,"line_start":6,"line_end":6,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9876486,"byte_end":9876509,"line_start":7,"line_end":7,"column_start":1,"column_end":24}},{"value":"/ let a =","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9876510,"byte_end":9876521,"line_start":8,"line_end":8,"column_start":1,"column_end":12}},{"value":"/   m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9876522,"byte_end":9876599,"line_start":9,"line_end":9,"column_start":1,"column_end":78}},{"value":"/ let b = m128i::from([","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9876600,"byte_end":9876625,"line_start":10,"line_end":10,"column_start":1,"column_end":26}},{"value":"/   0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127,","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9876626,"byte_end":9876696,"line_start":11,"line_end":11,"column_start":1,"column_end":71}},{"value":"/ ]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9876697,"byte_end":9876704,"line_start":12,"line_end":12,"column_start":1,"column_end":8}},{"value":"/ let c: [i8; 16] = add_i8_m128i(a, b).into();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9876705,"byte_end":9876753,"line_start":13,"line_end":13,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9876754,"byte_end":9876769,"line_start":14,"line_end":14,"column_start":1,"column_end":16}},{"value":"/   c,","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9876770,"byte_end":9876778,"line_start":15,"line_end":15,"column_start":1,"column_end":9}},{"value":"/   [0, 12, 4, 16, 8, 20, 12, 24, 16, 28, -10, 32, 34, -10, 38, -114]","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9876779,"byte_end":9876850,"line_start":16,"line_end":16,"column_start":1,"column_end":72}},{"value":"/ );","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9876851,"byte_end":9876857,"line_start":17,"line_end":17,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9876858,"byte_end":9876865,"line_start":18,"line_end":18,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9876866,"byte_end":9876877,"line_start":19,"line_end":19,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9876878,"byte_end":9876895,"line_start":20,"line_end":20,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":616},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9877449,"byte_end":9877462,"line_start":37,"line_end":37,"column_start":8,"column_end":21},"name":"add_i16_m128i","qualname":"::x86_x64::sse2::add_i16_m128i","value":"fn add_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a + b` with lanes as `i16`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);\n let c: [i16; 8] = add_i16_m128i(a, b).into();\n assert_eq!(c, [6, 8, 10, 12, -16, -28, -40, 44]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a + b` with lanes as `i16`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9877049,"byte_end":9877090,"line_start":26,"line_end":26,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9877091,"byte_end":9877098,"line_start":27,"line_end":27,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9877099,"byte_end":9877122,"line_start":28,"line_end":28,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9877123,"byte_end":9877181,"line_start":29,"line_end":29,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9877182,"byte_end":9877243,"line_start":30,"line_end":30,"column_start":1,"column_end":62}},{"value":"/ let c: [i16; 8] = add_i16_m128i(a, b).into();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9877244,"byte_end":9877293,"line_start":31,"line_end":31,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [6, 8, 10, 12, -16, -28, -40, 44]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9877294,"byte_end":9877347,"line_start":32,"line_end":32,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9877348,"byte_end":9877355,"line_start":33,"line_end":33,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9877356,"byte_end":9877367,"line_start":34,"line_end":34,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9877368,"byte_end":9877385,"line_start":35,"line_end":35,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":617},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9877879,"byte_end":9877892,"line_start":52,"line_end":52,"column_start":8,"column_end":21},"name":"add_i32_m128i","qualname":"::x86_x64::sse2::add_i32_m128i","value":"fn add_i32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a + b` with lanes as `i32`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let b = m128i::from([5, 6, 7, 8]);\n let c: [i32; 4] = add_i32_m128i(a, b).into();\n assert_eq!(c, [6, 8, 10, 12]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a + b` with lanes as `i32`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9877541,"byte_end":9877582,"line_start":41,"line_end":41,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9877583,"byte_end":9877590,"line_start":42,"line_end":42,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9877591,"byte_end":9877614,"line_start":43,"line_end":43,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9877615,"byte_end":9877653,"line_start":44,"line_end":44,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([5, 6, 7, 8]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9877654,"byte_end":9877692,"line_start":45,"line_end":45,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = add_i32_m128i(a, b).into();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9877693,"byte_end":9877742,"line_start":46,"line_end":46,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [6, 8, 10, 12]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9877743,"byte_end":9877777,"line_start":47,"line_end":47,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9877778,"byte_end":9877785,"line_start":48,"line_end":48,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9877786,"byte_end":9877797,"line_start":49,"line_end":49,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9877798,"byte_end":9877815,"line_start":50,"line_end":50,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":618},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9878308,"byte_end":9878321,"line_start":67,"line_end":67,"column_start":8,"column_end":21},"name":"add_i64_m128i","qualname":"::x86_x64::sse2::add_i64_m128i","value":"fn add_i64_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a + b` with lanes as `i64`.\n ```\n # use safe_arch::*;\n let a = m128i::from([92_i64, 87]);\n let b = m128i::from([-9001_i64, 1]);\n let c: [i64; 2] = add_i64_m128i(a, b).into();\n assert_eq!(c, [-8909, 88]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a + b` with lanes as `i64`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9877971,"byte_end":9878012,"line_start":56,"line_end":56,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9878013,"byte_end":9878020,"line_start":57,"line_end":57,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9878021,"byte_end":9878044,"line_start":58,"line_end":58,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([92_i64, 87]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9878045,"byte_end":9878083,"line_start":59,"line_end":59,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([-9001_i64, 1]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9878084,"byte_end":9878124,"line_start":60,"line_end":60,"column_start":1,"column_end":41}},{"value":"/ let c: [i64; 2] = add_i64_m128i(a, b).into();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9878125,"byte_end":9878174,"line_start":61,"line_end":61,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [-8909, 88]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9878175,"byte_end":9878206,"line_start":62,"line_end":62,"column_start":1,"column_end":32}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9878207,"byte_end":9878214,"line_start":63,"line_end":63,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9878215,"byte_end":9878226,"line_start":64,"line_end":64,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9878227,"byte_end":9878244,"line_start":65,"line_end":65,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":619},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9878720,"byte_end":9878729,"line_start":82,"line_end":82,"column_start":8,"column_end":17},"name":"add_m128d","qualname":"::x86_x64::sse2::add_m128d","value":"fn add_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a + b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -6.0]);\n let c = add_m128d(a, b).to_array();\n assert_eq!(c, [192.0, 81.5]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a + b`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9878400,"byte_end":9878421,"line_start":71,"line_end":71,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9878422,"byte_end":9878429,"line_start":72,"line_end":72,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9878430,"byte_end":9878453,"line_start":73,"line_end":73,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9878454,"byte_end":9878498,"line_start":74,"line_end":74,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -6.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9878499,"byte_end":9878544,"line_start":75,"line_end":75,"column_start":1,"column_end":46}},{"value":"/ let c = add_m128d(a, b).to_array();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9878545,"byte_end":9878584,"line_start":76,"line_end":76,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(c, [192.0, 81.5]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9878585,"byte_end":9878618,"line_start":77,"line_end":77,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9878619,"byte_end":9878626,"line_start":78,"line_end":78,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9878627,"byte_end":9878638,"line_start":79,"line_end":79,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9878639,"byte_end":9878656,"line_start":80,"line_end":80,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":620},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9879153,"byte_end":9879164,"line_start":97,"line_end":97,"column_start":8,"column_end":19},"name":"add_m128d_s","qualname":"::x86_x64::sse2::add_m128d_s","value":"fn add_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lowest lane `a + b`, high lane unchanged.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -600.0]);\n let c = add_m128d_s(a, b).to_array();\n assert_eq!(c, [192.0, 87.5]);\n ```\n","sig":null,"attributes":[{"value":"/ Lowest lane `a + b`, high lane unchanged.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9878805,"byte_end":9878850,"line_start":86,"line_end":86,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9878851,"byte_end":9878858,"line_start":87,"line_end":87,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9878859,"byte_end":9878882,"line_start":88,"line_end":88,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9878883,"byte_end":9878927,"line_start":89,"line_end":89,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -600.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9878928,"byte_end":9878975,"line_start":90,"line_end":90,"column_start":1,"column_end":48}},{"value":"/ let c = add_m128d_s(a, b).to_array();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9878976,"byte_end":9879017,"line_start":91,"line_end":91,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [192.0, 87.5]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9879018,"byte_end":9879051,"line_start":92,"line_end":92,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9879052,"byte_end":9879059,"line_start":93,"line_end":93,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9879060,"byte_end":9879071,"line_start":94,"line_end":94,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9879072,"byte_end":9879089,"line_start":95,"line_end":95,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":876},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9879887,"byte_end":9879910,"line_start":125,"line_end":125,"column_start":8,"column_end":31},"name":"add_saturating_i8_m128i","qualname":"::x86_x64::sse2::add_saturating_i8_m128i","value":"fn add_saturating_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise saturating `a + b` with lanes as `i8`.\n ```\n # use safe_arch::*;\n let a = m128i::from([\n   i8::MAX, i8::MIN, 3, 4, -1, -2, -3, -4,\n   3, 4, -1, -2, -1, -2, -3, -4,\n ]);\n let b = m128i::from([\n   i8::MAX, i8::MIN, 7, 8, -15, -26, -37, 48,\n   7, 8, -15, -26, -15, -26, -37, 48,\n ]);\n let c: [i8; 16] = add_saturating_i8_m128i(a, b).into();\n assert_eq!(\n   c,\n   [\n     i8::MAX, i8::MIN, 10, 12, -16, -28, -40, 44,\n     10, 12, -16, -28, -16, -28, -40, 44\n   ]\n );\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise saturating `a + b` with lanes as `i8`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9879240,"byte_end":9879291,"line_start":101,"line_end":101,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9879292,"byte_end":9879299,"line_start":102,"line_end":102,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9879300,"byte_end":9879323,"line_start":103,"line_end":103,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9879324,"byte_end":9879349,"line_start":104,"line_end":104,"column_start":1,"column_end":26}},{"value":"/   i8::MAX, i8::MIN, 3, 4, -1, -2, -3, -4,","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9879350,"byte_end":9879395,"line_start":105,"line_end":105,"column_start":1,"column_end":46}},{"value":"/   3, 4, -1, -2, -1, -2, -3, -4,","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9879396,"byte_end":9879431,"line_start":106,"line_end":106,"column_start":1,"column_end":36}},{"value":"/ ]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9879432,"byte_end":9879439,"line_start":107,"line_end":107,"column_start":1,"column_end":8}},{"value":"/ let b = m128i::from([","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9879440,"byte_end":9879465,"line_start":108,"line_end":108,"column_start":1,"column_end":26}},{"value":"/   i8::MAX, i8::MIN, 7, 8, -15, -26, -37, 48,","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9879466,"byte_end":9879514,"line_start":109,"line_end":109,"column_start":1,"column_end":49}},{"value":"/   7, 8, -15, -26, -15, -26, -37, 48,","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9879515,"byte_end":9879555,"line_start":110,"line_end":110,"column_start":1,"column_end":41}},{"value":"/ ]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9879556,"byte_end":9879563,"line_start":111,"line_end":111,"column_start":1,"column_end":8}},{"value":"/ let c: [i8; 16] = add_saturating_i8_m128i(a, b).into();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9879564,"byte_end":9879623,"line_start":112,"line_end":112,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9879624,"byte_end":9879639,"line_start":113,"line_end":113,"column_start":1,"column_end":16}},{"value":"/   c,","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9879640,"byte_end":9879648,"line_start":114,"line_end":114,"column_start":1,"column_end":9}},{"value":"/   [","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9879649,"byte_end":9879656,"line_start":115,"line_end":115,"column_start":1,"column_end":8}},{"value":"/     i8::MAX, i8::MIN, 10, 12, -16, -28, -40, 44,","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9879657,"byte_end":9879709,"line_start":116,"line_end":116,"column_start":1,"column_end":53}},{"value":"/     10, 12, -16, -28, -16, -28, -40, 44","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9879710,"byte_end":9879753,"line_start":117,"line_end":117,"column_start":1,"column_end":44}},{"value":"/   ]","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9879754,"byte_end":9879761,"line_start":118,"line_end":118,"column_start":1,"column_end":8}},{"value":"/ );","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9879762,"byte_end":9879768,"line_start":119,"line_end":119,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9879769,"byte_end":9879776,"line_start":120,"line_end":120,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9879777,"byte_end":9879788,"line_start":121,"line_end":121,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9879789,"byte_end":9879806,"line_start":122,"line_end":122,"column_start":1,"column_end":18}},{"value":"rustfmt::skip","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9879807,"byte_end":9879823,"line_start":123,"line_end":123,"column_start":1,"column_end":17}}]},{"kind":"Function","id":{"krate":0,"index":621},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9880445,"byte_end":9880469,"line_start":140,"line_end":140,"column_start":8,"column_end":32},"name":"add_saturating_i16_m128i","qualname":"::x86_x64::sse2::add_saturating_i16_m128i","value":"fn add_saturating_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise saturating `a + b` with lanes as `i16`.\n ```\n # use safe_arch::*;\n let a = m128i::from([i16::MAX, i16::MIN, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([i16::MAX, i16::MIN, 7, 8, -15, -26, -37, 48]);\n let c: [i16; 8] = add_saturating_i16_m128i(a, b).into();\n assert_eq!(c, [i16::MAX, i16::MIN, 10, 12, -16, -28, -40, 44]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise saturating `a + b` with lanes as `i16`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9879989,"byte_end":9880041,"line_start":129,"line_end":129,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9880042,"byte_end":9880049,"line_start":130,"line_end":130,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9880050,"byte_end":9880073,"line_start":131,"line_end":131,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([i16::MAX, i16::MIN, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9880074,"byte_end":9880142,"line_start":132,"line_end":132,"column_start":1,"column_end":69}},{"value":"/ let b = m128i::from([i16::MAX, i16::MIN, 7, 8, -15, -26, -37, 48]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9880143,"byte_end":9880214,"line_start":133,"line_end":133,"column_start":1,"column_end":72}},{"value":"/ let c: [i16; 8] = add_saturating_i16_m128i(a, b).into();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9880215,"byte_end":9880275,"line_start":134,"line_end":134,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(c, [i16::MAX, i16::MIN, 10, 12, -16, -28, -40, 44]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9880276,"byte_end":9880343,"line_start":135,"line_end":135,"column_start":1,"column_end":68}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9880344,"byte_end":9880351,"line_start":136,"line_end":136,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9880352,"byte_end":9880363,"line_start":137,"line_end":137,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9880364,"byte_end":9880381,"line_start":138,"line_end":138,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":877},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9881158,"byte_end":9881181,"line_start":168,"line_end":168,"column_start":8,"column_end":31},"name":"add_saturating_u8_m128i","qualname":"::x86_x64::sse2::add_saturating_u8_m128i","value":"fn add_saturating_u8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise saturating `a + b` with lanes as `u8`.\n ```\n # use safe_arch::*;\n let a = m128i::from([\n   u8::MAX, 0, 3, 4, 254, 2, 3, 4,\n   3, 4, 1, 2, 1, 2, 128, 4,\n ]);\n let b = m128i::from([\n   u8::MAX, 0, 7, 8, 15, 26, 37, 48,\n   7, 8, 15, 26, 15, 26, 37, 48,\n ]);\n let c: [u8; 16] = add_saturating_u8_m128i(a, b).into();\n assert_eq!(\n   c,\n   [\n     u8::MAX, 0, 10, 12, 255, 28, 40, 52,\n     10, 12, 16, 28, 16, 28, 165, 52\n   ]\n );\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise saturating `a + b` with lanes as `u8`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9880549,"byte_end":9880600,"line_start":144,"line_end":144,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9880601,"byte_end":9880608,"line_start":145,"line_end":145,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9880609,"byte_end":9880632,"line_start":146,"line_end":146,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9880633,"byte_end":9880658,"line_start":147,"line_end":147,"column_start":1,"column_end":26}},{"value":"/   u8::MAX, 0, 3, 4, 254, 2, 3, 4,","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9880659,"byte_end":9880696,"line_start":148,"line_end":148,"column_start":1,"column_end":38}},{"value":"/   3, 4, 1, 2, 1, 2, 128, 4,","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9880697,"byte_end":9880728,"line_start":149,"line_end":149,"column_start":1,"column_end":32}},{"value":"/ ]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9880729,"byte_end":9880736,"line_start":150,"line_end":150,"column_start":1,"column_end":8}},{"value":"/ let b = m128i::from([","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9880737,"byte_end":9880762,"line_start":151,"line_end":151,"column_start":1,"column_end":26}},{"value":"/   u8::MAX, 0, 7, 8, 15, 26, 37, 48,","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9880763,"byte_end":9880802,"line_start":152,"line_end":152,"column_start":1,"column_end":40}},{"value":"/   7, 8, 15, 26, 15, 26, 37, 48,","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9880803,"byte_end":9880838,"line_start":153,"line_end":153,"column_start":1,"column_end":36}},{"value":"/ ]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9880839,"byte_end":9880846,"line_start":154,"line_end":154,"column_start":1,"column_end":8}},{"value":"/ let c: [u8; 16] = add_saturating_u8_m128i(a, b).into();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9880847,"byte_end":9880906,"line_start":155,"line_end":155,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9880907,"byte_end":9880922,"line_start":156,"line_end":156,"column_start":1,"column_end":16}},{"value":"/   c,","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9880923,"byte_end":9880931,"line_start":157,"line_end":157,"column_start":1,"column_end":9}},{"value":"/   [","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9880932,"byte_end":9880939,"line_start":158,"line_end":158,"column_start":1,"column_end":8}},{"value":"/     u8::MAX, 0, 10, 12, 255, 28, 40, 52,","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9880940,"byte_end":9880984,"line_start":159,"line_end":159,"column_start":1,"column_end":45}},{"value":"/     10, 12, 16, 28, 16, 28, 165, 52","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9880985,"byte_end":9881024,"line_start":160,"line_end":160,"column_start":1,"column_end":40}},{"value":"/   ]","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9881025,"byte_end":9881032,"line_start":161,"line_end":161,"column_start":1,"column_end":8}},{"value":"/ );","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9881033,"byte_end":9881039,"line_start":162,"line_end":162,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9881040,"byte_end":9881047,"line_start":163,"line_end":163,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9881048,"byte_end":9881059,"line_start":164,"line_end":164,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9881060,"byte_end":9881077,"line_start":165,"line_end":165,"column_start":1,"column_end":18}},{"value":"rustfmt::skip","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9881078,"byte_end":9881094,"line_start":166,"line_end":166,"column_start":1,"column_end":17}}]},{"kind":"Function","id":{"krate":0,"index":622},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9881685,"byte_end":9881709,"line_start":183,"line_end":183,"column_start":8,"column_end":32},"name":"add_saturating_u16_m128i","qualname":"::x86_x64::sse2::add_saturating_u16_m128i","value":"fn add_saturating_u16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise saturating `a + b` with lanes as `u16`.\n ```\n # use safe_arch::*;\n let a = m128i::from([u16::MAX, 0, 3, 4, 1, 2, 3, 4]);\n let b = m128i::from([u16::MAX, 0, 7, 8, 15, 26, 37, 48]);\n let c: [u16; 8] = add_saturating_u16_m128i(a, b).into();\n assert_eq!(c, [u16::MAX, 0, 10, 12, 16, 28, 40, 52]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise saturating `a + b` with lanes as `u16`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9881260,"byte_end":9881312,"line_start":172,"line_end":172,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9881313,"byte_end":9881320,"line_start":173,"line_end":173,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9881321,"byte_end":9881344,"line_start":174,"line_end":174,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([u16::MAX, 0, 3, 4, 1, 2, 3, 4]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9881345,"byte_end":9881402,"line_start":175,"line_end":175,"column_start":1,"column_end":58}},{"value":"/ let b = m128i::from([u16::MAX, 0, 7, 8, 15, 26, 37, 48]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9881403,"byte_end":9881464,"line_start":176,"line_end":176,"column_start":1,"column_end":62}},{"value":"/ let c: [u16; 8] = add_saturating_u16_m128i(a, b).into();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9881465,"byte_end":9881525,"line_start":177,"line_end":177,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(c, [u16::MAX, 0, 10, 12, 16, 28, 40, 52]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9881526,"byte_end":9881583,"line_start":178,"line_end":178,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9881584,"byte_end":9881591,"line_start":179,"line_end":179,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9881592,"byte_end":9881603,"line_start":180,"line_end":180,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9881604,"byte_end":9881621,"line_start":181,"line_end":181,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":623},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9882103,"byte_end":9882115,"line_start":198,"line_end":198,"column_start":8,"column_end":20},"name":"bitand_m128d","qualname":"::x86_x64::sse2::bitand_m128d","value":"fn bitand_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a & b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 0.0]);\n let b = m128d::from_array([1.0, 1.0]);\n let c = bitand_m128d(a, b).to_array();\n assert_eq!(c, [1.0, 0.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a & b`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9881789,"byte_end":9881809,"line_start":187,"line_end":187,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9881810,"byte_end":9881817,"line_start":188,"line_end":188,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9881818,"byte_end":9881841,"line_start":189,"line_end":189,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 0.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9881842,"byte_end":9881884,"line_start":190,"line_end":190,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9881885,"byte_end":9881927,"line_start":191,"line_end":191,"column_start":1,"column_end":43}},{"value":"/ let c = bitand_m128d(a, b).to_array();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9881928,"byte_end":9881970,"line_start":192,"line_end":192,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(c, [1.0, 0.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9881971,"byte_end":9882001,"line_start":193,"line_end":193,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9882002,"byte_end":9882009,"line_start":194,"line_end":194,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9882010,"byte_end":9882021,"line_start":195,"line_end":195,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9882022,"byte_end":9882039,"line_start":196,"line_end":196,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":624},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9882505,"byte_end":9882517,"line_start":213,"line_end":213,"column_start":8,"column_end":20},"name":"bitand_m128i","qualname":"::x86_x64::sse2::bitand_m128i","value":"fn bitand_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a & b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 0, 1, 0]);\n let b = m128i::from([1, 1, 0, 0]);\n let c: [i32; 4] = bitand_m128i(a, b).into();\n assert_eq!(c, [1, 0, 0, 0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a & b`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9882191,"byte_end":9882211,"line_start":202,"line_end":202,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9882212,"byte_end":9882219,"line_start":203,"line_end":203,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9882220,"byte_end":9882243,"line_start":204,"line_end":204,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 0, 1, 0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9882244,"byte_end":9882282,"line_start":205,"line_end":205,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([1, 1, 0, 0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9882283,"byte_end":9882321,"line_start":206,"line_end":206,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = bitand_m128i(a, b).into();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9882322,"byte_end":9882370,"line_start":207,"line_end":207,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [1, 0, 0, 0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9882371,"byte_end":9882403,"line_start":208,"line_end":208,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9882404,"byte_end":9882411,"line_start":209,"line_end":209,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9882412,"byte_end":9882423,"line_start":210,"line_end":210,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9882424,"byte_end":9882441,"line_start":211,"line_end":211,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":625},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9882916,"byte_end":9882931,"line_start":228,"line_end":228,"column_start":8,"column_end":23},"name":"bitandnot_m128d","qualname":"::x86_x64::sse2::bitandnot_m128d","value":"fn bitandnot_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `(!a) & b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 0.0]);\n let b = m128d::from_array([1.0, 1.0]);\n let c = bitandnot_m128d(a, b).to_array();\n assert_eq!(c, [0.0, 1.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `(!a) & b`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9882596,"byte_end":9882619,"line_start":217,"line_end":217,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9882620,"byte_end":9882627,"line_start":218,"line_end":218,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9882628,"byte_end":9882651,"line_start":219,"line_end":219,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 0.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9882652,"byte_end":9882694,"line_start":220,"line_end":220,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9882695,"byte_end":9882737,"line_start":221,"line_end":221,"column_start":1,"column_end":43}},{"value":"/ let c = bitandnot_m128d(a, b).to_array();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9882738,"byte_end":9882783,"line_start":222,"line_end":222,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(c, [0.0, 1.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9882784,"byte_end":9882814,"line_start":223,"line_end":223,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9882815,"byte_end":9882822,"line_start":224,"line_end":224,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9882823,"byte_end":9882834,"line_start":225,"line_end":225,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9882835,"byte_end":9882852,"line_start":226,"line_end":226,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":626},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9883330,"byte_end":9883345,"line_start":243,"line_end":243,"column_start":8,"column_end":23},"name":"bitandnot_m128i","qualname":"::x86_x64::sse2::bitandnot_m128i","value":"fn bitandnot_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `(!a) & b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 0, 1, 0]);\n let b = m128i::from([1, 1, 0, 0]);\n let c: [i32; 4] = bitandnot_m128i(a, b).into();\n assert_eq!(c, [0, 1, 0, 0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `(!a) & b`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9883010,"byte_end":9883033,"line_start":232,"line_end":232,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9883034,"byte_end":9883041,"line_start":233,"line_end":233,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9883042,"byte_end":9883065,"line_start":234,"line_end":234,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 0, 1, 0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9883066,"byte_end":9883104,"line_start":235,"line_end":235,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([1, 1, 0, 0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9883105,"byte_end":9883143,"line_start":236,"line_end":236,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = bitandnot_m128i(a, b).into();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9883144,"byte_end":9883195,"line_start":237,"line_end":237,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(c, [0, 1, 0, 0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9883196,"byte_end":9883228,"line_start":238,"line_end":238,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9883229,"byte_end":9883236,"line_start":239,"line_end":239,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9883237,"byte_end":9883248,"line_start":240,"line_end":240,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9883249,"byte_end":9883266,"line_start":241,"line_end":241,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":878},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9884011,"byte_end":9884027,"line_start":271,"line_end":271,"column_start":8,"column_end":24},"name":"average_u8_m128i","qualname":"::x86_x64::sse2::average_u8_m128i","value":"fn average_u8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise average of the `u8` values.\n ```\n # use safe_arch::*;\n let a = m128i::from([\n   u8::MAX, 0, 3, 4, 254, 2, 3, 4,\n   3, 4, 1, 2, 1, 2, 128, 4,\n ]);\n let b = m128i::from([\n   u8::MAX, 0, 7, 8, 15, 26, 37, 48,\n   7, 8, 15, 26, 15, 26, 37, 48,\n ]);\n let c: [u8; 16] = average_u8_m128i(a, b).into();\n assert_eq!(\n   c,\n   [\n     u8::MAX, 0, 5, 6, 135, 14, 20, 26,\n     5, 6, 8, 14, 8, 14, 83, 26\n   ]\n );\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise average of the `u8` values.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9883427,"byte_end":9883467,"line_start":247,"line_end":247,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9883468,"byte_end":9883475,"line_start":248,"line_end":248,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9883476,"byte_end":9883499,"line_start":249,"line_end":249,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9883500,"byte_end":9883525,"line_start":250,"line_end":250,"column_start":1,"column_end":26}},{"value":"/   u8::MAX, 0, 3, 4, 254, 2, 3, 4,","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9883526,"byte_end":9883563,"line_start":251,"line_end":251,"column_start":1,"column_end":38}},{"value":"/   3, 4, 1, 2, 1, 2, 128, 4,","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9883564,"byte_end":9883595,"line_start":252,"line_end":252,"column_start":1,"column_end":32}},{"value":"/ ]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9883596,"byte_end":9883603,"line_start":253,"line_end":253,"column_start":1,"column_end":8}},{"value":"/ let b = m128i::from([","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9883604,"byte_end":9883629,"line_start":254,"line_end":254,"column_start":1,"column_end":26}},{"value":"/   u8::MAX, 0, 7, 8, 15, 26, 37, 48,","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9883630,"byte_end":9883669,"line_start":255,"line_end":255,"column_start":1,"column_end":40}},{"value":"/   7, 8, 15, 26, 15, 26, 37, 48,","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9883670,"byte_end":9883705,"line_start":256,"line_end":256,"column_start":1,"column_end":36}},{"value":"/ ]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9883706,"byte_end":9883713,"line_start":257,"line_end":257,"column_start":1,"column_end":8}},{"value":"/ let c: [u8; 16] = average_u8_m128i(a, b).into();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9883714,"byte_end":9883766,"line_start":258,"line_end":258,"column_start":1,"column_end":53}},{"value":"/ assert_eq!(","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9883767,"byte_end":9883782,"line_start":259,"line_end":259,"column_start":1,"column_end":16}},{"value":"/   c,","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9883783,"byte_end":9883791,"line_start":260,"line_end":260,"column_start":1,"column_end":9}},{"value":"/   [","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9883792,"byte_end":9883799,"line_start":261,"line_end":261,"column_start":1,"column_end":8}},{"value":"/     u8::MAX, 0, 5, 6, 135, 14, 20, 26,","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9883800,"byte_end":9883842,"line_start":262,"line_end":262,"column_start":1,"column_end":43}},{"value":"/     5, 6, 8, 14, 8, 14, 83, 26","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9883843,"byte_end":9883877,"line_start":263,"line_end":263,"column_start":1,"column_end":35}},{"value":"/   ]","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9883878,"byte_end":9883885,"line_start":264,"line_end":264,"column_start":1,"column_end":8}},{"value":"/ );","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9883886,"byte_end":9883892,"line_start":265,"line_end":265,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9883893,"byte_end":9883900,"line_start":266,"line_end":266,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9883901,"byte_end":9883912,"line_start":267,"line_end":267,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9883913,"byte_end":9883930,"line_start":268,"line_end":268,"column_start":1,"column_end":18}},{"value":"rustfmt::skip","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9883931,"byte_end":9883947,"line_start":269,"line_end":269,"column_start":1,"column_end":17}}]},{"kind":"Function","id":{"krate":0,"index":627},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9884509,"byte_end":9884526,"line_start":286,"line_end":286,"column_start":8,"column_end":25},"name":"average_u16_m128i","qualname":"::x86_x64::sse2::average_u16_m128i","value":"fn average_u16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise average of the `u16` values.\n ```\n # use safe_arch::*;\n let a = m128i::from([u16::MAX, 0, 3, 4, 1, 2, 3, 4]);\n let b = m128i::from([u16::MAX, 0, 7, 8, 15, 26, 37, 48]);\n let c: [u16; 8] = average_u16_m128i(a, b).into();\n assert_eq!(c, [u16::MAX, 0, 5, 6, 8, 14, 20, 26]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise average of the `u16` values.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9884105,"byte_end":9884146,"line_start":275,"line_end":275,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9884147,"byte_end":9884154,"line_start":276,"line_end":276,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9884155,"byte_end":9884178,"line_start":277,"line_end":277,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([u16::MAX, 0, 3, 4, 1, 2, 3, 4]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9884179,"byte_end":9884236,"line_start":278,"line_end":278,"column_start":1,"column_end":58}},{"value":"/ let b = m128i::from([u16::MAX, 0, 7, 8, 15, 26, 37, 48]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9884237,"byte_end":9884298,"line_start":279,"line_end":279,"column_start":1,"column_end":62}},{"value":"/ let c: [u16; 8] = average_u16_m128i(a, b).into();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9884299,"byte_end":9884352,"line_start":280,"line_end":280,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c, [u16::MAX, 0, 5, 6, 8, 14, 20, 26]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9884353,"byte_end":9884407,"line_start":281,"line_end":281,"column_start":1,"column_end":55}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9884408,"byte_end":9884415,"line_start":282,"line_end":282,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9884416,"byte_end":9884427,"line_start":283,"line_end":283,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9884428,"byte_end":9884445,"line_start":284,"line_end":284,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":630},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9886378,"byte_end":9886401,"line_start":344,"line_end":344,"column_start":8,"column_end":31},"name":"cast_to_m128_from_m128d","qualname":"::x86_x64::sse2::cast_to_m128_from_m128d","value":"fn cast_to_m128_from_m128d(m128d) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Bit-preserving cast to `m128` from `m128d`\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.0]);\n let c: [u32; 4] = cast_to_m128_from_m128d(a).to_bits();\n assert_eq!(c, [0, 0x3FF00000, 0, 0x40000000]);\n ```\n","sig":null,"attributes":[{"value":"/ Bit-preserving cast to `m128` from `m128d`","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9886044,"byte_end":9886090,"line_start":334,"line_end":334,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9886091,"byte_end":9886098,"line_start":335,"line_end":335,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9886099,"byte_end":9886122,"line_start":336,"line_end":336,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9886123,"byte_end":9886165,"line_start":337,"line_end":337,"column_start":1,"column_end":43}},{"value":"/ let c: [u32; 4] = cast_to_m128_from_m128d(a).to_bits();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9886166,"byte_end":9886225,"line_start":338,"line_end":338,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(c, [0, 0x3FF00000, 0, 0x40000000]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9886226,"byte_end":9886276,"line_start":339,"line_end":339,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9886277,"byte_end":9886284,"line_start":340,"line_end":340,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9886285,"byte_end":9886296,"line_start":341,"line_end":341,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9886297,"byte_end":9886314,"line_start":342,"line_end":342,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":631},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9886796,"byte_end":9886820,"line_start":358,"line_end":358,"column_start":8,"column_end":32},"name":"cast_to_m128i_from_m128d","qualname":"::x86_x64::sse2::cast_to_m128i_from_m128d","value":"fn cast_to_m128i_from_m128d(m128d) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Bit-preserving cast to `m128i` from `m128d`\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.0]);\n let c: [u32; 4] = cast_to_m128i_from_m128d(a).into();\n assert_eq!(c, [0, 0x3FF00000, 0, 0x40000000]);\n ```\n","sig":null,"attributes":[{"value":"/ Bit-preserving cast to `m128i` from `m128d`","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9886463,"byte_end":9886510,"line_start":348,"line_end":348,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9886511,"byte_end":9886518,"line_start":349,"line_end":349,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9886519,"byte_end":9886542,"line_start":350,"line_end":350,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9886543,"byte_end":9886585,"line_start":351,"line_end":351,"column_start":1,"column_end":43}},{"value":"/ let c: [u32; 4] = cast_to_m128i_from_m128d(a).into();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9886586,"byte_end":9886643,"line_start":352,"line_end":352,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [0, 0x3FF00000, 0, 0x40000000]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9886644,"byte_end":9886694,"line_start":353,"line_end":353,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9886695,"byte_end":9886702,"line_start":354,"line_end":354,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9886703,"byte_end":9886714,"line_start":355,"line_end":355,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9886715,"byte_end":9886732,"line_start":356,"line_end":356,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":632},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9887240,"byte_end":9887263,"line_start":372,"line_end":372,"column_start":8,"column_end":31},"name":"cast_to_m128d_from_m128","qualname":"::x86_x64::sse2::cast_to_m128d_from_m128","value":"fn cast_to_m128d_from_m128(m128) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Bit-preserving cast to `m128d` from `m128`\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let c: [u64; 2] = cast_to_m128d_from_m128(a).to_bits();\n assert_eq!(c, [0x400000003F800000, 0x4080000040400000]);\n ```\n","sig":null,"attributes":[{"value":"/ Bit-preserving cast to `m128d` from `m128`","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9886887,"byte_end":9886933,"line_start":362,"line_end":362,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9886934,"byte_end":9886941,"line_start":363,"line_end":363,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9886942,"byte_end":9886965,"line_start":364,"line_end":364,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9886966,"byte_end":9887017,"line_start":365,"line_end":365,"column_start":1,"column_end":52}},{"value":"/ let c: [u64; 2] = cast_to_m128d_from_m128(a).to_bits();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9887018,"byte_end":9887077,"line_start":366,"line_end":366,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(c, [0x400000003F800000, 0x4080000040400000]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9887078,"byte_end":9887138,"line_start":367,"line_end":367,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9887139,"byte_end":9887146,"line_start":368,"line_end":368,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9887147,"byte_end":9887158,"line_start":369,"line_end":369,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9887159,"byte_end":9887176,"line_start":370,"line_end":370,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":633},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9887684,"byte_end":9887707,"line_start":386,"line_end":386,"column_start":8,"column_end":31},"name":"cast_to_m128i_from_m128","qualname":"::x86_x64::sse2::cast_to_m128i_from_m128","value":"fn cast_to_m128i_from_m128(m128) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Bit-preserving cast to `m128i` from `m128`\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let c: [u32; 4] = cast_to_m128i_from_m128(a).into();\n assert_eq!(c, [0x3F800000, 0x40000000, 0x40400000, 0x40800000]);\n ```\n","sig":null,"attributes":[{"value":"/ Bit-preserving cast to `m128i` from `m128`","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9887326,"byte_end":9887372,"line_start":376,"line_end":376,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9887373,"byte_end":9887380,"line_start":377,"line_end":377,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9887381,"byte_end":9887404,"line_start":378,"line_end":378,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9887405,"byte_end":9887456,"line_start":379,"line_end":379,"column_start":1,"column_end":52}},{"value":"/ let c: [u32; 4] = cast_to_m128i_from_m128(a).into();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9887457,"byte_end":9887513,"line_start":380,"line_end":380,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [0x3F800000, 0x40000000, 0x40400000, 0x40800000]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9887514,"byte_end":9887582,"line_start":381,"line_end":381,"column_start":1,"column_end":69}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9887583,"byte_end":9887590,"line_start":382,"line_end":382,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9887591,"byte_end":9887602,"line_start":383,"line_end":383,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9887603,"byte_end":9887620,"line_start":384,"line_end":384,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":634},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9888101,"byte_end":9888125,"line_start":400,"line_end":400,"column_start":8,"column_end":32},"name":"cast_to_m128d_from_m128i","qualname":"::x86_x64::sse2::cast_to_m128d_from_m128i","value":"fn cast_to_m128d_from_m128i(m128i) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Bit-preserving cast to `m128d` from `m128i`\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let c: [u64; 2] = cast_to_m128d_from_m128i(a).to_bits();\n assert_eq!(c, [0x200000001, 0x400000003]);\n ```\n","sig":null,"attributes":[{"value":"/ Bit-preserving cast to `m128d` from `m128i`","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9887773,"byte_end":9887820,"line_start":390,"line_end":390,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9887821,"byte_end":9887828,"line_start":391,"line_end":391,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9887829,"byte_end":9887852,"line_start":392,"line_end":392,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9887853,"byte_end":9887891,"line_start":393,"line_end":393,"column_start":1,"column_end":39}},{"value":"/ let c: [u64; 2] = cast_to_m128d_from_m128i(a).to_bits();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9887892,"byte_end":9887952,"line_start":394,"line_end":394,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(c, [0x200000001, 0x400000003]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9887953,"byte_end":9887999,"line_start":395,"line_end":395,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9888000,"byte_end":9888007,"line_start":396,"line_end":396,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9888008,"byte_end":9888019,"line_start":397,"line_end":397,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9888020,"byte_end":9888037,"line_start":398,"line_end":398,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":635},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9888504,"byte_end":9888527,"line_start":414,"line_end":414,"column_start":8,"column_end":31},"name":"cast_to_m128_from_m128i","qualname":"::x86_x64::sse2::cast_to_m128_from_m128i","value":"fn cast_to_m128_from_m128i(m128i) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Bit-preserving cast to `m128` from `m128i`\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let c: [u32; 4] = cast_to_m128_from_m128i(a).to_bits();\n assert_eq!(c, [1, 2, 3, 4]);\n ```\n","sig":null,"attributes":[{"value":"/ Bit-preserving cast to `m128` from `m128i`","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9888192,"byte_end":9888238,"line_start":404,"line_end":404,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9888239,"byte_end":9888246,"line_start":405,"line_end":405,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9888247,"byte_end":9888270,"line_start":406,"line_end":406,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9888271,"byte_end":9888309,"line_start":407,"line_end":407,"column_start":1,"column_end":39}},{"value":"/ let c: [u32; 4] = cast_to_m128_from_m128i(a).to_bits();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9888310,"byte_end":9888369,"line_start":408,"line_end":408,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(c, [1, 2, 3, 4]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9888370,"byte_end":9888402,"line_start":409,"line_end":409,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9888403,"byte_end":9888410,"line_start":410,"line_end":410,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9888411,"byte_end":9888422,"line_start":411,"line_end":411,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9888423,"byte_end":9888440,"line_start":412,"line_end":412,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":636},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9889158,"byte_end":9889178,"line_start":434,"line_end":434,"column_start":8,"column_end":28},"name":"cmp_eq_mask_i8_m128i","qualname":"::x86_x64::sse2::cmp_eq_mask_i8_m128i","value":"fn cmp_eq_mask_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a == b` with lanes as `i8`.","sig":null,"attributes":[{"value":"/ Lanewise `a == b` with lanes as `i8`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9888592,"byte_end":9888633,"line_start":418,"line_end":418,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9888634,"byte_end":9888637,"line_start":419,"line_end":419,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9888638,"byte_end":9888696,"line_start":420,"line_end":420,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9888697,"byte_end":9888704,"line_start":421,"line_end":421,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9888705,"byte_end":9888728,"line_start":422,"line_end":422,"column_start":1,"column_end":24}},{"value":"/ let a =","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9888729,"byte_end":9888740,"line_start":423,"line_end":423,"column_start":1,"column_end":12}},{"value":"/   m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 127]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9888741,"byte_end":9888819,"line_start":424,"line_end":424,"column_start":1,"column_end":79}},{"value":"/ let b = m128i::from([","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9888820,"byte_end":9888845,"line_start":425,"line_end":425,"column_start":1,"column_end":26}},{"value":"/   0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127,","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9888846,"byte_end":9888916,"line_start":426,"line_end":426,"column_start":1,"column_end":71}},{"value":"/ ]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9888917,"byte_end":9888924,"line_start":427,"line_end":427,"column_start":1,"column_end":8}},{"value":"/ let c: [i8; 16] = cmp_eq_mask_i8_m128i(a, b).into();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9888925,"byte_end":9888981,"line_start":428,"line_end":428,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [-1, 0, -1, 0, -1, 0, -1, 0, -1, 0, 0, 0, 0, 0, 0, -1]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9888982,"byte_end":9889056,"line_start":429,"line_end":429,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9889057,"byte_end":9889064,"line_start":430,"line_end":430,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9889065,"byte_end":9889076,"line_start":431,"line_end":431,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9889077,"byte_end":9889094,"line_start":432,"line_end":432,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":637},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9889724,"byte_end":9889745,"line_start":451,"line_end":451,"column_start":8,"column_end":29},"name":"cmp_eq_mask_i16_m128i","qualname":"::x86_x64::sse2::cmp_eq_mask_i16_m128i","value":"fn cmp_eq_mask_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a == b` with lanes as `i16`.","sig":null,"attributes":[{"value":"/ Lanewise `a == b` with lanes as `i16`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9889258,"byte_end":9889300,"line_start":438,"line_end":438,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9889301,"byte_end":9889304,"line_start":439,"line_end":439,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9889305,"byte_end":9889363,"line_start":440,"line_end":440,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9889364,"byte_end":9889371,"line_start":441,"line_end":441,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9889372,"byte_end":9889395,"line_start":442,"line_end":442,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9889396,"byte_end":9889454,"line_start":443,"line_end":443,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([5_i16, 2, 7, 4, -15, -26, -37, -4]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9889455,"byte_end":9889516,"line_start":444,"line_end":444,"column_start":1,"column_end":62}},{"value":"/ let c: [i16; 8] = cmp_eq_mask_i16_m128i(a, b).into();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9889517,"byte_end":9889574,"line_start":445,"line_end":445,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [0, -1, 0, -1, 0, 0, 0, -1]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9889575,"byte_end":9889622,"line_start":446,"line_end":446,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9889623,"byte_end":9889630,"line_start":447,"line_end":447,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9889631,"byte_end":9889642,"line_start":448,"line_end":448,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9889643,"byte_end":9889660,"line_start":449,"line_end":449,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":638},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9890236,"byte_end":9890257,"line_start":468,"line_end":468,"column_start":8,"column_end":29},"name":"cmp_eq_mask_i32_m128i","qualname":"::x86_x64::sse2::cmp_eq_mask_i32_m128i","value":"fn cmp_eq_mask_i32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a == b` with lanes as `i32`.","sig":null,"attributes":[{"value":"/ Lanewise `a == b` with lanes as `i32`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9889826,"byte_end":9889868,"line_start":455,"line_end":455,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9889869,"byte_end":9889872,"line_start":456,"line_end":456,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9889873,"byte_end":9889931,"line_start":457,"line_end":457,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9889932,"byte_end":9889939,"line_start":458,"line_end":458,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9889940,"byte_end":9889963,"line_start":459,"line_end":459,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9889964,"byte_end":9890002,"line_start":460,"line_end":460,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([5, 2, 7, 4]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9890003,"byte_end":9890041,"line_start":461,"line_end":461,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = cmp_eq_mask_i32_m128i(a, b).into();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9890042,"byte_end":9890099,"line_start":462,"line_end":462,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [0, -1, 0, -1]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9890100,"byte_end":9890134,"line_start":463,"line_end":463,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9890135,"byte_end":9890142,"line_start":464,"line_end":464,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9890143,"byte_end":9890154,"line_start":465,"line_end":465,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9890155,"byte_end":9890172,"line_start":466,"line_end":466,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":639},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9890695,"byte_end":9890712,"line_start":485,"line_end":485,"column_start":8,"column_end":25},"name":"cmp_eq_mask_m128d","qualname":"::x86_x64::sse2::cmp_eq_mask_m128d","value":"fn cmp_eq_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a == b`, mask output.","sig":null,"attributes":[{"value":"/ Lanewise `a == b`, mask output.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9890338,"byte_end":9890373,"line_start":472,"line_end":472,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9890374,"byte_end":9890377,"line_start":473,"line_end":473,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9890378,"byte_end":9890394,"line_start":474,"line_end":474,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9890395,"byte_end":9890402,"line_start":475,"line_end":475,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9890403,"byte_end":9890426,"line_start":476,"line_end":476,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 0.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9890427,"byte_end":9890469,"line_start":477,"line_end":477,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9890470,"byte_end":9890512,"line_start":478,"line_end":478,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_eq_mask_m128d(a, b).to_bits();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9890513,"byte_end":9890559,"line_start":479,"line_end":479,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [u64::MAX, 0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9890560,"byte_end":9890593,"line_start":480,"line_end":480,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9890594,"byte_end":9890601,"line_start":481,"line_end":481,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9890602,"byte_end":9890613,"line_start":482,"line_end":482,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9890614,"byte_end":9890631,"line_start":483,"line_end":483,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":640},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9891173,"byte_end":9891192,"line_start":502,"line_end":502,"column_start":8,"column_end":27},"name":"cmp_eq_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_eq_mask_m128d_s","value":"fn cmp_eq_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a == b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a == b`, other lanes unchanged.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9890790,"byte_end":9890835,"line_start":489,"line_end":489,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9890836,"byte_end":9890839,"line_start":490,"line_end":490,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9890840,"byte_end":9890856,"line_start":491,"line_end":491,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9890857,"byte_end":9890864,"line_start":492,"line_end":492,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9890865,"byte_end":9890888,"line_start":493,"line_end":493,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 5.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9890889,"byte_end":9890931,"line_start":494,"line_end":494,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9890932,"byte_end":9890974,"line_start":495,"line_end":495,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_eq_mask_m128d_s(a, b).to_bits();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9890975,"byte_end":9891023,"line_start":496,"line_end":496,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9891024,"byte_end":9891071,"line_start":497,"line_end":497,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9891072,"byte_end":9891079,"line_start":498,"line_end":498,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9891080,"byte_end":9891091,"line_start":499,"line_end":499,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9891092,"byte_end":9891109,"line_start":500,"line_end":500,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":641},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9891621,"byte_end":9891638,"line_start":519,"line_end":519,"column_start":8,"column_end":25},"name":"cmp_ge_mask_m128d","qualname":"::x86_x64::sse2::cmp_ge_mask_m128d","value":"fn cmp_ge_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a >= b`.","sig":null,"attributes":[{"value":"/ Lanewise `a >= b`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9891270,"byte_end":9891292,"line_start":506,"line_end":506,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9891293,"byte_end":9891296,"line_start":507,"line_end":507,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9891297,"byte_end":9891313,"line_start":508,"line_end":508,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9891314,"byte_end":9891321,"line_start":509,"line_end":509,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9891322,"byte_end":9891345,"line_start":510,"line_end":510,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([3.0, 1.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9891346,"byte_end":9891388,"line_start":511,"line_end":511,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9891389,"byte_end":9891431,"line_start":512,"line_end":512,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_ge_mask_m128d(a, b).to_bits();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9891432,"byte_end":9891478,"line_start":513,"line_end":513,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [u64::MAX, u64::MAX]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9891479,"byte_end":9891519,"line_start":514,"line_end":514,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9891520,"byte_end":9891527,"line_start":515,"line_end":515,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9891528,"byte_end":9891539,"line_start":516,"line_end":516,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9891540,"byte_end":9891557,"line_start":517,"line_end":517,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":642},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9892099,"byte_end":9892118,"line_start":536,"line_end":536,"column_start":8,"column_end":27},"name":"cmp_ge_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_ge_mask_m128d_s","value":"fn cmp_ge_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a >= b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a >= b`, other lanes unchanged.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9891716,"byte_end":9891761,"line_start":523,"line_end":523,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9891762,"byte_end":9891765,"line_start":524,"line_end":524,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9891766,"byte_end":9891782,"line_start":525,"line_end":525,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9891783,"byte_end":9891790,"line_start":526,"line_end":526,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9891791,"byte_end":9891814,"line_start":527,"line_end":527,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 5.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9891815,"byte_end":9891857,"line_start":528,"line_end":528,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9891858,"byte_end":9891900,"line_start":529,"line_end":529,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_ge_mask_m128d_s(a, b).to_bits();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9891901,"byte_end":9891949,"line_start":530,"line_end":530,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9891950,"byte_end":9891997,"line_start":531,"line_end":531,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9891998,"byte_end":9892005,"line_start":532,"line_end":532,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9892006,"byte_end":9892017,"line_start":533,"line_end":533,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9892018,"byte_end":9892035,"line_start":534,"line_end":534,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":643},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9892767,"byte_end":9892787,"line_start":556,"line_end":556,"column_start":8,"column_end":28},"name":"cmp_gt_mask_i8_m128i","qualname":"::x86_x64::sse2::cmp_gt_mask_i8_m128i","value":"fn cmp_gt_mask_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a > b` with lanes as `i8`.","sig":null,"attributes":[{"value":"/ Lanewise `a > b` with lanes as `i8`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9892196,"byte_end":9892236,"line_start":540,"line_end":540,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9892237,"byte_end":9892240,"line_start":541,"line_end":541,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9892241,"byte_end":9892299,"line_start":542,"line_end":542,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9892300,"byte_end":9892307,"line_start":543,"line_end":543,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9892308,"byte_end":9892331,"line_start":544,"line_end":544,"column_start":1,"column_end":24}},{"value":"/ let a =","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9892332,"byte_end":9892343,"line_start":545,"line_end":545,"column_start":1,"column_end":12}},{"value":"/   m128i::from([1_i8, 1, 20, 3, 40, 5, 60, 7, 80, 9, 10, 11, 12, 13, 14, 127]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9892344,"byte_end":9892426,"line_start":546,"line_end":546,"column_start":1,"column_end":83}},{"value":"/ let b = m128i::from([","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9892427,"byte_end":9892452,"line_start":547,"line_end":547,"column_start":1,"column_end":26}},{"value":"/   0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 120,","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9892453,"byte_end":9892523,"line_start":548,"line_end":548,"column_start":1,"column_end":71}},{"value":"/ ]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9892524,"byte_end":9892531,"line_start":549,"line_end":549,"column_start":1,"column_end":8}},{"value":"/ let c: [i8; 16] = cmp_gt_mask_i8_m128i(a, b).into();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9892532,"byte_end":9892588,"line_start":550,"line_end":550,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [-1, 0, -1, 0, -1, 0, -1, 0, -1, 0, -1, 0, 0, -1, 0, -1]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9892589,"byte_end":9892665,"line_start":551,"line_end":551,"column_start":1,"column_end":77}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9892666,"byte_end":9892673,"line_start":552,"line_end":552,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9892674,"byte_end":9892685,"line_start":553,"line_end":553,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9892686,"byte_end":9892703,"line_start":554,"line_end":554,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":644},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9893336,"byte_end":9893357,"line_start":573,"line_end":573,"column_start":8,"column_end":29},"name":"cmp_gt_mask_i16_m128i","qualname":"::x86_x64::sse2::cmp_gt_mask_i16_m128i","value":"fn cmp_gt_mask_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a > b` with lanes as `i16`.","sig":null,"attributes":[{"value":"/ Lanewise `a > b` with lanes as `i16`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9892867,"byte_end":9892908,"line_start":560,"line_end":560,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9892909,"byte_end":9892912,"line_start":561,"line_end":561,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9892913,"byte_end":9892971,"line_start":562,"line_end":562,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9892972,"byte_end":9892979,"line_start":563,"line_end":563,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9892980,"byte_end":9893003,"line_start":564,"line_end":564,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 20, 3, 40, -1, -2, -3, 0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9893004,"byte_end":9893063,"line_start":565,"line_end":565,"column_start":1,"column_end":60}},{"value":"/ let b = m128i::from([5_i16, 2, 7, 4, -15, -26, -37, -4]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9893064,"byte_end":9893125,"line_start":566,"line_end":566,"column_start":1,"column_end":62}},{"value":"/ let c: [i16; 8] = cmp_gt_mask_i16_m128i(a, b).into();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9893126,"byte_end":9893183,"line_start":567,"line_end":567,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [0, -1, 0, -1, -1, -1, -1, -1]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9893184,"byte_end":9893234,"line_start":568,"line_end":568,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9893235,"byte_end":9893242,"line_start":569,"line_end":569,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9893243,"byte_end":9893254,"line_start":570,"line_end":570,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9893255,"byte_end":9893272,"line_start":571,"line_end":571,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":645},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9893849,"byte_end":9893870,"line_start":590,"line_end":590,"column_start":8,"column_end":29},"name":"cmp_gt_mask_i32_m128i","qualname":"::x86_x64::sse2::cmp_gt_mask_i32_m128i","value":"fn cmp_gt_mask_i32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a > b` with lanes as `i32`.","sig":null,"attributes":[{"value":"/ Lanewise `a > b` with lanes as `i32`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9893438,"byte_end":9893479,"line_start":577,"line_end":577,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9893480,"byte_end":9893483,"line_start":578,"line_end":578,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9893484,"byte_end":9893542,"line_start":579,"line_end":579,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9893543,"byte_end":9893550,"line_start":580,"line_end":580,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9893551,"byte_end":9893574,"line_start":581,"line_end":581,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 20, 7, 40]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9893575,"byte_end":9893615,"line_start":582,"line_end":582,"column_start":1,"column_end":41}},{"value":"/ let b = m128i::from([5, 2, 7, 4]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9893616,"byte_end":9893654,"line_start":583,"line_end":583,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = cmp_gt_mask_i32_m128i(a, b).into();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9893655,"byte_end":9893712,"line_start":584,"line_end":584,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [0, -1, 0, -1]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9893713,"byte_end":9893747,"line_start":585,"line_end":585,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9893748,"byte_end":9893755,"line_start":586,"line_end":586,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9893756,"byte_end":9893767,"line_start":587,"line_end":587,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9893768,"byte_end":9893785,"line_start":588,"line_end":588,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":646},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9894294,"byte_end":9894311,"line_start":607,"line_end":607,"column_start":8,"column_end":25},"name":"cmp_gt_mask_m128d","qualname":"::x86_x64::sse2::cmp_gt_mask_m128d","value":"fn cmp_gt_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a > b`.","sig":null,"attributes":[{"value":"/ Lanewise `a > b`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9893951,"byte_end":9893972,"line_start":594,"line_end":594,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9893973,"byte_end":9893976,"line_start":595,"line_end":595,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9893977,"byte_end":9893993,"line_start":596,"line_end":596,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9893994,"byte_end":9894001,"line_start":597,"line_end":597,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9894002,"byte_end":9894025,"line_start":598,"line_end":598,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([2.0, 0.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9894026,"byte_end":9894068,"line_start":599,"line_end":599,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9894069,"byte_end":9894111,"line_start":600,"line_end":600,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_gt_mask_m128d(a, b).to_bits();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9894112,"byte_end":9894158,"line_start":601,"line_end":601,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [u64::MAX, 0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9894159,"byte_end":9894192,"line_start":602,"line_end":602,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9894193,"byte_end":9894200,"line_start":603,"line_end":603,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9894201,"byte_end":9894212,"line_start":604,"line_end":604,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9894213,"byte_end":9894230,"line_start":605,"line_end":605,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":647},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9894771,"byte_end":9894790,"line_start":624,"line_end":624,"column_start":8,"column_end":27},"name":"cmp_gt_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_gt_mask_m128d_s","value":"fn cmp_gt_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a > b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a > b`, other lanes unchanged.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9894389,"byte_end":9894433,"line_start":611,"line_end":611,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9894434,"byte_end":9894437,"line_start":612,"line_end":612,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9894438,"byte_end":9894454,"line_start":613,"line_end":613,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9894455,"byte_end":9894462,"line_start":614,"line_end":614,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9894463,"byte_end":9894486,"line_start":615,"line_end":615,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([2.0, 5.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9894487,"byte_end":9894529,"line_start":616,"line_end":616,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9894530,"byte_end":9894572,"line_start":617,"line_end":617,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_gt_mask_m128d_s(a, b).to_bits();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9894573,"byte_end":9894621,"line_start":618,"line_end":618,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9894622,"byte_end":9894669,"line_start":619,"line_end":619,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9894670,"byte_end":9894677,"line_start":620,"line_end":620,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9894678,"byte_end":9894689,"line_start":621,"line_end":621,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9894690,"byte_end":9894707,"line_start":622,"line_end":622,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":648},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9895219,"byte_end":9895236,"line_start":641,"line_end":641,"column_start":8,"column_end":25},"name":"cmp_le_mask_m128d","qualname":"::x86_x64::sse2::cmp_le_mask_m128d","value":"fn cmp_le_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a <= b`.","sig":null,"attributes":[{"value":"/ Lanewise `a <= b`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9894868,"byte_end":9894890,"line_start":628,"line_end":628,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9894891,"byte_end":9894894,"line_start":629,"line_end":629,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9894895,"byte_end":9894911,"line_start":630,"line_end":630,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9894912,"byte_end":9894919,"line_start":631,"line_end":631,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9894920,"byte_end":9894943,"line_start":632,"line_end":632,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([0.0, 1.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9894944,"byte_end":9894986,"line_start":633,"line_end":633,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9894987,"byte_end":9895029,"line_start":634,"line_end":634,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_le_mask_m128d(a, b).to_bits();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9895030,"byte_end":9895076,"line_start":635,"line_end":635,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [u64::MAX, u64::MAX]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9895077,"byte_end":9895117,"line_start":636,"line_end":636,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9895118,"byte_end":9895125,"line_start":637,"line_end":637,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9895126,"byte_end":9895137,"line_start":638,"line_end":638,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9895138,"byte_end":9895155,"line_start":639,"line_end":639,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":649},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9895697,"byte_end":9895716,"line_start":658,"line_end":658,"column_start":8,"column_end":27},"name":"cmp_le_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_le_mask_m128d_s","value":"fn cmp_le_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a <= b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a <= b`, other lanes unchanged.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9895314,"byte_end":9895359,"line_start":645,"line_end":645,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9895360,"byte_end":9895363,"line_start":646,"line_end":646,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9895364,"byte_end":9895380,"line_start":647,"line_end":647,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9895381,"byte_end":9895388,"line_start":648,"line_end":648,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9895389,"byte_end":9895412,"line_start":649,"line_end":649,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([0.0, 5.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9895413,"byte_end":9895455,"line_start":650,"line_end":650,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9895456,"byte_end":9895498,"line_start":651,"line_end":651,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_le_mask_m128d_s(a, b).to_bits();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9895499,"byte_end":9895547,"line_start":652,"line_end":652,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9895548,"byte_end":9895595,"line_start":653,"line_end":653,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9895596,"byte_end":9895603,"line_start":654,"line_end":654,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9895604,"byte_end":9895615,"line_start":655,"line_end":655,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9895616,"byte_end":9895633,"line_start":656,"line_end":656,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":650},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9896365,"byte_end":9896385,"line_start":678,"line_end":678,"column_start":8,"column_end":28},"name":"cmp_lt_mask_i8_m128i","qualname":"::x86_x64::sse2::cmp_lt_mask_i8_m128i","value":"fn cmp_lt_mask_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a < b` with lanes as `i8`.","sig":null,"attributes":[{"value":"/ Lanewise `a < b` with lanes as `i8`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9895794,"byte_end":9895834,"line_start":662,"line_end":662,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9895835,"byte_end":9895838,"line_start":663,"line_end":663,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9895839,"byte_end":9895897,"line_start":664,"line_end":664,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9895898,"byte_end":9895905,"line_start":665,"line_end":665,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9895906,"byte_end":9895929,"line_start":666,"line_end":666,"column_start":1,"column_end":24}},{"value":"/ let a =","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9895930,"byte_end":9895941,"line_start":667,"line_end":667,"column_start":1,"column_end":12}},{"value":"/   m128i::from([1_i8, 1, 20, 3, 40, 5, 60, 7, 80, 9, 10, 11, 12, 13, 14, 127]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9895942,"byte_end":9896024,"line_start":668,"line_end":668,"column_start":1,"column_end":83}},{"value":"/ let b = m128i::from([","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9896025,"byte_end":9896050,"line_start":669,"line_end":669,"column_start":1,"column_end":26}},{"value":"/   0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 120,","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9896051,"byte_end":9896121,"line_start":670,"line_end":670,"column_start":1,"column_end":71}},{"value":"/ ]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9896122,"byte_end":9896129,"line_start":671,"line_end":671,"column_start":1,"column_end":8}},{"value":"/ let c: [i8; 16] = cmp_lt_mask_i8_m128i(a, b).into();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9896130,"byte_end":9896186,"line_start":672,"line_end":672,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [0, -1, 0, -1, 0, -1, 0, -1, 0, -1, 0, -1, -1, 0, -1, 0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9896187,"byte_end":9896263,"line_start":673,"line_end":673,"column_start":1,"column_end":77}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9896264,"byte_end":9896271,"line_start":674,"line_end":674,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9896272,"byte_end":9896283,"line_start":675,"line_end":675,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9896284,"byte_end":9896301,"line_start":676,"line_end":676,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":651},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9896930,"byte_end":9896951,"line_start":695,"line_end":695,"column_start":8,"column_end":29},"name":"cmp_lt_mask_i16_m128i","qualname":"::x86_x64::sse2::cmp_lt_mask_i16_m128i","value":"fn cmp_lt_mask_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a < b` with lanes as `i16`.","sig":null,"attributes":[{"value":"/ Lanewise `a < b` with lanes as `i16`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9896465,"byte_end":9896506,"line_start":682,"line_end":682,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9896507,"byte_end":9896510,"line_start":683,"line_end":683,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9896511,"byte_end":9896569,"line_start":684,"line_end":684,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9896570,"byte_end":9896577,"line_start":685,"line_end":685,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9896578,"byte_end":9896601,"line_start":686,"line_end":686,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 20, 3, 40, -1, -2, -3, 0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9896602,"byte_end":9896661,"line_start":687,"line_end":687,"column_start":1,"column_end":60}},{"value":"/ let b = m128i::from([5_i16, 2, 7, 4, -15, -26, -37, -4]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9896662,"byte_end":9896723,"line_start":688,"line_end":688,"column_start":1,"column_end":62}},{"value":"/ let c: [i16; 8] = cmp_lt_mask_i16_m128i(a, b).into();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9896724,"byte_end":9896781,"line_start":689,"line_end":689,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [-1, 0, -1, 0, 0, 0, 0, 0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9896782,"byte_end":9896828,"line_start":690,"line_end":690,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9896829,"byte_end":9896836,"line_start":691,"line_end":691,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9896837,"byte_end":9896848,"line_start":692,"line_end":692,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9896849,"byte_end":9896866,"line_start":693,"line_end":693,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":652},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9897442,"byte_end":9897463,"line_start":712,"line_end":712,"column_start":8,"column_end":29},"name":"cmp_lt_mask_i32_m128i","qualname":"::x86_x64::sse2::cmp_lt_mask_i32_m128i","value":"fn cmp_lt_mask_i32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a < b` with lanes as `i32`.","sig":null,"attributes":[{"value":"/ Lanewise `a < b` with lanes as `i32`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9897032,"byte_end":9897073,"line_start":699,"line_end":699,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9897074,"byte_end":9897077,"line_start":700,"line_end":700,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9897078,"byte_end":9897136,"line_start":701,"line_end":701,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9897137,"byte_end":9897144,"line_start":702,"line_end":702,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9897145,"byte_end":9897168,"line_start":703,"line_end":703,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 20, 7, 40]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9897169,"byte_end":9897209,"line_start":704,"line_end":704,"column_start":1,"column_end":41}},{"value":"/ let b = m128i::from([5, 2, 7, 4]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9897210,"byte_end":9897248,"line_start":705,"line_end":705,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = cmp_lt_mask_i32_m128i(a, b).into();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9897249,"byte_end":9897306,"line_start":706,"line_end":706,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [-1, 0, 0, 0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9897307,"byte_end":9897340,"line_start":707,"line_end":707,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9897341,"byte_end":9897348,"line_start":708,"line_end":708,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9897349,"byte_end":9897360,"line_start":709,"line_end":709,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9897361,"byte_end":9897378,"line_start":710,"line_end":710,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":653},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9897887,"byte_end":9897904,"line_start":729,"line_end":729,"column_start":8,"column_end":25},"name":"cmp_lt_mask_m128d","qualname":"::x86_x64::sse2::cmp_lt_mask_m128d","value":"fn cmp_lt_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a < b`.","sig":null,"attributes":[{"value":"/ Lanewise `a < b`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9897544,"byte_end":9897565,"line_start":716,"line_end":716,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9897566,"byte_end":9897569,"line_start":717,"line_end":717,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9897570,"byte_end":9897586,"line_start":718,"line_end":718,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9897587,"byte_end":9897594,"line_start":719,"line_end":719,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9897595,"byte_end":9897618,"line_start":720,"line_end":720,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([0.0, 7.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9897619,"byte_end":9897661,"line_start":721,"line_end":721,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9897662,"byte_end":9897704,"line_start":722,"line_end":722,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_lt_mask_m128d(a, b).to_bits();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9897705,"byte_end":9897751,"line_start":723,"line_end":723,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [u64::MAX, 0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9897752,"byte_end":9897785,"line_start":724,"line_end":724,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9897786,"byte_end":9897793,"line_start":725,"line_end":725,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9897794,"byte_end":9897805,"line_start":726,"line_end":726,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9897806,"byte_end":9897823,"line_start":727,"line_end":727,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":654},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9898363,"byte_end":9898382,"line_start":746,"line_end":746,"column_start":8,"column_end":27},"name":"cmp_lt_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_lt_mask_m128d_s","value":"fn cmp_lt_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a < b`, other lane unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a < b`, other lane unchanged.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9897982,"byte_end":9898025,"line_start":733,"line_end":733,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9898026,"byte_end":9898029,"line_start":734,"line_end":734,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9898030,"byte_end":9898046,"line_start":735,"line_end":735,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9898047,"byte_end":9898054,"line_start":736,"line_end":736,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9898055,"byte_end":9898078,"line_start":737,"line_end":737,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([0.0, 5.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9898079,"byte_end":9898121,"line_start":738,"line_end":738,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9898122,"byte_end":9898164,"line_start":739,"line_end":739,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_lt_mask_m128d_s(a, b).to_bits();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9898165,"byte_end":9898213,"line_start":740,"line_end":740,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9898214,"byte_end":9898261,"line_start":741,"line_end":741,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9898262,"byte_end":9898269,"line_start":742,"line_end":742,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9898270,"byte_end":9898281,"line_start":743,"line_end":743,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9898282,"byte_end":9898299,"line_start":744,"line_end":744,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":655},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9898805,"byte_end":9898823,"line_start":763,"line_end":763,"column_start":8,"column_end":26},"name":"cmp_neq_mask_m128d","qualname":"::x86_x64::sse2::cmp_neq_mask_m128d","value":"fn cmp_neq_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a != b`.","sig":null,"attributes":[{"value":"/ Lanewise `a != b`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9898460,"byte_end":9898482,"line_start":750,"line_end":750,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9898483,"byte_end":9898486,"line_start":751,"line_end":751,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9898487,"byte_end":9898503,"line_start":752,"line_end":752,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9898504,"byte_end":9898511,"line_start":753,"line_end":753,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9898512,"byte_end":9898535,"line_start":754,"line_end":754,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([3.0, 1.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9898536,"byte_end":9898578,"line_start":755,"line_end":755,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9898579,"byte_end":9898621,"line_start":756,"line_end":756,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_neq_mask_m128d(a, b).to_bits();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9898622,"byte_end":9898669,"line_start":757,"line_end":757,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [u64::MAX, 0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9898670,"byte_end":9898703,"line_start":758,"line_end":758,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9898704,"byte_end":9898711,"line_start":759,"line_end":759,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9898712,"byte_end":9898723,"line_start":760,"line_end":760,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9898724,"byte_end":9898741,"line_start":761,"line_end":761,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":656},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9899285,"byte_end":9899305,"line_start":780,"line_end":780,"column_start":8,"column_end":28},"name":"cmp_neq_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_neq_mask_m128d_s","value":"fn cmp_neq_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a != b`, other lane unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a != b`, other lane unchanged.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9898902,"byte_end":9898946,"line_start":767,"line_end":767,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9898947,"byte_end":9898950,"line_start":768,"line_end":768,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9898951,"byte_end":9898967,"line_start":769,"line_end":769,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9898968,"byte_end":9898975,"line_start":770,"line_end":770,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9898976,"byte_end":9898999,"line_start":771,"line_end":771,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([2.0, 5.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9899000,"byte_end":9899042,"line_start":772,"line_end":772,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9899043,"byte_end":9899085,"line_start":773,"line_end":773,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_neq_mask_m128d_s(a, b).to_bits();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9899086,"byte_end":9899135,"line_start":774,"line_end":774,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9899136,"byte_end":9899183,"line_start":775,"line_end":775,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9899184,"byte_end":9899191,"line_start":776,"line_end":776,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9899192,"byte_end":9899203,"line_start":777,"line_end":777,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9899204,"byte_end":9899221,"line_start":778,"line_end":778,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":657},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9899732,"byte_end":9899750,"line_start":797,"line_end":797,"column_start":8,"column_end":26},"name":"cmp_nge_mask_m128d","qualname":"::x86_x64::sse2::cmp_nge_mask_m128d","value":"fn cmp_nge_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `!(a >= b)`.","sig":null,"attributes":[{"value":"/ Lanewise `!(a >= b)`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9899384,"byte_end":9899409,"line_start":784,"line_end":784,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9899410,"byte_end":9899413,"line_start":785,"line_end":785,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9899414,"byte_end":9899430,"line_start":786,"line_end":786,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9899431,"byte_end":9899438,"line_start":787,"line_end":787,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9899439,"byte_end":9899462,"line_start":788,"line_end":788,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([3.0, 0.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9899463,"byte_end":9899505,"line_start":789,"line_end":789,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9899506,"byte_end":9899548,"line_start":790,"line_end":790,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_nge_mask_m128d(a, b).to_bits();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9899549,"byte_end":9899596,"line_start":791,"line_end":791,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [0, u64::MAX]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9899597,"byte_end":9899630,"line_start":792,"line_end":792,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9899631,"byte_end":9899638,"line_start":793,"line_end":793,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9899639,"byte_end":9899650,"line_start":794,"line_end":794,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9899651,"byte_end":9899668,"line_start":795,"line_end":795,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":658},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9900208,"byte_end":9900228,"line_start":814,"line_end":814,"column_start":8,"column_end":28},"name":"cmp_nge_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_nge_mask_m128d_s","value":"fn cmp_nge_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `!(a >= b)`, other lane unchanged.","sig":null,"attributes":[{"value":"/ Low lane `!(a >= b)`, other lane unchanged.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9899829,"byte_end":9899876,"line_start":801,"line_end":801,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9899877,"byte_end":9899880,"line_start":802,"line_end":802,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9899881,"byte_end":9899897,"line_start":803,"line_end":803,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9899898,"byte_end":9899905,"line_start":804,"line_end":804,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9899906,"byte_end":9899929,"line_start":805,"line_end":805,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([2.0, 5.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9899930,"byte_end":9899972,"line_start":806,"line_end":806,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9899973,"byte_end":9900015,"line_start":807,"line_end":807,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_nge_mask_m128d_s(a, b).to_bits();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9900016,"byte_end":9900065,"line_start":808,"line_end":808,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [0, 5_f64.to_bits()]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9900066,"byte_end":9900106,"line_start":809,"line_end":809,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9900107,"byte_end":9900114,"line_start":810,"line_end":810,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9900115,"byte_end":9900126,"line_start":811,"line_end":811,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9900127,"byte_end":9900144,"line_start":812,"line_end":812,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":659},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9900654,"byte_end":9900672,"line_start":831,"line_end":831,"column_start":8,"column_end":26},"name":"cmp_ngt_mask_m128d","qualname":"::x86_x64::sse2::cmp_ngt_mask_m128d","value":"fn cmp_ngt_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `!(a > b)`.","sig":null,"attributes":[{"value":"/ Lanewise `!(a > b)`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9900307,"byte_end":9900331,"line_start":818,"line_end":818,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9900332,"byte_end":9900335,"line_start":819,"line_end":819,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9900336,"byte_end":9900352,"line_start":820,"line_end":820,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9900353,"byte_end":9900360,"line_start":821,"line_end":821,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9900361,"byte_end":9900384,"line_start":822,"line_end":822,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([3.0, 0.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9900385,"byte_end":9900427,"line_start":823,"line_end":823,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9900428,"byte_end":9900470,"line_start":824,"line_end":824,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_ngt_mask_m128d(a, b).to_bits();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9900471,"byte_end":9900518,"line_start":825,"line_end":825,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [0, u64::MAX]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9900519,"byte_end":9900552,"line_start":826,"line_end":826,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9900553,"byte_end":9900560,"line_start":827,"line_end":827,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9900561,"byte_end":9900572,"line_start":828,"line_end":828,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9900573,"byte_end":9900590,"line_start":829,"line_end":829,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":660},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9901129,"byte_end":9901149,"line_start":848,"line_end":848,"column_start":8,"column_end":28},"name":"cmp_ngt_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_ngt_mask_m128d_s","value":"fn cmp_ngt_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `!(a > b)`, other lane unchanged.","sig":null,"attributes":[{"value":"/ Low lane `!(a > b)`, other lane unchanged.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9900751,"byte_end":9900797,"line_start":835,"line_end":835,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9900798,"byte_end":9900801,"line_start":836,"line_end":836,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9900802,"byte_end":9900818,"line_start":837,"line_end":837,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9900819,"byte_end":9900826,"line_start":838,"line_end":838,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9900827,"byte_end":9900850,"line_start":839,"line_end":839,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([2.0, 5.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9900851,"byte_end":9900893,"line_start":840,"line_end":840,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9900894,"byte_end":9900936,"line_start":841,"line_end":841,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_ngt_mask_m128d_s(a, b).to_bits();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9900937,"byte_end":9900986,"line_start":842,"line_end":842,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [0, 5_f64.to_bits()]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9900987,"byte_end":9901027,"line_start":843,"line_end":843,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9901028,"byte_end":9901035,"line_start":844,"line_end":844,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9901036,"byte_end":9901047,"line_start":845,"line_end":845,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9901048,"byte_end":9901065,"line_start":846,"line_end":846,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":661},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9901576,"byte_end":9901594,"line_start":865,"line_end":865,"column_start":8,"column_end":26},"name":"cmp_nle_mask_m128d","qualname":"::x86_x64::sse2::cmp_nle_mask_m128d","value":"fn cmp_nle_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `!(a <= b)`.","sig":null,"attributes":[{"value":"/ Lanewise `!(a <= b)`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9901228,"byte_end":9901253,"line_start":852,"line_end":852,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9901254,"byte_end":9901257,"line_start":853,"line_end":853,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9901258,"byte_end":9901274,"line_start":854,"line_end":854,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9901275,"byte_end":9901282,"line_start":855,"line_end":855,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9901283,"byte_end":9901306,"line_start":856,"line_end":856,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([3.0, 0.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9901307,"byte_end":9901349,"line_start":857,"line_end":857,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9901350,"byte_end":9901392,"line_start":858,"line_end":858,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_nle_mask_m128d(a, b).to_bits();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9901393,"byte_end":9901440,"line_start":859,"line_end":859,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [u64::MAX, 0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9901441,"byte_end":9901474,"line_start":860,"line_end":860,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9901475,"byte_end":9901482,"line_start":861,"line_end":861,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9901483,"byte_end":9901494,"line_start":862,"line_end":862,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9901495,"byte_end":9901512,"line_start":863,"line_end":863,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":662},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9902059,"byte_end":9902079,"line_start":882,"line_end":882,"column_start":8,"column_end":28},"name":"cmp_nle_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_nle_mask_m128d_s","value":"fn cmp_nle_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `!(a <= b)`, other lane unchanged.","sig":null,"attributes":[{"value":"/ Low lane `!(a <= b)`, other lane unchanged.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9901673,"byte_end":9901720,"line_start":869,"line_end":869,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9901721,"byte_end":9901724,"line_start":870,"line_end":870,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9901725,"byte_end":9901741,"line_start":871,"line_end":871,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9901742,"byte_end":9901749,"line_start":872,"line_end":872,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9901750,"byte_end":9901773,"line_start":873,"line_end":873,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([2.0, 5.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9901774,"byte_end":9901816,"line_start":874,"line_end":874,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9901817,"byte_end":9901859,"line_start":875,"line_end":875,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_nle_mask_m128d_s(a, b).to_bits();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9901860,"byte_end":9901909,"line_start":876,"line_end":876,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9901910,"byte_end":9901957,"line_start":877,"line_end":877,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9901958,"byte_end":9901965,"line_start":878,"line_end":878,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9901966,"byte_end":9901977,"line_start":879,"line_end":879,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9901978,"byte_end":9901995,"line_start":880,"line_end":880,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":663},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9902505,"byte_end":9902523,"line_start":899,"line_end":899,"column_start":8,"column_end":26},"name":"cmp_nlt_mask_m128d","qualname":"::x86_x64::sse2::cmp_nlt_mask_m128d","value":"fn cmp_nlt_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `!(a < b)`.","sig":null,"attributes":[{"value":"/ Lanewise `!(a < b)`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9902158,"byte_end":9902182,"line_start":886,"line_end":886,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9902183,"byte_end":9902186,"line_start":887,"line_end":887,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9902187,"byte_end":9902203,"line_start":888,"line_end":888,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9902204,"byte_end":9902211,"line_start":889,"line_end":889,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9902212,"byte_end":9902235,"line_start":890,"line_end":890,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([3.0, 0.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9902236,"byte_end":9902278,"line_start":891,"line_end":891,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9902279,"byte_end":9902321,"line_start":892,"line_end":892,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_nlt_mask_m128d(a, b).to_bits();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9902322,"byte_end":9902369,"line_start":893,"line_end":893,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [u64::MAX, 0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9902370,"byte_end":9902403,"line_start":894,"line_end":894,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9902404,"byte_end":9902411,"line_start":895,"line_end":895,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9902412,"byte_end":9902423,"line_start":896,"line_end":896,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9902424,"byte_end":9902441,"line_start":897,"line_end":897,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":664},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9902987,"byte_end":9903007,"line_start":916,"line_end":916,"column_start":8,"column_end":28},"name":"cmp_nlt_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_nlt_mask_m128d_s","value":"fn cmp_nlt_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `!(a < b)`, other lane unchanged.","sig":null,"attributes":[{"value":"/ Low lane `!(a < b)`, other lane unchanged.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9902602,"byte_end":9902648,"line_start":903,"line_end":903,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9902649,"byte_end":9902652,"line_start":904,"line_end":904,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9902653,"byte_end":9902669,"line_start":905,"line_end":905,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9902670,"byte_end":9902677,"line_start":906,"line_end":906,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9902678,"byte_end":9902701,"line_start":907,"line_end":907,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([2.0, 5.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9902702,"byte_end":9902744,"line_start":908,"line_end":908,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9902745,"byte_end":9902787,"line_start":909,"line_end":909,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_nlt_mask_m128d_s(a, b).to_bits();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9902788,"byte_end":9902837,"line_start":910,"line_end":910,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9902838,"byte_end":9902885,"line_start":911,"line_end":911,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9902886,"byte_end":9902893,"line_start":912,"line_end":912,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9902894,"byte_end":9902905,"line_start":913,"line_end":913,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9902906,"byte_end":9902923,"line_start":914,"line_end":914,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":665},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9903464,"byte_end":9903487,"line_start":933,"line_end":933,"column_start":8,"column_end":31},"name":"cmp_ordinary_mask_m128d","qualname":"::x86_x64::sse2::cmp_ordinary_mask_m128d","value":"fn cmp_ordinary_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `(!a.is_nan()) & (!b.is_nan())`.","sig":null,"attributes":[{"value":"/ Lanewise `(!a.is_nan()) & (!b.is_nan())`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9903086,"byte_end":9903131,"line_start":920,"line_end":920,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9903132,"byte_end":9903135,"line_start":921,"line_end":921,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9903136,"byte_end":9903152,"line_start":922,"line_end":922,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9903153,"byte_end":9903160,"line_start":923,"line_end":923,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9903161,"byte_end":9903184,"line_start":924,"line_end":924,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([3.0, f64::NAN]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9903185,"byte_end":9903232,"line_start":925,"line_end":925,"column_start":1,"column_end":48}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9903233,"byte_end":9903275,"line_start":926,"line_end":926,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_ordinary_mask_m128d(a, b).to_bits();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9903276,"byte_end":9903328,"line_start":927,"line_end":927,"column_start":1,"column_end":53}},{"value":"/ assert_eq!(c, [u64::MAX, 0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9903329,"byte_end":9903362,"line_start":928,"line_end":928,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9903363,"byte_end":9903370,"line_start":929,"line_end":929,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9903371,"byte_end":9903382,"line_start":930,"line_end":930,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9903383,"byte_end":9903400,"line_start":931,"line_end":931,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":666},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9903977,"byte_end":9904002,"line_start":950,"line_end":950,"column_start":8,"column_end":33},"name":"cmp_ordinary_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_ordinary_mask_m128d_s","value":"fn cmp_ordinary_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `(!a.is_nan()) & (!b.is_nan())`, other lane unchanged.","sig":null,"attributes":[{"value":"/ Low lane `(!a.is_nan()) & (!b.is_nan())`, other lane unchanged.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9903566,"byte_end":9903633,"line_start":937,"line_end":937,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9903634,"byte_end":9903637,"line_start":938,"line_end":938,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9903638,"byte_end":9903654,"line_start":939,"line_end":939,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9903655,"byte_end":9903662,"line_start":940,"line_end":940,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9903663,"byte_end":9903686,"line_start":941,"line_end":941,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([2.0, 5.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9903687,"byte_end":9903729,"line_start":942,"line_end":942,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9903730,"byte_end":9903772,"line_start":943,"line_end":943,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_ordinary_mask_m128d_s(a, b).to_bits();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9903773,"byte_end":9903827,"line_start":944,"line_end":944,"column_start":1,"column_end":55}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9903828,"byte_end":9903875,"line_start":945,"line_end":945,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9903876,"byte_end":9903883,"line_start":946,"line_end":946,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9903884,"byte_end":9903895,"line_start":947,"line_end":947,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9903896,"byte_end":9903913,"line_start":948,"line_end":948,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":667},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9904450,"byte_end":9904470,"line_start":967,"line_end":967,"column_start":8,"column_end":28},"name":"cmp_unord_mask_m128d","qualname":"::x86_x64::sse2::cmp_unord_mask_m128d","value":"fn cmp_unord_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a.is_nan() | b.is_nan()`.","sig":null,"attributes":[{"value":"/ Lanewise `a.is_nan() | b.is_nan()`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9904081,"byte_end":9904120,"line_start":954,"line_end":954,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9904121,"byte_end":9904124,"line_start":955,"line_end":955,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9904125,"byte_end":9904141,"line_start":956,"line_end":956,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9904142,"byte_end":9904149,"line_start":957,"line_end":957,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9904150,"byte_end":9904173,"line_start":958,"line_end":958,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([f64::NAN, 0.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9904174,"byte_end":9904221,"line_start":959,"line_end":959,"column_start":1,"column_end":48}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9904222,"byte_end":9904264,"line_start":960,"line_end":960,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_unord_mask_m128d(a, b).to_bits();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9904265,"byte_end":9904314,"line_start":961,"line_end":961,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [u64::MAX, 0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9904315,"byte_end":9904348,"line_start":962,"line_end":962,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9904349,"byte_end":9904356,"line_start":963,"line_end":963,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9904357,"byte_end":9904368,"line_start":964,"line_end":964,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9904369,"byte_end":9904386,"line_start":965,"line_end":965,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":668},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9904958,"byte_end":9904980,"line_start":984,"line_end":984,"column_start":8,"column_end":30},"name":"cmp_unord_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_unord_mask_m128d_s","value":"fn cmp_unord_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a.is_nan() | b.is_nan()`, other lane unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a.is_nan() | b.is_nan()`, other lane unchanged.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9904551,"byte_end":9904612,"line_start":971,"line_end":971,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9904613,"byte_end":9904616,"line_start":972,"line_end":972,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9904617,"byte_end":9904633,"line_start":973,"line_end":973,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9904634,"byte_end":9904641,"line_start":974,"line_end":974,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9904642,"byte_end":9904665,"line_start":975,"line_end":975,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([f64::NAN, 5.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9904666,"byte_end":9904713,"line_start":976,"line_end":976,"column_start":1,"column_end":48}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9904714,"byte_end":9904756,"line_start":977,"line_end":977,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_unord_mask_m128d_s(a, b).to_bits();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9904757,"byte_end":9904808,"line_start":978,"line_end":978,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9904809,"byte_end":9904856,"line_start":979,"line_end":979,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9904857,"byte_end":9904864,"line_start":980,"line_end":980,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9904865,"byte_end":9904876,"line_start":981,"line_end":981,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9904877,"byte_end":9904894,"line_start":982,"line_end":982,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":669},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9905380,"byte_end":9905398,"line_start":1000,"line_end":1000,"column_start":8,"column_end":26},"name":"cmp_eq_i32_m128d_s","qualname":"::x86_x64::sse2::cmp_eq_i32_m128d_s","value":"fn cmp_eq_i32_m128d_s(m128d, m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane `f64` equal to.","sig":null,"attributes":[{"value":"/ Low lane `f64` equal to.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9905061,"byte_end":9905089,"line_start":988,"line_end":988,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9905090,"byte_end":9905093,"line_start":989,"line_end":989,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9905094,"byte_end":9905111,"line_start":990,"line_end":990,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9905112,"byte_end":9905119,"line_start":991,"line_end":991,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9905120,"byte_end":9905143,"line_start":992,"line_end":992,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 5.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9905144,"byte_end":9905186,"line_start":993,"line_end":993,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9905187,"byte_end":9905229,"line_start":994,"line_end":994,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(1_i32, cmp_eq_i32_m128d_s(a, b));","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9905230,"byte_end":9905278,"line_start":995,"line_end":995,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9905279,"byte_end":9905286,"line_start":996,"line_end":996,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9905287,"byte_end":9905298,"line_start":997,"line_end":997,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9905299,"byte_end":9905316,"line_start":998,"line_end":998,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":670},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9905803,"byte_end":9905821,"line_start":1016,"line_end":1016,"column_start":8,"column_end":26},"name":"cmp_ge_i32_m128d_s","qualname":"::x86_x64::sse2::cmp_ge_i32_m128d_s","value":"fn cmp_ge_i32_m128d_s(m128d, m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane `f64` greater than or equal to.","sig":null,"attributes":[{"value":"/ Low lane `f64` greater than or equal to.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9905468,"byte_end":9905512,"line_start":1004,"line_end":1004,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9905513,"byte_end":9905516,"line_start":1005,"line_end":1005,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9905517,"byte_end":9905534,"line_start":1006,"line_end":1006,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9905535,"byte_end":9905542,"line_start":1007,"line_end":1007,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9905543,"byte_end":9905566,"line_start":1008,"line_end":1008,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 5.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9905567,"byte_end":9905609,"line_start":1009,"line_end":1009,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9905610,"byte_end":9905652,"line_start":1010,"line_end":1010,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(1_i32, cmp_ge_i32_m128d_s(a, b));","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9905653,"byte_end":9905701,"line_start":1011,"line_end":1011,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9905702,"byte_end":9905709,"line_start":1012,"line_end":1012,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9905710,"byte_end":9905721,"line_start":1013,"line_end":1013,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9905722,"byte_end":9905739,"line_start":1014,"line_end":1014,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":671},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9906214,"byte_end":9906232,"line_start":1032,"line_end":1032,"column_start":8,"column_end":26},"name":"cmp_gt_i32_m128d_s","qualname":"::x86_x64::sse2::cmp_gt_i32_m128d_s","value":"fn cmp_gt_i32_m128d_s(m128d, m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane `f64` greater than.","sig":null,"attributes":[{"value":"/ Low lane `f64` greater than.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9905891,"byte_end":9905923,"line_start":1020,"line_end":1020,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9905924,"byte_end":9905927,"line_start":1021,"line_end":1021,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9905928,"byte_end":9905945,"line_start":1022,"line_end":1022,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9905946,"byte_end":9905953,"line_start":1023,"line_end":1023,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9905954,"byte_end":9905977,"line_start":1024,"line_end":1024,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 5.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9905978,"byte_end":9906020,"line_start":1025,"line_end":1025,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9906021,"byte_end":9906063,"line_start":1026,"line_end":1026,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(1_i32, cmp_ge_i32_m128d_s(a, b));","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9906064,"byte_end":9906112,"line_start":1027,"line_end":1027,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9906113,"byte_end":9906120,"line_start":1028,"line_end":1028,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9906121,"byte_end":9906132,"line_start":1029,"line_end":1029,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9906133,"byte_end":9906150,"line_start":1030,"line_end":1030,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":672},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9906634,"byte_end":9906652,"line_start":1048,"line_end":1048,"column_start":8,"column_end":26},"name":"cmp_le_i32_m128d_s","qualname":"::x86_x64::sse2::cmp_le_i32_m128d_s","value":"fn cmp_le_i32_m128d_s(m128d, m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane `f64` less than or equal to.","sig":null,"attributes":[{"value":"/ Low lane `f64` less than or equal to.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9906302,"byte_end":9906343,"line_start":1036,"line_end":1036,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9906344,"byte_end":9906347,"line_start":1037,"line_end":1037,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9906348,"byte_end":9906365,"line_start":1038,"line_end":1038,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9906366,"byte_end":9906373,"line_start":1039,"line_end":1039,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9906374,"byte_end":9906397,"line_start":1040,"line_end":1040,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 5.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9906398,"byte_end":9906440,"line_start":1041,"line_end":1041,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9906441,"byte_end":9906483,"line_start":1042,"line_end":1042,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(1_i32, cmp_le_i32_m128d_s(a, b));","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9906484,"byte_end":9906532,"line_start":1043,"line_end":1043,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9906533,"byte_end":9906540,"line_start":1044,"line_end":1044,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9906541,"byte_end":9906552,"line_start":1045,"line_end":1045,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9906553,"byte_end":9906570,"line_start":1046,"line_end":1046,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":673},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9907042,"byte_end":9907060,"line_start":1064,"line_end":1064,"column_start":8,"column_end":26},"name":"cmp_lt_i32_m128d_s","qualname":"::x86_x64::sse2::cmp_lt_i32_m128d_s","value":"fn cmp_lt_i32_m128d_s(m128d, m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane `f64` less than.","sig":null,"attributes":[{"value":"/ Low lane `f64` less than.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9906722,"byte_end":9906751,"line_start":1052,"line_end":1052,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9906752,"byte_end":9906755,"line_start":1053,"line_end":1053,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9906756,"byte_end":9906773,"line_start":1054,"line_end":1054,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9906774,"byte_end":9906781,"line_start":1055,"line_end":1055,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9906782,"byte_end":9906805,"line_start":1056,"line_end":1056,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([0.0, 5.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9906806,"byte_end":9906848,"line_start":1057,"line_end":1057,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9906849,"byte_end":9906891,"line_start":1058,"line_end":1058,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(1_i32, cmp_lt_i32_m128d_s(a, b));","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9906892,"byte_end":9906940,"line_start":1059,"line_end":1059,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9906941,"byte_end":9906948,"line_start":1060,"line_end":1060,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9906949,"byte_end":9906960,"line_start":1061,"line_end":1061,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9906961,"byte_end":9906978,"line_start":1062,"line_end":1062,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":674},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9907451,"byte_end":9907470,"line_start":1080,"line_end":1080,"column_start":8,"column_end":27},"name":"cmp_neq_i32_m128d_s","qualname":"::x86_x64::sse2::cmp_neq_i32_m128d_s","value":"fn cmp_neq_i32_m128d_s(m128d, m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane `f64` less than.","sig":null,"attributes":[{"value":"/ Low lane `f64` less than.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9907130,"byte_end":9907159,"line_start":1068,"line_end":1068,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9907160,"byte_end":9907163,"line_start":1069,"line_end":1069,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9907164,"byte_end":9907181,"line_start":1070,"line_end":1070,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9907182,"byte_end":9907189,"line_start":1071,"line_end":1071,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9907190,"byte_end":9907213,"line_start":1072,"line_end":1072,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([0.0, 5.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9907214,"byte_end":9907256,"line_start":1073,"line_end":1073,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9907257,"byte_end":9907299,"line_start":1074,"line_end":1074,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(1_i32, cmp_neq_i32_m128d_s(a, b));","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9907300,"byte_end":9907349,"line_start":1075,"line_end":1075,"column_start":1,"column_end":50}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9907350,"byte_end":9907357,"line_start":1076,"line_end":1076,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9907358,"byte_end":9907369,"line_start":1077,"line_end":1077,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9907370,"byte_end":9907387,"line_start":1078,"line_end":1078,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":675},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9907991,"byte_end":9908029,"line_start":1097,"line_end":1097,"column_start":8,"column_end":46},"name":"convert_to_m128d_from_lower2_i32_m128i","qualname":"::x86_x64::sse2::convert_to_m128d_from_lower2_i32_m128i","value":"fn convert_to_m128d_from_lower2_i32_m128i(m128i) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Rounds the lower two `i32` lanes to two `f64` lanes.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let b = convert_to_m128d_from_lower2_i32_m128i(a);\n let c = m128d::from_array([1.0, 2.0]);\n assert_eq!(b.to_bits(), c.to_bits());\n ```\n * **Intrinsic:** [`_mm_cvtepi32_pd`]\n * **Assembly:** `cvtdq2pd xmm, xmm`\n","sig":null,"attributes":[{"value":"/ Rounds the lower two `i32` lanes to two `f64` lanes.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9907541,"byte_end":9907597,"line_start":1084,"line_end":1084,"column_start":1,"column_end":57}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9907598,"byte_end":9907605,"line_start":1085,"line_end":1085,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9907606,"byte_end":9907629,"line_start":1086,"line_end":1086,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9907630,"byte_end":9907668,"line_start":1087,"line_end":1087,"column_start":1,"column_end":39}},{"value":"/ let b = convert_to_m128d_from_lower2_i32_m128i(a);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9907669,"byte_end":9907723,"line_start":1088,"line_end":1088,"column_start":1,"column_end":55}},{"value":"/ let c = m128d::from_array([1.0, 2.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9907724,"byte_end":9907766,"line_start":1089,"line_end":1089,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(b.to_bits(), c.to_bits());","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9907767,"byte_end":9907808,"line_start":1090,"line_end":1090,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9907809,"byte_end":9907816,"line_start":1091,"line_end":1091,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtepi32_pd`]","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9907817,"byte_end":9907857,"line_start":1092,"line_end":1092,"column_start":1,"column_end":41}},{"value":"/ * **Assembly:** `cvtdq2pd xmm, xmm`","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9907858,"byte_end":9907897,"line_start":1093,"line_end":1093,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9907898,"byte_end":9907909,"line_start":1094,"line_end":1094,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9907910,"byte_end":9907927,"line_start":1095,"line_end":1095,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":676},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9908542,"byte_end":9908572,"line_start":1114,"line_end":1114,"column_start":8,"column_end":38},"name":"convert_to_m128_from_i32_m128i","qualname":"::x86_x64::sse2::convert_to_m128_from_i32_m128i","value":"fn convert_to_m128_from_i32_m128i(m128i) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Rounds the four `i32` lanes to four `f32` lanes.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let b = convert_to_m128_from_i32_m128i(a);\n let c = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n assert_eq!(b.to_bits(), c.to_bits());\n ```\n * **Intrinsic:** [`_mm_cvtepi32_ps`]\n * **Assembly:** `cvtdq2ps xmm, xmm`\n","sig":null,"attributes":[{"value":"/ Rounds the four `i32` lanes to four `f32` lanes.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9908095,"byte_end":9908147,"line_start":1101,"line_end":1101,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9908148,"byte_end":9908155,"line_start":1102,"line_end":1102,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9908156,"byte_end":9908179,"line_start":1103,"line_end":1103,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9908180,"byte_end":9908218,"line_start":1104,"line_end":1104,"column_start":1,"column_end":39}},{"value":"/ let b = convert_to_m128_from_i32_m128i(a);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9908219,"byte_end":9908265,"line_start":1105,"line_end":1105,"column_start":1,"column_end":47}},{"value":"/ let c = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9908266,"byte_end":9908317,"line_start":1106,"line_end":1106,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(b.to_bits(), c.to_bits());","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9908318,"byte_end":9908359,"line_start":1107,"line_end":1107,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9908360,"byte_end":9908367,"line_start":1108,"line_end":1108,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtepi32_ps`]","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9908368,"byte_end":9908408,"line_start":1109,"line_end":1109,"column_start":1,"column_end":41}},{"value":"/ * **Assembly:** `cvtdq2ps xmm, xmm`","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9908409,"byte_end":9908448,"line_start":1110,"line_end":1110,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9908449,"byte_end":9908460,"line_start":1111,"line_end":1111,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9908461,"byte_end":9908478,"line_start":1112,"line_end":1112,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":677},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9909065,"byte_end":9909096,"line_start":1131,"line_end":1131,"column_start":8,"column_end":39},"name":"convert_to_i32_m128i_from_m128d","qualname":"::x86_x64::sse2::convert_to_i32_m128i_from_m128d","value":"fn convert_to_i32_m128i_from_m128d(m128d) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Rounds the two `f64` lanes to the low two `i32` lanes.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.5]);\n let b = convert_to_i32_m128i_from_m128d(a);\n let c: [i32; 4] = b.into();\n assert_eq!(c, [1, 2, 0, 0]);\n ```\n * **Intrinsic:** [`_mm_cvtpd_epi32`]\n * **Assembly:** `cvtpd2dq xmm, xmm`\n","sig":null,"attributes":[{"value":"/ Rounds the two `f64` lanes to the low two `i32` lanes.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9908636,"byte_end":9908694,"line_start":1118,"line_end":1118,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9908695,"byte_end":9908702,"line_start":1119,"line_end":1119,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9908703,"byte_end":9908726,"line_start":1120,"line_end":1120,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.5]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9908727,"byte_end":9908769,"line_start":1121,"line_end":1121,"column_start":1,"column_end":43}},{"value":"/ let b = convert_to_i32_m128i_from_m128d(a);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9908770,"byte_end":9908817,"line_start":1122,"line_end":1122,"column_start":1,"column_end":48}},{"value":"/ let c: [i32; 4] = b.into();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9908818,"byte_end":9908849,"line_start":1123,"line_end":1123,"column_start":1,"column_end":32}},{"value":"/ assert_eq!(c, [1, 2, 0, 0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9908850,"byte_end":9908882,"line_start":1124,"line_end":1124,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9908883,"byte_end":9908890,"line_start":1125,"line_end":1125,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtpd_epi32`]","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9908891,"byte_end":9908931,"line_start":1126,"line_end":1126,"column_start":1,"column_end":41}},{"value":"/ * **Assembly:** `cvtpd2dq xmm, xmm`","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9908932,"byte_end":9908971,"line_start":1127,"line_end":1127,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9908972,"byte_end":9908983,"line_start":1128,"line_end":1128,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9908984,"byte_end":9909001,"line_start":1129,"line_end":1129,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":678},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9909591,"byte_end":9909617,"line_start":1147,"line_end":1147,"column_start":8,"column_end":34},"name":"convert_to_m128_from_m128d","qualname":"::x86_x64::sse2::convert_to_m128_from_m128d","value":"fn convert_to_m128_from_m128d(m128d) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Rounds the two `f64` lanes to the low two `f32` lanes.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.5]);\n let b = convert_to_m128_from_m128d(a);\n assert_eq!(b.to_bits(), [1_f32.to_bits(), 2.5_f32.to_bits(), 0, 0]);\n ```\n * **Intrinsic:** [`_mm_cvtpd_ps`]\n * **Assembly:** `cvtpd2ps xmm, xmm`\n","sig":null,"attributes":[{"value":"/ Rounds the two `f64` lanes to the low two `f32` lanes.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9909162,"byte_end":9909220,"line_start":1135,"line_end":1135,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9909221,"byte_end":9909228,"line_start":1136,"line_end":1136,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9909229,"byte_end":9909252,"line_start":1137,"line_end":1137,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.5]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9909253,"byte_end":9909295,"line_start":1138,"line_end":1138,"column_start":1,"column_end":43}},{"value":"/ let b = convert_to_m128_from_m128d(a);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9909296,"byte_end":9909338,"line_start":1139,"line_end":1139,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(b.to_bits(), [1_f32.to_bits(), 2.5_f32.to_bits(), 0, 0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9909339,"byte_end":9909411,"line_start":1140,"line_end":1140,"column_start":1,"column_end":73}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9909412,"byte_end":9909419,"line_start":1141,"line_end":1141,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtpd_ps`]","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9909420,"byte_end":9909457,"line_start":1142,"line_end":1142,"column_start":1,"column_end":38}},{"value":"/ * **Assembly:** `cvtpd2ps xmm, xmm`","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9909458,"byte_end":9909497,"line_start":1143,"line_end":1143,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9909498,"byte_end":9909509,"line_start":1144,"line_end":1144,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9909510,"byte_end":9909527,"line_start":1145,"line_end":1145,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":679},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9910099,"byte_end":9910129,"line_start":1164,"line_end":1164,"column_start":8,"column_end":38},"name":"convert_to_i32_m128i_from_m128","qualname":"::x86_x64::sse2::convert_to_i32_m128i_from_m128","value":"fn convert_to_i32_m128i_from_m128(m128) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Rounds the `f32` lanes to `i32` lanes.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.5, 3.0, 4.0]);\n let b = convert_to_i32_m128i_from_m128(a);\n let c: [i32; 4] = b.into();\n assert_eq!(c, [1, 2, 3, 4]);\n ```\n * **Intrinsic:** [`_mm_cvtps_epi32`]\n * **Assembly:** `cvtps2dq xmm, xmm`\n","sig":null,"attributes":[{"value":"/ Rounds the `f32` lanes to `i32` lanes.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9909678,"byte_end":9909720,"line_start":1151,"line_end":1151,"column_start":1,"column_end":43}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9909721,"byte_end":9909728,"line_start":1152,"line_end":1152,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9909729,"byte_end":9909752,"line_start":1153,"line_end":1153,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.5, 3.0, 4.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9909753,"byte_end":9909804,"line_start":1154,"line_end":1154,"column_start":1,"column_end":52}},{"value":"/ let b = convert_to_i32_m128i_from_m128(a);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9909805,"byte_end":9909851,"line_start":1155,"line_end":1155,"column_start":1,"column_end":47}},{"value":"/ let c: [i32; 4] = b.into();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9909852,"byte_end":9909883,"line_start":1156,"line_end":1156,"column_start":1,"column_end":32}},{"value":"/ assert_eq!(c, [1, 2, 3, 4]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9909884,"byte_end":9909916,"line_start":1157,"line_end":1157,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9909917,"byte_end":9909924,"line_start":1158,"line_end":1158,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtps_epi32`]","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9909925,"byte_end":9909965,"line_start":1159,"line_end":1159,"column_start":1,"column_end":41}},{"value":"/ * **Assembly:** `cvtps2dq xmm, xmm`","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9909966,"byte_end":9910005,"line_start":1160,"line_end":1160,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9910006,"byte_end":9910017,"line_start":1161,"line_end":1161,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9910018,"byte_end":9910035,"line_start":1162,"line_end":1162,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":680},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9910633,"byte_end":9910666,"line_start":1180,"line_end":1180,"column_start":8,"column_end":41},"name":"convert_to_m128d_from_lower2_m128","qualname":"::x86_x64::sse2::convert_to_m128d_from_lower2_m128","value":"fn convert_to_m128d_from_lower2_m128(m128) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Rounds the two `f64` lanes to the low two `f32` lanes.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.5, 3.6, 4.7]);\n let b = convert_to_m128d_from_lower2_m128(a);\n assert_eq!(b.to_bits(), [1_f64.to_bits(), 2.5_f64.to_bits()]);\n ```\n * **Intrinsic:** [`_mm_cvtps_pd`]\n * **Assembly:** `cvtps2pd xmm, xmm`\n","sig":null,"attributes":[{"value":"/ Rounds the two `f64` lanes to the low two `f32` lanes.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9910194,"byte_end":9910252,"line_start":1168,"line_end":1168,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9910253,"byte_end":9910260,"line_start":1169,"line_end":1169,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9910261,"byte_end":9910284,"line_start":1170,"line_end":1170,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.5, 3.6, 4.7]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9910285,"byte_end":9910336,"line_start":1171,"line_end":1171,"column_start":1,"column_end":52}},{"value":"/ let b = convert_to_m128d_from_lower2_m128(a);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9910337,"byte_end":9910386,"line_start":1172,"line_end":1172,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(b.to_bits(), [1_f64.to_bits(), 2.5_f64.to_bits()]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9910387,"byte_end":9910453,"line_start":1173,"line_end":1173,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9910454,"byte_end":9910461,"line_start":1174,"line_end":1174,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtps_pd`]","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9910462,"byte_end":9910499,"line_start":1175,"line_end":1175,"column_start":1,"column_end":38}},{"value":"/ * **Assembly:** `cvtps2pd xmm, xmm`","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9910500,"byte_end":9910539,"line_start":1176,"line_end":1176,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9910540,"byte_end":9910551,"line_start":1177,"line_end":1177,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9910552,"byte_end":9910569,"line_start":1178,"line_end":1178,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":681},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9911012,"byte_end":9911032,"line_start":1194,"line_end":1194,"column_start":8,"column_end":28},"name":"get_f64_from_m128d_s","qualname":"::x86_x64::sse2::get_f64_from_m128d_s","value":"fn get_f64_from_m128d_s(m128d) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Gets the lower lane as an `f64` value.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.5]);\n let b = get_f64_from_m128d_s(a);\n assert_eq!(b, 1.0_f64);\n ```\n","sig":null,"attributes":[{"value":"/ Gets the lower lane as an `f64` value.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9910728,"byte_end":9910770,"line_start":1184,"line_end":1184,"column_start":1,"column_end":43}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9910771,"byte_end":9910778,"line_start":1185,"line_end":1185,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9910779,"byte_end":9910802,"line_start":1186,"line_end":1186,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.5]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9910803,"byte_end":9910845,"line_start":1187,"line_end":1187,"column_start":1,"column_end":43}},{"value":"/ let b = get_f64_from_m128d_s(a);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9910846,"byte_end":9910882,"line_start":1188,"line_end":1188,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(b, 1.0_f64);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9910883,"byte_end":9910910,"line_start":1189,"line_end":1189,"column_start":1,"column_end":28}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9910911,"byte_end":9910918,"line_start":1190,"line_end":1190,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9910919,"byte_end":9910930,"line_start":1191,"line_end":1191,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9910931,"byte_end":9910948,"line_start":1192,"line_end":1192,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":682},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9911373,"byte_end":9911393,"line_start":1208,"line_end":1208,"column_start":8,"column_end":28},"name":"get_i32_from_m128d_s","qualname":"::x86_x64::sse2::get_i32_from_m128d_s","value":"fn get_i32_from_m128d_s(m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Converts the lower lane to an `i32` value.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.5]);\n let b = get_i32_from_m128d_s(a);\n assert_eq!(b, 1_i32);\n ```\n","sig":null,"attributes":[{"value":"/ Converts the lower lane to an `i32` value.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9911087,"byte_end":9911133,"line_start":1198,"line_end":1198,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9911134,"byte_end":9911141,"line_start":1199,"line_end":1199,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9911142,"byte_end":9911165,"line_start":1200,"line_end":1200,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.5]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9911166,"byte_end":9911208,"line_start":1201,"line_end":1201,"column_start":1,"column_end":43}},{"value":"/ let b = get_i32_from_m128d_s(a);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9911209,"byte_end":9911245,"line_start":1202,"line_end":1202,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(b, 1_i32);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9911246,"byte_end":9911271,"line_start":1203,"line_end":1203,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9911272,"byte_end":9911279,"line_start":1204,"line_end":1204,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9911280,"byte_end":9911291,"line_start":1205,"line_end":1205,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9911292,"byte_end":9911309,"line_start":1206,"line_end":1206,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":683},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9911766,"byte_end":9911786,"line_start":1223,"line_end":1223,"column_start":8,"column_end":28},"name":"get_i64_from_m128d_s","qualname":"::x86_x64::sse2::get_i64_from_m128d_s","value":"fn get_i64_from_m128d_s(m128d) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Converts the lower lane to an `i64` value.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.5]);\n let b = get_i64_from_m128d_s(a);\n assert_eq!(b, 1_i64);\n ```\n","sig":null,"attributes":[{"value":"/ Converts the lower lane to an `i64` value.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9911449,"byte_end":9911495,"line_start":1212,"line_end":1212,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9911496,"byte_end":9911503,"line_start":1213,"line_end":1213,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9911504,"byte_end":9911527,"line_start":1214,"line_end":1214,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.5]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9911528,"byte_end":9911570,"line_start":1215,"line_end":1215,"column_start":1,"column_end":43}},{"value":"/ let b = get_i64_from_m128d_s(a);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9911571,"byte_end":9911607,"line_start":1216,"line_end":1216,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(b, 1_i64);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9911608,"byte_end":9911633,"line_start":1217,"line_end":1217,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9911634,"byte_end":9911641,"line_start":1218,"line_end":1218,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9911642,"byte_end":9911653,"line_start":1219,"line_end":1219,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9911654,"byte_end":9911671,"line_start":1220,"line_end":1220,"column_start":1,"column_end":18}},{"value":"cfg(target_arch = \"x86_64\")","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9911672,"byte_end":9911702,"line_start":1221,"line_end":1221,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":684},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9912357,"byte_end":9912387,"line_start":1241,"line_end":1241,"column_start":8,"column_end":38},"name":"convert_m128d_s_replace_m128_s","qualname":"::x86_x64::sse2::convert_m128d_s_replace_m128_s","value":"fn convert_m128d_s_replace_m128_s(m128, m128d) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Converts the low `f64` to `f32` and replaces the low lane of the input.\n ```\n # use safe_arch::*;\n let a = m128::from_array([3.0, 4.0, 5.0, 6.0]);\n let b = m128d::from_array([1.0, 2.5]);\n let c = convert_m128d_s_replace_m128_s(a, b);\n assert_eq!(c.to_array(), [1.0, 4.0, 5.0, 6.0]);\n ```\n * **Intrinsic:** [`_mm_cvtsd_ss`]\n * **Assembly:** `cvtsd2ss xmm, xmm`\n","sig":null,"attributes":[{"value":"/ Converts the low `f64` to `f32` and replaces the low lane of the input.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9911842,"byte_end":9911917,"line_start":1227,"line_end":1227,"column_start":1,"column_end":76}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9911918,"byte_end":9911925,"line_start":1228,"line_end":1228,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9911926,"byte_end":9911949,"line_start":1229,"line_end":1229,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([3.0, 4.0, 5.0, 6.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9911950,"byte_end":9912001,"line_start":1230,"line_end":1230,"column_start":1,"column_end":52}},{"value":"/ let b = m128d::from_array([1.0, 2.5]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9912002,"byte_end":9912044,"line_start":1231,"line_end":1231,"column_start":1,"column_end":43}},{"value":"/ let c = convert_m128d_s_replace_m128_s(a, b);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9912045,"byte_end":9912094,"line_start":1232,"line_end":1232,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c.to_array(), [1.0, 4.0, 5.0, 6.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9912095,"byte_end":9912146,"line_start":1233,"line_end":1233,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9912147,"byte_end":9912154,"line_start":1234,"line_end":1234,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtsd_ss`]","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9912155,"byte_end":9912192,"line_start":1235,"line_end":1235,"column_start":1,"column_end":38}},{"value":"/ * **Assembly:** `cvtsd2ss xmm, xmm`","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9912193,"byte_end":9912232,"line_start":1236,"line_end":1236,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9912233,"byte_end":9912244,"line_start":1237,"line_end":1237,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9912245,"byte_end":9912262,"line_start":1238,"line_end":1238,"column_start":1,"column_end":18}},{"value":"cfg(target_arch = \"x86_64\")","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9912263,"byte_end":9912293,"line_start":1239,"line_end":1239,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":685},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9912744,"byte_end":9912764,"line_start":1255,"line_end":1255,"column_start":8,"column_end":28},"name":"get_i32_from_m128i_s","qualname":"::x86_x64::sse2::get_i32_from_m128i_s","value":"fn get_i32_from_m128i_s(m128i) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Converts the lower lane to an `i32` value.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 3, 5, 7]);\n let b = get_i32_from_m128i_s(a);\n assert_eq!(b, 1_i32);\n ```\n","sig":null,"attributes":[{"value":"/ Converts the lower lane to an `i32` value.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9912462,"byte_end":9912508,"line_start":1245,"line_end":1245,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9912509,"byte_end":9912516,"line_start":1246,"line_end":1246,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9912517,"byte_end":9912540,"line_start":1247,"line_end":1247,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 3, 5, 7]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9912541,"byte_end":9912579,"line_start":1248,"line_end":1248,"column_start":1,"column_end":39}},{"value":"/ let b = get_i32_from_m128i_s(a);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9912580,"byte_end":9912616,"line_start":1249,"line_end":1249,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(b, 1_i32);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9912617,"byte_end":9912642,"line_start":1250,"line_end":1250,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9912643,"byte_end":9912650,"line_start":1251,"line_end":1251,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9912651,"byte_end":9912662,"line_start":1252,"line_end":1252,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9912663,"byte_end":9912680,"line_start":1253,"line_end":1253,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":686},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9913134,"byte_end":9913154,"line_start":1270,"line_end":1270,"column_start":8,"column_end":28},"name":"get_i64_from_m128i_s","qualname":"::x86_x64::sse2::get_i64_from_m128i_s","value":"fn get_i64_from_m128i_s(m128i) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Converts the lower lane to an `i64` value.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i64, 3]);\n let b = get_i64_from_m128i_s(a);\n assert_eq!(b, 1_i64);\n ```\n","sig":null,"attributes":[{"value":"/ Converts the lower lane to an `i64` value.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9912823,"byte_end":9912869,"line_start":1259,"line_end":1259,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9912870,"byte_end":9912877,"line_start":1260,"line_end":1260,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9912878,"byte_end":9912901,"line_start":1261,"line_end":1261,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i64, 3]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9912902,"byte_end":9912938,"line_start":1262,"line_end":1262,"column_start":1,"column_end":37}},{"value":"/ let b = get_i64_from_m128i_s(a);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9912939,"byte_end":9912975,"line_start":1263,"line_end":1263,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(b, 1_i64);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9912976,"byte_end":9913001,"line_start":1264,"line_end":1264,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9913002,"byte_end":9913009,"line_start":1265,"line_end":1265,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9913010,"byte_end":9913021,"line_start":1266,"line_end":1266,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9913022,"byte_end":9913039,"line_start":1267,"line_end":1267,"column_start":1,"column_end":18}},{"value":"cfg(target_arch = \"x86_64\")","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9913040,"byte_end":9913070,"line_start":1268,"line_end":1268,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":687},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9913628,"byte_end":9913655,"line_start":1286,"line_end":1286,"column_start":8,"column_end":35},"name":"convert_i32_replace_m128d_s","qualname":"::x86_x64::sse2::convert_i32_replace_m128d_s","value":"fn convert_i32_replace_m128d_s(m128d, i32) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Convert `i32` to `f64` and replace the low lane of the input.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.0]);\n let b = convert_i32_replace_m128d_s(a, 5_i32);\n assert_eq!(b.to_array(), [5.0, 2.0]);\n ```\n * **Intrinsic:** [`_mm_cvtsi32_sd`]\n * **Assembly:** `cvtsi2sd xmm, r32`\n","sig":null,"attributes":[{"value":"/ Convert `i32` to `f64` and replace the low lane of the input.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9913213,"byte_end":9913278,"line_start":1274,"line_end":1274,"column_start":1,"column_end":66}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9913279,"byte_end":9913286,"line_start":1275,"line_end":1275,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9913287,"byte_end":9913310,"line_start":1276,"line_end":1276,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9913311,"byte_end":9913353,"line_start":1277,"line_end":1277,"column_start":1,"column_end":43}},{"value":"/ let b = convert_i32_replace_m128d_s(a, 5_i32);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9913354,"byte_end":9913404,"line_start":1278,"line_end":1278,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(b.to_array(), [5.0, 2.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9913405,"byte_end":9913446,"line_start":1279,"line_end":1279,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9913447,"byte_end":9913454,"line_start":1280,"line_end":1280,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtsi32_sd`]","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9913455,"byte_end":9913494,"line_start":1281,"line_end":1281,"column_start":1,"column_end":40}},{"value":"/ * **Assembly:** `cvtsi2sd xmm, r32`","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9913495,"byte_end":9913534,"line_start":1282,"line_end":1282,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9913535,"byte_end":9913546,"line_start":1283,"line_end":1283,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9913547,"byte_end":9913564,"line_start":1284,"line_end":1284,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":688},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9914069,"byte_end":9914084,"line_start":1300,"line_end":1300,"column_start":8,"column_end":23},"name":"set_i32_m128i_s","qualname":"::x86_x64::sse2::set_i32_m128i_s","value":"fn set_i32_m128i_s(i32) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Set an `i32` as the low 32-bit lane of an `m128i`, other lanes blank.\n ```\n # use safe_arch::*;\n let a: [i32; 4] = set_i32_m128i_s(1_i32).into();\n let b: [i32; 4] = m128i::from([1, 0, 0, 0]).into();\n assert_eq!(a, b);\n ```\n","sig":null,"attributes":[{"value":"/ Set an `i32` as the low 32-bit lane of an `m128i`, other lanes blank.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9913731,"byte_end":9913804,"line_start":1290,"line_end":1290,"column_start":1,"column_end":74}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9913805,"byte_end":9913812,"line_start":1291,"line_end":1291,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9913813,"byte_end":9913836,"line_start":1292,"line_end":1292,"column_start":1,"column_end":24}},{"value":"/ let a: [i32; 4] = set_i32_m128i_s(1_i32).into();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9913837,"byte_end":9913889,"line_start":1293,"line_end":1293,"column_start":1,"column_end":53}},{"value":"/ let b: [i32; 4] = m128i::from([1, 0, 0, 0]).into();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9913890,"byte_end":9913945,"line_start":1294,"line_end":1294,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(a, b);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9913946,"byte_end":9913967,"line_start":1295,"line_end":1295,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9913968,"byte_end":9913975,"line_start":1296,"line_end":1296,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9913976,"byte_end":9913987,"line_start":1297,"line_end":1297,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9913988,"byte_end":9914005,"line_start":1298,"line_end":1298,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":689},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9914594,"byte_end":9914621,"line_start":1317,"line_end":1317,"column_start":8,"column_end":35},"name":"convert_i64_replace_m128d_s","qualname":"::x86_x64::sse2::convert_i64_replace_m128d_s","value":"fn convert_i64_replace_m128d_s(m128d, i64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Convert `i64` to `f64` and replace the low lane of the input.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.0]);\n let b = convert_i64_replace_m128d_s(a, 5_i64);\n assert_eq!(b.to_array(), [5.0, 2.0]);\n ```\n * **Intrinsic:** [`_mm_cvtsi64_sd`]\n * **Assembly:** `cvtsi2sd xmm, r64`\n","sig":null,"attributes":[{"value":"/ Convert `i64` to `f64` and replace the low lane of the input.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9914148,"byte_end":9914213,"line_start":1304,"line_end":1304,"column_start":1,"column_end":66}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9914214,"byte_end":9914221,"line_start":1305,"line_end":1305,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9914222,"byte_end":9914245,"line_start":1306,"line_end":1306,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9914246,"byte_end":9914288,"line_start":1307,"line_end":1307,"column_start":1,"column_end":43}},{"value":"/ let b = convert_i64_replace_m128d_s(a, 5_i64);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9914289,"byte_end":9914339,"line_start":1308,"line_end":1308,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(b.to_array(), [5.0, 2.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9914340,"byte_end":9914381,"line_start":1309,"line_end":1309,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9914382,"byte_end":9914389,"line_start":1310,"line_end":1310,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtsi64_sd`]","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9914390,"byte_end":9914429,"line_start":1311,"line_end":1311,"column_start":1,"column_end":40}},{"value":"/ * **Assembly:** `cvtsi2sd xmm, r64`","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9914430,"byte_end":9914469,"line_start":1312,"line_end":1312,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9914470,"byte_end":9914481,"line_start":1313,"line_end":1313,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9914482,"byte_end":9914499,"line_start":1314,"line_end":1314,"column_start":1,"column_end":18}},{"value":"cfg(target_arch = \"x86_64\")","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9914500,"byte_end":9914530,"line_start":1315,"line_end":1315,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":690},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9915064,"byte_end":9915079,"line_start":1332,"line_end":1332,"column_start":8,"column_end":23},"name":"set_i64_m128i_s","qualname":"::x86_x64::sse2::set_i64_m128i_s","value":"fn set_i64_m128i_s(i64) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Set an `i64` as the low 64-bit lane of an `m128i`, other lanes blank.\n ```\n # use safe_arch::*;\n let a: [i64; 2] = set_i64_m128i_s(1_i64).into();\n let b: [i64; 2] = m128i::from([1_i64, 0]).into();\n assert_eq!(a, b);\n ```\n","sig":null,"attributes":[{"value":"/ Set an `i64` as the low 64-bit lane of an `m128i`, other lanes blank.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9914697,"byte_end":9914770,"line_start":1321,"line_end":1321,"column_start":1,"column_end":74}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9914771,"byte_end":9914778,"line_start":1322,"line_end":1322,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9914779,"byte_end":9914802,"line_start":1323,"line_end":1323,"column_start":1,"column_end":24}},{"value":"/ let a: [i64; 2] = set_i64_m128i_s(1_i64).into();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9914803,"byte_end":9914855,"line_start":1324,"line_end":1324,"column_start":1,"column_end":53}},{"value":"/ let b: [i64; 2] = m128i::from([1_i64, 0]).into();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9914856,"byte_end":9914909,"line_start":1325,"line_end":1325,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(a, b);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9914910,"byte_end":9914931,"line_start":1326,"line_end":1326,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9914932,"byte_end":9914939,"line_start":1327,"line_end":1327,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9914940,"byte_end":9914951,"line_start":1328,"line_end":1328,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9914952,"byte_end":9914969,"line_start":1329,"line_end":1329,"column_start":1,"column_end":18}},{"value":"cfg(target_arch = \"x86_64\")","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9914970,"byte_end":9915000,"line_start":1330,"line_end":1330,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":691},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9915617,"byte_end":9915647,"line_start":1349,"line_end":1349,"column_start":8,"column_end":38},"name":"convert_m128_s_replace_m128d_s","qualname":"::x86_x64::sse2::convert_m128_s_replace_m128d_s","value":"fn convert_m128_s_replace_m128d_s(m128d, m128) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Converts the lower `f32` to `f64` and replace the low lane of the input\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.5]);\n let b = m128::from_array([3.0, 4.0, 5.0, 6.0]);\n let c = convert_m128_s_replace_m128d_s(a, b);\n assert_eq!(c.to_array(), [3.0, 2.5]);\n ```\n * **Intrinsic:** [`_mm_cvtss_sd`]\n * **Assembly:** `cvtss2sd xmm, xmm`\n","sig":null,"attributes":[{"value":"/ Converts the lower `f32` to `f64` and replace the low lane of the input","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9915143,"byte_end":9915218,"line_start":1336,"line_end":1336,"column_start":1,"column_end":76}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9915219,"byte_end":9915226,"line_start":1337,"line_end":1337,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9915227,"byte_end":9915250,"line_start":1338,"line_end":1338,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.5]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9915251,"byte_end":9915293,"line_start":1339,"line_end":1339,"column_start":1,"column_end":43}},{"value":"/ let b = m128::from_array([3.0, 4.0, 5.0, 6.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9915294,"byte_end":9915345,"line_start":1340,"line_end":1340,"column_start":1,"column_end":52}},{"value":"/ let c = convert_m128_s_replace_m128d_s(a, b);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9915346,"byte_end":9915395,"line_start":1341,"line_end":1341,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c.to_array(), [3.0, 2.5]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9915396,"byte_end":9915437,"line_start":1342,"line_end":1342,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9915438,"byte_end":9915445,"line_start":1343,"line_end":1343,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtss_sd`]","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9915446,"byte_end":9915483,"line_start":1344,"line_end":1344,"column_start":1,"column_end":38}},{"value":"/ * **Assembly:** `cvtss2sd xmm, xmm`","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9915484,"byte_end":9915523,"line_start":1345,"line_end":1345,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9915524,"byte_end":9915535,"line_start":1346,"line_end":1346,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9915536,"byte_end":9915553,"line_start":1347,"line_end":1347,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":692},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9916068,"byte_end":9916091,"line_start":1363,"line_end":1363,"column_start":8,"column_end":31},"name":"truncate_m128d_to_m128i","qualname":"::x86_x64::sse2::truncate_m128d_to_m128i","value":"fn truncate_m128d_to_m128i(m128d) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Truncate the `f64` lanes to the lower `i32` lanes (upper `i32` lanes 0).\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.1, 2.6]);\n let b = truncate_m128d_to_m128i(a);\n assert_eq!(<[i32; 4]>::from(b), [1, 2, 0, 0]);\n ```\n","sig":null,"attributes":[{"value":"/ Truncate the `f64` lanes to the lower `i32` lanes (upper `i32` lanes 0).","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9915724,"byte_end":9915800,"line_start":1353,"line_end":1353,"column_start":1,"column_end":77}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9915801,"byte_end":9915808,"line_start":1354,"line_end":1354,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9915809,"byte_end":9915832,"line_start":1355,"line_end":1355,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.1, 2.6]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9915833,"byte_end":9915875,"line_start":1356,"line_end":1356,"column_start":1,"column_end":43}},{"value":"/ let b = truncate_m128d_to_m128i(a);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9915876,"byte_end":9915915,"line_start":1357,"line_end":1357,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(<[i32; 4]>::from(b), [1, 2, 0, 0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9915916,"byte_end":9915966,"line_start":1358,"line_end":1358,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9915967,"byte_end":9915974,"line_start":1359,"line_end":1359,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9915975,"byte_end":9915986,"line_start":1360,"line_end":1360,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9915987,"byte_end":9916004,"line_start":1361,"line_end":1361,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":693},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9916478,"byte_end":9916500,"line_start":1377,"line_end":1377,"column_start":8,"column_end":30},"name":"truncate_m128_to_m128i","qualname":"::x86_x64::sse2::truncate_m128_to_m128i","value":"fn truncate_m128_to_m128i(m128) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Truncate the `f32` lanes to `i32` lanes.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.1, 2.6, 3.5, 4.0]);\n let b = truncate_m128_to_m128i(a);\n assert_eq!(<[i32; 4]>::from(b), [1, 2, 3, 4]);\n ```\n","sig":null,"attributes":[{"value":"/ Truncate the `f32` lanes to `i32` lanes.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9916158,"byte_end":9916202,"line_start":1367,"line_end":1367,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9916203,"byte_end":9916210,"line_start":1368,"line_end":1368,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9916211,"byte_end":9916234,"line_start":1369,"line_end":1369,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.1, 2.6, 3.5, 4.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9916235,"byte_end":9916286,"line_start":1370,"line_end":1370,"column_start":1,"column_end":52}},{"value":"/ let b = truncate_m128_to_m128i(a);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9916287,"byte_end":9916325,"line_start":1371,"line_end":1371,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(<[i32; 4]>::from(b), [1, 2, 3, 4]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9916326,"byte_end":9916376,"line_start":1372,"line_end":1372,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9916377,"byte_end":9916384,"line_start":1373,"line_end":1373,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9916385,"byte_end":9916396,"line_start":1374,"line_end":1374,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9916397,"byte_end":9916414,"line_start":1375,"line_end":1375,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":694},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9916836,"byte_end":9916859,"line_start":1390,"line_end":1390,"column_start":8,"column_end":31},"name":"truncate_to_i32_m128d_s","qualname":"::x86_x64::sse2::truncate_to_i32_m128d_s","value":"fn truncate_to_i32_m128d_s(m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Truncate the lower lane into an `i32`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.7, 2.6]);\n assert_eq!(truncate_to_i32_m128d_s(a), 1_i32);\n ```\n","sig":null,"attributes":[{"value":"/ Truncate the lower lane into an `i32`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9916566,"byte_end":9916608,"line_start":1381,"line_end":1381,"column_start":1,"column_end":43}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9916609,"byte_end":9916616,"line_start":1382,"line_end":1382,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9916617,"byte_end":9916640,"line_start":1383,"line_end":1383,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.7, 2.6]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9916641,"byte_end":9916683,"line_start":1384,"line_end":1384,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(truncate_to_i32_m128d_s(a), 1_i32);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9916684,"byte_end":9916734,"line_start":1385,"line_end":1385,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9916735,"byte_end":9916742,"line_start":1386,"line_end":1386,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9916743,"byte_end":9916754,"line_start":1387,"line_end":1387,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9916755,"byte_end":9916772,"line_start":1388,"line_end":1388,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":695},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9917217,"byte_end":9917240,"line_start":1404,"line_end":1404,"column_start":8,"column_end":31},"name":"truncate_to_i64_m128d_s","qualname":"::x86_x64::sse2::truncate_to_i64_m128d_s","value":"fn truncate_to_i64_m128d_s(m128d) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Truncate the lower lane into an `i64`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.7, 2.6]);\n assert_eq!(truncate_to_i64_m128d_s(a), 1_i64);\n ```\n","sig":null,"attributes":[{"value":"/ Truncate the lower lane into an `i64`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9916916,"byte_end":9916958,"line_start":1394,"line_end":1394,"column_start":1,"column_end":43}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9916959,"byte_end":9916966,"line_start":1395,"line_end":1395,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9916967,"byte_end":9916990,"line_start":1396,"line_end":1396,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.7, 2.6]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9916991,"byte_end":9917033,"line_start":1397,"line_end":1397,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(truncate_to_i64_m128d_s(a), 1_i64);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9917034,"byte_end":9917084,"line_start":1398,"line_end":1398,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9917085,"byte_end":9917092,"line_start":1399,"line_end":1399,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9917093,"byte_end":9917104,"line_start":1400,"line_end":1400,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9917105,"byte_end":9917122,"line_start":1401,"line_end":1401,"column_start":1,"column_end":18}},{"value":"cfg(target_arch = \"x86_64\")","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9917123,"byte_end":9917153,"line_start":1402,"line_end":1402,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":696},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9917616,"byte_end":9917625,"line_start":1419,"line_end":1419,"column_start":8,"column_end":17},"name":"div_m128d","qualname":"::x86_x64::sse2::div_m128d","value":"fn div_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a / b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 42.0]);\n let b = m128d::from_array([100.0, -6.0]);\n let c = div_m128d(a, b).to_array();\n assert_eq!(c, [0.92, -7.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a / b`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9917297,"byte_end":9917318,"line_start":1408,"line_end":1408,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9917319,"byte_end":9917326,"line_start":1409,"line_end":1409,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9917327,"byte_end":9917350,"line_start":1410,"line_end":1410,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 42.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9917351,"byte_end":9917395,"line_start":1411,"line_end":1411,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -6.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9917396,"byte_end":9917441,"line_start":1412,"line_end":1412,"column_start":1,"column_end":46}},{"value":"/ let c = div_m128d(a, b).to_array();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9917442,"byte_end":9917481,"line_start":1413,"line_end":1413,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(c, [0.92, -7.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9917482,"byte_end":9917514,"line_start":1414,"line_end":1414,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9917515,"byte_end":9917522,"line_start":1415,"line_end":1415,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9917523,"byte_end":9917534,"line_start":1416,"line_end":1416,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9917535,"byte_end":9917552,"line_start":1417,"line_end":1417,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":697},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9918048,"byte_end":9918059,"line_start":1434,"line_end":1434,"column_start":8,"column_end":19},"name":"div_m128d_s","qualname":"::x86_x64::sse2::div_m128d_s","value":"fn div_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lowest lane `a / b`, high lane unchanged.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -600.0]);\n let c = div_m128d_s(a, b).to_array();\n assert_eq!(c, [0.92, 87.5]);\n ```\n","sig":null,"attributes":[{"value":"/ Lowest lane `a / b`, high lane unchanged.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9917701,"byte_end":9917746,"line_start":1423,"line_end":1423,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9917747,"byte_end":9917754,"line_start":1424,"line_end":1424,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9917755,"byte_end":9917778,"line_start":1425,"line_end":1425,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9917779,"byte_end":9917823,"line_start":1426,"line_end":1426,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -600.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9917824,"byte_end":9917871,"line_start":1427,"line_end":1427,"column_start":1,"column_end":48}},{"value":"/ let c = div_m128d_s(a, b).to_array();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9917872,"byte_end":9917913,"line_start":1428,"line_end":1428,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [0.92, 87.5]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9917914,"byte_end":9917946,"line_start":1429,"line_end":1429,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9917947,"byte_end":9917954,"line_start":1430,"line_end":1430,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9917955,"byte_end":9917966,"line_start":1431,"line_end":1431,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9917967,"byte_end":9917984,"line_start":1432,"line_end":1432,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":700},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9920635,"byte_end":9920645,"line_start":1510,"line_end":1510,"column_start":8,"column_end":18},"name":"load_m128d","qualname":"::x86_x64::sse2::load_m128d","value":"fn load_m128d(&m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([10.0, 12.0]);\n let b = load_m128d(&a);\n assert_eq!(a.to_bits(), b.to_bits());\n ```\n","sig":null,"attributes":[{"value":"/ Loads the reference into a register.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9920346,"byte_end":9920386,"line_start":1500,"line_end":1500,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9920387,"byte_end":9920394,"line_start":1501,"line_end":1501,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9920395,"byte_end":9920418,"line_start":1502,"line_end":1502,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([10.0, 12.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9920419,"byte_end":9920463,"line_start":1503,"line_end":1503,"column_start":1,"column_end":45}},{"value":"/ let b = load_m128d(&a);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9920464,"byte_end":9920491,"line_start":1504,"line_end":1504,"column_start":1,"column_end":28}},{"value":"/ assert_eq!(a.to_bits(), b.to_bits());","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9920492,"byte_end":9920533,"line_start":1505,"line_end":1505,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9920534,"byte_end":9920541,"line_start":1506,"line_end":1506,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9920542,"byte_end":9920553,"line_start":1507,"line_end":1507,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9920554,"byte_end":9920571,"line_start":1508,"line_end":1508,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":701},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9921099,"byte_end":9921119,"line_start":1525,"line_end":1525,"column_start":8,"column_end":28},"name":"load_f64_splat_m128d","qualname":"::x86_x64::sse2::load_f64_splat_m128d","value":"fn load_f64_splat_m128d(&f64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Loads the `f64` reference into all lanes of a register.\n ```\n # use safe_arch::*;\n let a = 1.0;\n let b = load_f64_splat_m128d(&a);\n assert_eq!(m128d::from_array([1.0, 1.0]).to_bits(), b.to_bits());\n ```\n","sig":null,"attributes":[{"value":"/ Loads the `f64` reference into all lanes of a register.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9920736,"byte_end":9920795,"line_start":1514,"line_end":1514,"column_start":1,"column_end":60}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9920796,"byte_end":9920803,"line_start":1515,"line_end":1515,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9920804,"byte_end":9920827,"line_start":1516,"line_end":1516,"column_start":1,"column_end":24}},{"value":"/ let a = 1.0;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9920828,"byte_end":9920844,"line_start":1517,"line_end":1517,"column_start":1,"column_end":17}},{"value":"/ let b = load_f64_splat_m128d(&a);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9920845,"byte_end":9920882,"line_start":1518,"line_end":1518,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(m128d::from_array([1.0, 1.0]).to_bits(), b.to_bits());","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9920883,"byte_end":9920952,"line_start":1519,"line_end":1519,"column_start":1,"column_end":70}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9920953,"byte_end":9920960,"line_start":1520,"line_end":1520,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9920961,"byte_end":9920972,"line_start":1521,"line_end":1521,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9920973,"byte_end":9920990,"line_start":1522,"line_end":1522,"column_start":1,"column_end":18}},{"value":"allow(clippy :: trivially_copy_pass_by_ref)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9920991,"byte_end":9921035,"line_start":1523,"line_end":1523,"column_start":1,"column_end":45}}]},{"kind":"Function","id":{"krate":0,"index":702},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9921537,"byte_end":9921553,"line_start":1540,"line_end":1540,"column_start":8,"column_end":24},"name":"load_f64_m128d_s","qualname":"::x86_x64::sse2::load_f64_m128d_s","value":"fn load_f64_m128d_s(&f64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into the low lane of the register.\n ```\n # use safe_arch::*;\n let a = 1.0;\n let b = load_f64_m128d_s(&a);\n assert_eq!(m128d::from_array([1.0, 0.0]).to_bits(), b.to_bits());\n ```\n","sig":null,"attributes":[{"value":"/ Loads the reference into the low lane of the register.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9921179,"byte_end":9921237,"line_start":1529,"line_end":1529,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9921238,"byte_end":9921245,"line_start":1530,"line_end":1530,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9921246,"byte_end":9921269,"line_start":1531,"line_end":1531,"column_start":1,"column_end":24}},{"value":"/ let a = 1.0;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9921270,"byte_end":9921286,"line_start":1532,"line_end":1532,"column_start":1,"column_end":17}},{"value":"/ let b = load_f64_m128d_s(&a);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9921287,"byte_end":9921320,"line_start":1533,"line_end":1533,"column_start":1,"column_end":34}},{"value":"/ assert_eq!(m128d::from_array([1.0, 0.0]).to_bits(), b.to_bits());","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9921321,"byte_end":9921390,"line_start":1534,"line_end":1534,"column_start":1,"column_end":70}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9921391,"byte_end":9921398,"line_start":1535,"line_end":1535,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9921399,"byte_end":9921410,"line_start":1536,"line_end":1536,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9921411,"byte_end":9921428,"line_start":1537,"line_end":1537,"column_start":1,"column_end":18}},{"value":"allow(clippy :: trivially_copy_pass_by_ref)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9921429,"byte_end":9921473,"line_start":1538,"line_end":1538,"column_start":1,"column_end":45}}]},{"kind":"Function","id":{"krate":0,"index":703},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9921911,"byte_end":9921921,"line_start":1554,"line_end":1554,"column_start":8,"column_end":18},"name":"load_m128i","qualname":"::x86_x64::sse2::load_m128i","value":"fn load_m128i(&m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let b = load_m128i(&a);\n assert_eq!(<[i32; 4]>::from(a), <[i32; 4]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Loads the reference into a register.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9921612,"byte_end":9921652,"line_start":1544,"line_end":1544,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9921653,"byte_end":9921660,"line_start":1545,"line_end":1545,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9921661,"byte_end":9921684,"line_start":1546,"line_end":1546,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9921685,"byte_end":9921723,"line_start":1547,"line_end":1547,"column_start":1,"column_end":39}},{"value":"/ let b = load_m128i(&a);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9921724,"byte_end":9921751,"line_start":1548,"line_end":1548,"column_start":1,"column_end":28}},{"value":"/ assert_eq!(<[i32; 4]>::from(a), <[i32; 4]>::from(b));","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9921752,"byte_end":9921809,"line_start":1549,"line_end":1549,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9921810,"byte_end":9921817,"line_start":1550,"line_end":1550,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9921818,"byte_end":9921829,"line_start":1551,"line_end":1551,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9921830,"byte_end":9921847,"line_start":1552,"line_end":1552,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":704},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9922368,"byte_end":9922391,"line_start":1569,"line_end":1569,"column_start":8,"column_end":31},"name":"load_replace_high_m128d","qualname":"::x86_x64::sse2::load_replace_high_m128d","value":"fn load_replace_high_m128d(m128d, &f64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register, replacing the high lane.\n ```\n # use safe_arch::*;\n let a = m128d::from([1.0, 2.0]);\n let double = 7.0;\n let b = load_replace_high_m128d(a, &double);\n assert_eq!(b.to_array(), [1.0, 7.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Loads the reference into a register, replacing the high lane.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9922019,"byte_end":9922084,"line_start":1558,"line_end":1558,"column_start":1,"column_end":66}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9922085,"byte_end":9922092,"line_start":1559,"line_end":1559,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9922093,"byte_end":9922116,"line_start":1560,"line_end":1560,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from([1.0, 2.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9922117,"byte_end":9922153,"line_start":1561,"line_end":1561,"column_start":1,"column_end":37}},{"value":"/ let double = 7.0;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9922154,"byte_end":9922175,"line_start":1562,"line_end":1562,"column_start":1,"column_end":22}},{"value":"/ let b = load_replace_high_m128d(a, &double);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9922176,"byte_end":9922224,"line_start":1563,"line_end":1563,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(b.to_array(), [1.0, 7.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9922225,"byte_end":9922266,"line_start":1564,"line_end":1564,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9922267,"byte_end":9922274,"line_start":1565,"line_end":1565,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9922275,"byte_end":9922286,"line_start":1566,"line_end":1566,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9922287,"byte_end":9922304,"line_start":1567,"line_end":1567,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":705},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9922760,"byte_end":9922776,"line_start":1583,"line_end":1583,"column_start":8,"column_end":24},"name":"load_i64_m128i_s","qualname":"::x86_x64::sse2::load_i64_m128i_s","value":"fn load_i64_m128i_s(&m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Loads the low `i64` into a register.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i64, 2]);\n let b = load_i64_m128i_s(&a);\n assert_eq!([1_i64, 0], <[i64; 2]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Loads the low `i64` into a register.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9922466,"byte_end":9922506,"line_start":1573,"line_end":1573,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9922507,"byte_end":9922514,"line_start":1574,"line_end":1574,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9922515,"byte_end":9922538,"line_start":1575,"line_end":1575,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i64, 2]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9922539,"byte_end":9922575,"line_start":1576,"line_end":1576,"column_start":1,"column_end":37}},{"value":"/ let b = load_i64_m128i_s(&a);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9922576,"byte_end":9922609,"line_start":1577,"line_end":1577,"column_start":1,"column_end":34}},{"value":"/ assert_eq!([1_i64, 0], <[i64; 2]>::from(b));","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9922610,"byte_end":9922658,"line_start":1578,"line_end":1578,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9922659,"byte_end":9922666,"line_start":1579,"line_end":1579,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9922667,"byte_end":9922678,"line_start":1580,"line_end":1580,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9922679,"byte_end":9922696,"line_start":1581,"line_end":1581,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":706},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9923222,"byte_end":9923244,"line_start":1598,"line_end":1598,"column_start":8,"column_end":30},"name":"load_replace_low_m128d","qualname":"::x86_x64::sse2::load_replace_low_m128d","value":"fn load_replace_low_m128d(m128d, &f64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register, replacing the low lane.\n ```\n # use safe_arch::*;\n let a = m128d::from([1.0, 2.0]);\n let double = 7.0;\n let b = load_replace_low_m128d(a, &double);\n assert_eq!(b.to_array(), [7.0, 2.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Loads the reference into a register, replacing the low lane.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9922875,"byte_end":9922939,"line_start":1587,"line_end":1587,"column_start":1,"column_end":65}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9922940,"byte_end":9922947,"line_start":1588,"line_end":1588,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9922948,"byte_end":9922971,"line_start":1589,"line_end":1589,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from([1.0, 2.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9922972,"byte_end":9923008,"line_start":1590,"line_end":1590,"column_start":1,"column_end":37}},{"value":"/ let double = 7.0;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9923009,"byte_end":9923030,"line_start":1591,"line_end":1591,"column_start":1,"column_end":22}},{"value":"/ let b = load_replace_low_m128d(a, &double);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9923031,"byte_end":9923078,"line_start":1592,"line_end":1592,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(b.to_array(), [7.0, 2.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9923079,"byte_end":9923120,"line_start":1593,"line_end":1593,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9923121,"byte_end":9923128,"line_start":1594,"line_end":1594,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9923129,"byte_end":9923140,"line_start":1595,"line_end":1595,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9923141,"byte_end":9923158,"line_start":1596,"line_end":1596,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":707},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9923666,"byte_end":9923684,"line_start":1612,"line_end":1612,"column_start":8,"column_end":26},"name":"load_reverse_m128d","qualname":"::x86_x64::sse2::load_reverse_m128d","value":"fn load_reverse_m128d(&m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register with reversed order.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([10.0, 12.0]);\n let b = load_reverse_m128d(&a);\n assert_eq!(m128d::from_array([12.0, 10.0]).to_bits(), b.to_bits());\n ```\n","sig":null,"attributes":[{"value":"/ Loads the reference into a register with reversed order.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9923319,"byte_end":9923379,"line_start":1602,"line_end":1602,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9923380,"byte_end":9923387,"line_start":1603,"line_end":1603,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9923388,"byte_end":9923411,"line_start":1604,"line_end":1604,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([10.0, 12.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9923412,"byte_end":9923456,"line_start":1605,"line_end":1605,"column_start":1,"column_end":45}},{"value":"/ let b = load_reverse_m128d(&a);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9923457,"byte_end":9923492,"line_start":1606,"line_end":1606,"column_start":1,"column_end":36}},{"value":"/ assert_eq!(m128d::from_array([12.0, 10.0]).to_bits(), b.to_bits());","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9923493,"byte_end":9923564,"line_start":1607,"line_end":1607,"column_start":1,"column_end":72}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9923565,"byte_end":9923572,"line_start":1608,"line_end":1608,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9923573,"byte_end":9923584,"line_start":1609,"line_end":1609,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9923585,"byte_end":9923602,"line_start":1610,"line_end":1610,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":708},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9924252,"byte_end":9924272,"line_start":1630,"line_end":1630,"column_start":8,"column_end":28},"name":"load_unaligned_m128d","qualname":"::x86_x64::sse2::load_unaligned_m128d","value":"fn load_unaligned_m128d(&[f64; ]) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register.","sig":null,"attributes":[{"value":"/ Loads the reference into a register.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9923776,"byte_end":9923816,"line_start":1616,"line_end":1616,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9923817,"byte_end":9923820,"line_start":1617,"line_end":1617,"column_start":1,"column_end":4}},{"value":"/ This generally has no speed penalty if the reference happens to be 16-byte","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9923821,"byte_end":9923899,"line_start":1618,"line_end":1618,"column_start":1,"column_end":79}},{"value":"/ aligned, but there is a slight speed penalty if the reference is only 8-byte","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9923900,"byte_end":9923980,"line_start":1619,"line_end":1619,"column_start":1,"column_end":81}},{"value":"/ aligned.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9923981,"byte_end":9923993,"line_start":1620,"line_end":1620,"column_start":1,"column_end":13}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9923994,"byte_end":9924001,"line_start":1621,"line_end":1621,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9924002,"byte_end":9924025,"line_start":1622,"line_end":1622,"column_start":1,"column_end":24}},{"value":"/ let a = [10.0, 12.0];","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9924026,"byte_end":9924051,"line_start":1623,"line_end":1623,"column_start":1,"column_end":26}},{"value":"/ let b = load_unaligned_m128d(&a);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9924052,"byte_end":9924089,"line_start":1624,"line_end":1624,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(m128d::from_array(a).to_bits(), b.to_bits());","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9924090,"byte_end":9924150,"line_start":1625,"line_end":1625,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9924151,"byte_end":9924158,"line_start":1626,"line_end":1626,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9924159,"byte_end":9924170,"line_start":1627,"line_end":1627,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9924171,"byte_end":9924188,"line_start":1628,"line_end":1628,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":711},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9924898,"byte_end":9924918,"line_start":1649,"line_end":1649,"column_start":8,"column_end":28},"name":"load_unaligned_m128i","qualname":"::x86_x64::sse2::load_unaligned_m128i","value":"fn load_unaligned_m128i(&[u8; ]) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register.","sig":null,"attributes":[{"value":"/ Loads the reference into a register.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9924370,"byte_end":9924410,"line_start":1634,"line_end":1634,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9924411,"byte_end":9924414,"line_start":1635,"line_end":1635,"column_start":1,"column_end":4}},{"value":"/ This generally has no speed penalty if the reference happens to be 16-byte","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9924415,"byte_end":9924493,"line_start":1636,"line_end":1636,"column_start":1,"column_end":79}},{"value":"/ aligned, but there is a slight speed penalty if the reference is less","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9924494,"byte_end":9924567,"line_start":1637,"line_end":1637,"column_start":1,"column_end":74}},{"value":"/ aligned.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9924568,"byte_end":9924580,"line_start":1638,"line_end":1638,"column_start":1,"column_end":13}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9924581,"byte_end":9924588,"line_start":1639,"line_end":1639,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9924589,"byte_end":9924612,"line_start":1640,"line_end":1640,"column_start":1,"column_end":24}},{"value":"/ let a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9924613,"byte_end":9924681,"line_start":1641,"line_end":1641,"column_start":1,"column_end":69}},{"value":"/ let b = load_unaligned_m128i(&a);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9924682,"byte_end":9924719,"line_start":1642,"line_end":1642,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(a, <[u8; 16]>::from(b));","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9924720,"byte_end":9924759,"line_start":1643,"line_end":1643,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9924760,"byte_end":9924767,"line_start":1644,"line_end":1644,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9924768,"byte_end":9924779,"line_start":1645,"line_end":1645,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9924780,"byte_end":9924797,"line_start":1646,"line_end":1646,"column_start":1,"column_end":18}},{"value":"allow(clippy :: cast_ptr_alignment)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9924798,"byte_end":9924834,"line_start":1647,"line_end":1647,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":714},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9925499,"byte_end":9925527,"line_start":1665,"line_end":1665,"column_start":8,"column_end":36},"name":"mul_i16_horizontal_add_m128i","qualname":"::x86_x64::sse2::mul_i16_horizontal_add_m128i","value":"fn mul_i16_horizontal_add_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Multiply `i16` lanes producing `i32` values, horizontal add pairs of `i32`\n values to produce the final output.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);\n let c: [i32; 4] = mul_i16_horizontal_add_m128i(a, b).into();\n assert_eq!(c, [17, 53, 67, -81]);\n ```\n","sig":null,"attributes":[{"value":"/ Multiply `i16` lanes producing `i32` values, horizontal add pairs of `i32`","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9925023,"byte_end":9925101,"line_start":1653,"line_end":1653,"column_start":1,"column_end":79}},{"value":"/ values to produce the final output.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9925102,"byte_end":9925141,"line_start":1654,"line_end":1654,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9925142,"byte_end":9925149,"line_start":1655,"line_end":1655,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9925150,"byte_end":9925173,"line_start":1656,"line_end":1656,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9925174,"byte_end":9925232,"line_start":1657,"line_end":1657,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9925233,"byte_end":9925294,"line_start":1658,"line_end":1658,"column_start":1,"column_end":62}},{"value":"/ let c: [i32; 4] = mul_i16_horizontal_add_m128i(a, b).into();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9925295,"byte_end":9925359,"line_start":1659,"line_end":1659,"column_start":1,"column_end":65}},{"value":"/ assert_eq!(c, [17, 53, 67, -81]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9925360,"byte_end":9925397,"line_start":1660,"line_end":1660,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9925398,"byte_end":9925405,"line_start":1661,"line_end":1661,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9925406,"byte_end":9925417,"line_start":1662,"line_end":1662,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9925418,"byte_end":9925435,"line_start":1663,"line_end":1663,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":715},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9926108,"byte_end":9926120,"line_start":1683,"line_end":1683,"column_start":8,"column_end":20},"name":"max_u8_m128i","qualname":"::x86_x64::sse2::max_u8_m128i","value":"fn max_u8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `max(a, b)` with lanes as `u8`.\n ```\n # use safe_arch::*;\n let a =\n   m128i::from([0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n let b = m128i::from([\n   0_u8, 11, 2, 13, 4, 15, 6, 17, 8, 19, 20, 21, 22, 23, 24, 127,\n ]);\n let c: [u8; 16] = max_u8_m128i(a, b).into();\n assert_eq!(c, [0, 11, 2, 13, 4, 15, 6, 17, 8, 19, 20, 21, 22, 23, 24, 127]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `max(a, b)` with lanes as `u8`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9925607,"byte_end":9925651,"line_start":1669,"line_end":1669,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9925652,"byte_end":9925659,"line_start":1670,"line_end":1670,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9925660,"byte_end":9925683,"line_start":1671,"line_end":1671,"column_start":1,"column_end":24}},{"value":"/ let a =","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9925684,"byte_end":9925695,"line_start":1672,"line_end":1672,"column_start":1,"column_end":12}},{"value":"/   m128i::from([0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9925696,"byte_end":9925773,"line_start":1673,"line_end":1673,"column_start":1,"column_end":78}},{"value":"/ let b = m128i::from([","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9925774,"byte_end":9925799,"line_start":1674,"line_end":1674,"column_start":1,"column_end":26}},{"value":"/   0_u8, 11, 2, 13, 4, 15, 6, 17, 8, 19, 20, 21, 22, 23, 24, 127,","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9925800,"byte_end":9925868,"line_start":1675,"line_end":1675,"column_start":1,"column_end":69}},{"value":"/ ]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9925869,"byte_end":9925876,"line_start":1676,"line_end":1676,"column_start":1,"column_end":8}},{"value":"/ let c: [u8; 16] = max_u8_m128i(a, b).into();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9925877,"byte_end":9925925,"line_start":1677,"line_end":1677,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, 11, 2, 13, 4, 15, 6, 17, 8, 19, 20, 21, 22, 23, 24, 127]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9925926,"byte_end":9926006,"line_start":1678,"line_end":1678,"column_start":1,"column_end":81}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9926007,"byte_end":9926014,"line_start":1679,"line_end":1679,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9926015,"byte_end":9926026,"line_start":1680,"line_end":1680,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9926027,"byte_end":9926044,"line_start":1681,"line_end":1681,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":716},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9926601,"byte_end":9926614,"line_start":1698,"line_end":1698,"column_start":8,"column_end":21},"name":"max_i16_m128i","qualname":"::x86_x64::sse2::max_i16_m128i","value":"fn max_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `max(a, b)` with lanes as `i16`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);\n let c: [i16; 8] = max_i16_m128i(a, b).into();\n assert_eq!(c, [5_i16, 6, 7, 8, -1, -2, -3, 48]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `max(a, b)` with lanes as `i16`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9926198,"byte_end":9926243,"line_start":1687,"line_end":1687,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9926244,"byte_end":9926251,"line_start":1688,"line_end":1688,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9926252,"byte_end":9926275,"line_start":1689,"line_end":1689,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9926276,"byte_end":9926334,"line_start":1690,"line_end":1690,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9926335,"byte_end":9926396,"line_start":1691,"line_end":1691,"column_start":1,"column_end":62}},{"value":"/ let c: [i16; 8] = max_i16_m128i(a, b).into();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9926397,"byte_end":9926446,"line_start":1692,"line_end":1692,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [5_i16, 6, 7, 8, -1, -2, -3, 48]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9926447,"byte_end":9926499,"line_start":1693,"line_end":1693,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9926500,"byte_end":9926507,"line_start":1694,"line_end":1694,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9926508,"byte_end":9926519,"line_start":1695,"line_end":1695,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9926520,"byte_end":9926537,"line_start":1696,"line_end":1696,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":717},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9927009,"byte_end":9927018,"line_start":1713,"line_end":1713,"column_start":8,"column_end":17},"name":"max_m128d","qualname":"::x86_x64::sse2::max_m128d","value":"fn max_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `max(a, b)`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([5.0, 2.0]);\n let b = m128d::from_array([1.0, 6.0]);\n let c = max_m128d(a, b).to_array();\n assert_eq!(c, [5.0, 6.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `max(a, b)`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9926693,"byte_end":9926718,"line_start":1702,"line_end":1702,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9926719,"byte_end":9926726,"line_start":1703,"line_end":1703,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9926727,"byte_end":9926750,"line_start":1704,"line_end":1704,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([5.0, 2.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9926751,"byte_end":9926793,"line_start":1705,"line_end":1705,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 6.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9926794,"byte_end":9926836,"line_start":1706,"line_end":1706,"column_start":1,"column_end":43}},{"value":"/ let c = max_m128d(a, b).to_array();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9926837,"byte_end":9926876,"line_start":1707,"line_end":1707,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(c, [5.0, 6.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9926877,"byte_end":9926907,"line_start":1708,"line_end":1708,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9926908,"byte_end":9926915,"line_start":1709,"line_end":1709,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9926916,"byte_end":9926927,"line_start":1710,"line_end":1710,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9926928,"byte_end":9926945,"line_start":1711,"line_end":1711,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":718},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9927437,"byte_end":9927448,"line_start":1728,"line_end":1728,"column_start":8,"column_end":19},"name":"max_m128d_s","qualname":"::x86_x64::sse2::max_m128d_s","value":"fn max_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `max(a, b)`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 12.0]);\n let b = m128d::from_array([5.0, 6.0]);\n let c = max_m128d_s(a, b).to_array();\n assert_eq!(c, [5.0, 12.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `max(a, b)`, other lanes unchanged.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9927094,"byte_end":9927142,"line_start":1717,"line_end":1717,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9927143,"byte_end":9927150,"line_start":1718,"line_end":1718,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9927151,"byte_end":9927174,"line_start":1719,"line_end":1719,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 12.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9927175,"byte_end":9927218,"line_start":1720,"line_end":1720,"column_start":1,"column_end":44}},{"value":"/ let b = m128d::from_array([5.0, 6.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9927219,"byte_end":9927261,"line_start":1721,"line_end":1721,"column_start":1,"column_end":43}},{"value":"/ let c = max_m128d_s(a, b).to_array();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9927262,"byte_end":9927303,"line_start":1722,"line_end":1722,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [5.0, 12.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9927304,"byte_end":9927335,"line_start":1723,"line_end":1723,"column_start":1,"column_end":32}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9927336,"byte_end":9927343,"line_start":1724,"line_end":1724,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9927344,"byte_end":9927355,"line_start":1725,"line_end":1725,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9927356,"byte_end":9927373,"line_start":1726,"line_end":1726,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":719},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9928007,"byte_end":9928019,"line_start":1745,"line_end":1745,"column_start":8,"column_end":20},"name":"min_u8_m128i","qualname":"::x86_x64::sse2::min_u8_m128i","value":"fn min_u8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `min(a, b)` with lanes as `u8`.\n ```\n # use safe_arch::*;\n let a =\n   m128i::from([0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n let b =\n   m128i::from([0_u8, 11, 2, 13, 4, 15, 6, 17, 8, 0, 20, 0, 22, 0, 24, 0]);\n let c: [u8; 16] = min_u8_m128i(a, b).into();\n assert_eq!(c, [0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 0, 10, 0, 12, 0, 14, 0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `min(a, b)` with lanes as `u8`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9927524,"byte_end":9927568,"line_start":1732,"line_end":1732,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9927569,"byte_end":9927576,"line_start":1733,"line_end":1733,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9927577,"byte_end":9927600,"line_start":1734,"line_end":1734,"column_start":1,"column_end":24}},{"value":"/ let a =","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9927601,"byte_end":9927612,"line_start":1735,"line_end":1735,"column_start":1,"column_end":12}},{"value":"/   m128i::from([0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9927613,"byte_end":9927690,"line_start":1736,"line_end":1736,"column_start":1,"column_end":78}},{"value":"/ let b =","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9927691,"byte_end":9927702,"line_start":1737,"line_end":1737,"column_start":1,"column_end":12}},{"value":"/   m128i::from([0_u8, 11, 2, 13, 4, 15, 6, 17, 8, 0, 20, 0, 22, 0, 24, 0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9927703,"byte_end":9927781,"line_start":1738,"line_end":1738,"column_start":1,"column_end":79}},{"value":"/ let c: [u8; 16] = min_u8_m128i(a, b).into();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9927782,"byte_end":9927830,"line_start":1739,"line_end":1739,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 0, 10, 0, 12, 0, 14, 0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9927831,"byte_end":9927905,"line_start":1740,"line_end":1740,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9927906,"byte_end":9927913,"line_start":1741,"line_end":1741,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9927914,"byte_end":9927925,"line_start":1742,"line_end":1742,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9927926,"byte_end":9927943,"line_start":1743,"line_end":1743,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":720},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9928503,"byte_end":9928516,"line_start":1760,"line_end":1760,"column_start":8,"column_end":21},"name":"min_i16_m128i","qualname":"::x86_x64::sse2::min_i16_m128i","value":"fn min_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `min(a, b)` with lanes as `i16`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);\n let c: [i16; 8] = min_i16_m128i(a, b).into();\n assert_eq!(c, [1_i16, 2, 3, 4, -15, -26, -37, -4]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `min(a, b)` with lanes as `i16`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9928097,"byte_end":9928142,"line_start":1749,"line_end":1749,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9928143,"byte_end":9928150,"line_start":1750,"line_end":1750,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9928151,"byte_end":9928174,"line_start":1751,"line_end":1751,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9928175,"byte_end":9928233,"line_start":1752,"line_end":1752,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9928234,"byte_end":9928295,"line_start":1753,"line_end":1753,"column_start":1,"column_end":62}},{"value":"/ let c: [i16; 8] = min_i16_m128i(a, b).into();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9928296,"byte_end":9928345,"line_start":1754,"line_end":1754,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [1_i16, 2, 3, 4, -15, -26, -37, -4]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9928346,"byte_end":9928401,"line_start":1755,"line_end":1755,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9928402,"byte_end":9928409,"line_start":1756,"line_end":1756,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9928410,"byte_end":9928421,"line_start":1757,"line_end":1757,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9928422,"byte_end":9928439,"line_start":1758,"line_end":1758,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":721},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9928912,"byte_end":9928921,"line_start":1775,"line_end":1775,"column_start":8,"column_end":17},"name":"min_m128d","qualname":"::x86_x64::sse2::min_m128d","value":"fn min_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `min(a, b)`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 12.0]);\n let b = m128d::from_array([5.0, 6.0]);\n let c = min_m128d(a, b).to_array();\n assert_eq!(c, [1.0, 6.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `min(a, b)`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9928595,"byte_end":9928620,"line_start":1764,"line_end":1764,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9928621,"byte_end":9928628,"line_start":1765,"line_end":1765,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9928629,"byte_end":9928652,"line_start":1766,"line_end":1766,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 12.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9928653,"byte_end":9928696,"line_start":1767,"line_end":1767,"column_start":1,"column_end":44}},{"value":"/ let b = m128d::from_array([5.0, 6.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9928697,"byte_end":9928739,"line_start":1768,"line_end":1768,"column_start":1,"column_end":43}},{"value":"/ let c = min_m128d(a, b).to_array();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9928740,"byte_end":9928779,"line_start":1769,"line_end":1769,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(c, [1.0, 6.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9928780,"byte_end":9928810,"line_start":1770,"line_end":1770,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9928811,"byte_end":9928818,"line_start":1771,"line_end":1771,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9928819,"byte_end":9928830,"line_start":1772,"line_end":1772,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9928831,"byte_end":9928848,"line_start":1773,"line_end":1773,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":722},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9929340,"byte_end":9929351,"line_start":1790,"line_end":1790,"column_start":8,"column_end":19},"name":"min_m128d_s","qualname":"::x86_x64::sse2::min_m128d_s","value":"fn min_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `min(a, b)`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 12.0]);\n let b = m128d::from_array([0.0, 6.0]);\n let c = min_m128d_s(a, b).to_array();\n assert_eq!(c, [0.0, 12.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `min(a, b)`, other lanes unchanged.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9928997,"byte_end":9929045,"line_start":1779,"line_end":1779,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9929046,"byte_end":9929053,"line_start":1780,"line_end":1780,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9929054,"byte_end":9929077,"line_start":1781,"line_end":1781,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 12.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9929078,"byte_end":9929121,"line_start":1782,"line_end":1782,"column_start":1,"column_end":44}},{"value":"/ let b = m128d::from_array([0.0, 6.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9929122,"byte_end":9929164,"line_start":1783,"line_end":1783,"column_start":1,"column_end":43}},{"value":"/ let c = min_m128d_s(a, b).to_array();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9929165,"byte_end":9929206,"line_start":1784,"line_end":1784,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [0.0, 12.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9929207,"byte_end":9929238,"line_start":1785,"line_end":1785,"column_start":1,"column_end":32}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9929239,"byte_end":9929246,"line_start":1786,"line_end":1786,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9929247,"byte_end":9929258,"line_start":1787,"line_end":1787,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9929259,"byte_end":9929276,"line_start":1788,"line_end":1788,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":723},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9929736,"byte_end":9929752,"line_start":1804,"line_end":1804,"column_start":8,"column_end":24},"name":"copy_i64_m128i_s","qualname":"::x86_x64::sse2::copy_i64_m128i_s","value":"fn copy_i64_m128i_s(m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Copy the low `i64` lane to a new register, upper bits 0.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i64, 2]);\n let b = copy_i64_m128i_s(a);\n assert_eq!(<[i64; 2]>::from(b), [1, 0]);\n ```\n","sig":null,"attributes":[{"value":"/ Copy the low `i64` lane to a new register, upper bits 0.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9929427,"byte_end":9929487,"line_start":1794,"line_end":1794,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9929488,"byte_end":9929495,"line_start":1795,"line_end":1795,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9929496,"byte_end":9929519,"line_start":1796,"line_end":1796,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i64, 2]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9929520,"byte_end":9929556,"line_start":1797,"line_end":1797,"column_start":1,"column_end":37}},{"value":"/ let b = copy_i64_m128i_s(a);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9929557,"byte_end":9929589,"line_start":1798,"line_end":1798,"column_start":1,"column_end":33}},{"value":"/ assert_eq!(<[i64; 2]>::from(b), [1, 0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9929590,"byte_end":9929634,"line_start":1799,"line_end":1799,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9929635,"byte_end":9929642,"line_start":1800,"line_end":1800,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9929643,"byte_end":9929654,"line_start":1801,"line_end":1801,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9929655,"byte_end":9929672,"line_start":1802,"line_end":1802,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":724},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9930187,"byte_end":9930213,"line_start":1819,"line_end":1819,"column_start":8,"column_end":34},"name":"copy_replace_low_f64_m128d","qualname":"::x86_x64::sse2::copy_replace_low_f64_m128d","value":"fn copy_replace_low_f64_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Copies the `a` value and replaces the low lane with the low `b` value.\n ```\n # use safe_arch::*;\n let a = m128d::from([1.0, 2.0]);\n let b = m128d::from([3.0, 4.0]);\n let c = copy_replace_low_f64_m128d(a, b);\n assert_eq!(c.to_array(), [3.0, 2.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Copies the `a` value and replaces the low lane with the low `b` value.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9929817,"byte_end":9929891,"line_start":1808,"line_end":1808,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9929892,"byte_end":9929899,"line_start":1809,"line_end":1809,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9929900,"byte_end":9929923,"line_start":1810,"line_end":1810,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from([1.0, 2.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9929924,"byte_end":9929960,"line_start":1811,"line_end":1811,"column_start":1,"column_end":37}},{"value":"/ let b = m128d::from([3.0, 4.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9929961,"byte_end":9929997,"line_start":1812,"line_end":1812,"column_start":1,"column_end":37}},{"value":"/ let c = copy_replace_low_f64_m128d(a, b);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9929998,"byte_end":9930043,"line_start":1813,"line_end":1813,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(c.to_array(), [3.0, 2.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9930044,"byte_end":9930085,"line_start":1814,"line_end":1814,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9930086,"byte_end":9930093,"line_start":1815,"line_end":1815,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9930094,"byte_end":9930105,"line_start":1816,"line_end":1816,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9930106,"byte_end":9930123,"line_start":1817,"line_end":1817,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":725},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9930717,"byte_end":9930735,"line_start":1837,"line_end":1837,"column_start":8,"column_end":26},"name":"move_mask_i8_m128i","qualname":"::x86_x64::sse2::move_mask_i8_m128i","value":"fn move_mask_i8_m128i(m128i) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Gathers the `i8` sign bit of each lane.","sig":null,"attributes":[{"value":"/ Gathers the `i8` sign bit of each lane.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9930290,"byte_end":9930333,"line_start":1823,"line_end":1823,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9930334,"byte_end":9930337,"line_start":1824,"line_end":1824,"column_start":1,"column_end":4}},{"value":"/ The output has lane 0 as bit 0, lane 1 as bit 1, and so on.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9930338,"byte_end":9930401,"line_start":1825,"line_end":1825,"column_start":1,"column_end":64}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9930402,"byte_end":9930409,"line_start":1826,"line_end":1826,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9930410,"byte_end":9930433,"line_start":1827,"line_end":1827,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9930434,"byte_end":9930459,"line_start":1828,"line_end":1828,"column_start":1,"column_end":26}},{"value":"/   0_i8, -11, -2, 13, 4, 15, -6, 17, 8, 19, -20, 21, 22, 23, -24, 127,","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9930460,"byte_end":9930533,"line_start":1829,"line_end":1829,"column_start":1,"column_end":74}},{"value":"/ ]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9930534,"byte_end":9930541,"line_start":1830,"line_end":1830,"column_start":1,"column_end":8}},{"value":"/ let i = move_mask_i8_m128i(a);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9930542,"byte_end":9930576,"line_start":1831,"line_end":1831,"column_start":1,"column_end":35}},{"value":"/ assert_eq!(i, 0b0100010001000110);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9930577,"byte_end":9930615,"line_start":1832,"line_end":1832,"column_start":1,"column_end":39}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9930616,"byte_end":9930623,"line_start":1833,"line_end":1833,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9930624,"byte_end":9930635,"line_start":1834,"line_end":1834,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9930636,"byte_end":9930653,"line_start":1835,"line_end":1835,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":726},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9931125,"byte_end":9931140,"line_start":1853,"line_end":1853,"column_start":8,"column_end":23},"name":"move_mask_m128d","qualname":"::x86_x64::sse2::move_mask_m128d","value":"fn move_mask_m128d(m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Gathers the sign bit of each lane.","sig":null,"attributes":[{"value":"/ Gathers the sign bit of each lane.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9930794,"byte_end":9930832,"line_start":1841,"line_end":1841,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9930833,"byte_end":9930836,"line_start":1842,"line_end":1842,"column_start":1,"column_end":4}},{"value":"/ The output has lane 0 as bit 0, lane 1 as bit 1.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9930837,"byte_end":9930889,"line_start":1843,"line_end":1843,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9930890,"byte_end":9930897,"line_start":1844,"line_end":1844,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9930898,"byte_end":9930921,"line_start":1845,"line_end":1845,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([-1.0, 12.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9930922,"byte_end":9930966,"line_start":1846,"line_end":1846,"column_start":1,"column_end":45}},{"value":"/ let i = move_mask_m128d(a);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9930967,"byte_end":9930998,"line_start":1847,"line_end":1847,"column_start":1,"column_end":32}},{"value":"/ assert_eq!(i, 0b01);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9930999,"byte_end":9931023,"line_start":1848,"line_end":1848,"column_start":1,"column_end":25}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9931024,"byte_end":9931031,"line_start":1849,"line_end":1849,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9931032,"byte_end":9931043,"line_start":1850,"line_end":1850,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9931044,"byte_end":9931061,"line_start":1851,"line_end":1851,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":727},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9931627,"byte_end":9931650,"line_start":1869,"line_end":1869,"column_start":8,"column_end":31},"name":"mul_widen_u32_odd_m128i","qualname":"::x86_x64::sse2::mul_widen_u32_odd_m128i","value":"fn mul_widen_u32_odd_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Multiplies the odd `u32` lanes and gives the widened (`u64`) results.","sig":null,"attributes":[{"value":"/ Multiplies the odd `u32` lanes and gives the widened (`u64`) results.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9931197,"byte_end":9931270,"line_start":1857,"line_end":1857,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9931271,"byte_end":9931274,"line_start":1858,"line_end":1858,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9931275,"byte_end":9931282,"line_start":1859,"line_end":1859,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9931283,"byte_end":9931306,"line_start":1860,"line_end":1860,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 7, u32::MAX, 7]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9931307,"byte_end":9931352,"line_start":1861,"line_end":1861,"column_start":1,"column_end":46}},{"value":"/ let b = m128i::from([5, 7, u32::MAX, 7]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9931353,"byte_end":9931398,"line_start":1862,"line_end":1862,"column_start":1,"column_end":46}},{"value":"/ let c: [u64; 2] = mul_widen_u32_odd_m128i(a, b).into();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9931399,"byte_end":9931458,"line_start":1863,"line_end":1863,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(c, [(1 * 5), (u32::MAX as u64 * u32::MAX as u64)]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9931459,"byte_end":9931525,"line_start":1864,"line_end":1864,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9931526,"byte_end":9931533,"line_start":1865,"line_end":1865,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9931534,"byte_end":9931545,"line_start":1866,"line_end":1866,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9931546,"byte_end":9931563,"line_start":1867,"line_end":1867,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":728},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9932052,"byte_end":9932061,"line_start":1884,"line_end":1884,"column_start":8,"column_end":17},"name":"mul_m128d","qualname":"::x86_x64::sse2::mul_m128d","value":"fn mul_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a * b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -6.0]);\n let c = mul_m128d(a, b).to_array();\n assert_eq!(c, [9200.0, -525.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a * b`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9931729,"byte_end":9931750,"line_start":1873,"line_end":1873,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9931751,"byte_end":9931758,"line_start":1874,"line_end":1874,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9931759,"byte_end":9931782,"line_start":1875,"line_end":1875,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9931783,"byte_end":9931827,"line_start":1876,"line_end":1876,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -6.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9931828,"byte_end":9931873,"line_start":1877,"line_end":1877,"column_start":1,"column_end":46}},{"value":"/ let c = mul_m128d(a, b).to_array();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9931874,"byte_end":9931913,"line_start":1878,"line_end":1878,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(c, [9200.0, -525.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9931914,"byte_end":9931950,"line_start":1879,"line_end":1879,"column_start":1,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9931951,"byte_end":9931958,"line_start":1880,"line_end":1880,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9931959,"byte_end":9931970,"line_start":1881,"line_end":1881,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9931971,"byte_end":9931988,"line_start":1882,"line_end":1882,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":729},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9932486,"byte_end":9932497,"line_start":1899,"line_end":1899,"column_start":8,"column_end":19},"name":"mul_m128d_s","qualname":"::x86_x64::sse2::mul_m128d_s","value":"fn mul_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lowest lane `a * b`, high lane unchanged.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -600.0]);\n let c = mul_m128d_s(a, b).to_array();\n assert_eq!(c, [9200.0, 87.5]);\n ```\n","sig":null,"attributes":[{"value":"/ Lowest lane `a * b`, high lane unchanged.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9932137,"byte_end":9932182,"line_start":1888,"line_end":1888,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9932183,"byte_end":9932190,"line_start":1889,"line_end":1889,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9932191,"byte_end":9932214,"line_start":1890,"line_end":1890,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9932215,"byte_end":9932259,"line_start":1891,"line_end":1891,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -600.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9932260,"byte_end":9932307,"line_start":1892,"line_end":1892,"column_start":1,"column_end":48}},{"value":"/ let c = mul_m128d_s(a, b).to_array();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9932308,"byte_end":9932349,"line_start":1893,"line_end":1893,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [9200.0, 87.5]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9932350,"byte_end":9932384,"line_start":1894,"line_end":1894,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9932385,"byte_end":9932392,"line_start":1895,"line_end":1895,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9932393,"byte_end":9932404,"line_start":1896,"line_end":1896,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9932405,"byte_end":9932422,"line_start":1897,"line_end":1897,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":730},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9933042,"byte_end":9933065,"line_start":1915,"line_end":1915,"column_start":8,"column_end":31},"name":"mul_i16_keep_high_m128i","qualname":"::x86_x64::sse2::mul_i16_keep_high_m128i","value":"fn mul_i16_keep_high_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a * b` with lanes as `i16`, keep the high bits of the `i32`\n intermediates.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 200, 300, 4568, -1, -2, -3, -4]);\n let b = m128i::from([5_i16, 600, 700, 8910, -15, -26, -37, 48]);\n let c: [i16; 8] = mul_i16_keep_high_m128i(a, b).into();\n assert_eq!(c, [0, 1, 3, 621, 0, 0, 0, -1]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a * b` with lanes as `i16`, keep the high bits of the `i32`","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9932573,"byte_end":9932646,"line_start":1903,"line_end":1903,"column_start":1,"column_end":74}},{"value":"/ intermediates.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9932647,"byte_end":9932665,"line_start":1904,"line_end":1904,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9932666,"byte_end":9932673,"line_start":1905,"line_end":1905,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9932674,"byte_end":9932697,"line_start":1906,"line_end":1906,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 200, 300, 4568, -1, -2, -3, -4]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9932698,"byte_end":9932763,"line_start":1907,"line_end":1907,"column_start":1,"column_end":66}},{"value":"/ let b = m128i::from([5_i16, 600, 700, 8910, -15, -26, -37, 48]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9932764,"byte_end":9932832,"line_start":1908,"line_end":1908,"column_start":1,"column_end":69}},{"value":"/ let c: [i16; 8] = mul_i16_keep_high_m128i(a, b).into();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9932833,"byte_end":9932892,"line_start":1909,"line_end":1909,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(c, [0, 1, 3, 621, 0, 0, 0, -1]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9932893,"byte_end":9932940,"line_start":1910,"line_end":1910,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9932941,"byte_end":9932948,"line_start":1911,"line_end":1911,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9932949,"byte_end":9932960,"line_start":1912,"line_end":1912,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9932961,"byte_end":9932978,"line_start":1913,"line_end":1913,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":731},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9933617,"byte_end":9933640,"line_start":1931,"line_end":1931,"column_start":8,"column_end":31},"name":"mul_u16_keep_high_m128i","qualname":"::x86_x64::sse2::mul_u16_keep_high_m128i","value":"fn mul_u16_keep_high_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a * b` with lanes as `u16`, keep the high bits of the `u32`\n intermediates.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_u16, 2003, 3005, 45687, 1, 2, 3, 4]);\n let b = m128i::from([5_u16, 6004, 7006, 8910, 15, 26, 37, 48]);\n let c: [u16; 8] = mul_u16_keep_high_m128i(a, b).into();\n assert_eq!(c, [0, 183, 321, 6211, 0, 0, 0, 0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a * b` with lanes as `u16`, keep the high bits of the `u32`","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9933146,"byte_end":9933219,"line_start":1919,"line_end":1919,"column_start":1,"column_end":74}},{"value":"/ intermediates.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9933220,"byte_end":9933238,"line_start":1920,"line_end":1920,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9933239,"byte_end":9933246,"line_start":1921,"line_end":1921,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9933247,"byte_end":9933270,"line_start":1922,"line_end":1922,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u16, 2003, 3005, 45687, 1, 2, 3, 4]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9933271,"byte_end":9933335,"line_start":1923,"line_end":1923,"column_start":1,"column_end":65}},{"value":"/ let b = m128i::from([5_u16, 6004, 7006, 8910, 15, 26, 37, 48]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9933336,"byte_end":9933403,"line_start":1924,"line_end":1924,"column_start":1,"column_end":68}},{"value":"/ let c: [u16; 8] = mul_u16_keep_high_m128i(a, b).into();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9933404,"byte_end":9933463,"line_start":1925,"line_end":1925,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(c, [0, 183, 321, 6211, 0, 0, 0, 0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9933464,"byte_end":9933515,"line_start":1926,"line_end":1926,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9933516,"byte_end":9933523,"line_start":1927,"line_end":1927,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9933524,"byte_end":9933535,"line_start":1928,"line_end":1928,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9933536,"byte_end":9933553,"line_start":1929,"line_end":1929,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":732},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9934204,"byte_end":9934226,"line_start":1947,"line_end":1947,"column_start":8,"column_end":30},"name":"mul_i16_keep_low_m128i","qualname":"::x86_x64::sse2::mul_i16_keep_low_m128i","value":"fn mul_i16_keep_low_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a * b` with lanes as `i16`, keep the low bits of the `i32`\n intermediates.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 200, 300, 4568, -1, -2, -3, -4]);\n let b = m128i::from([5_i16, 600, 700, 8910, -15, -26, -37, 48]);\n let c: [i16; 8] = mul_i16_keep_low_m128i(a, b).into();\n assert_eq!(c, [5, -11072, 13392, 3024, 15, 52, 111, -192]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a * b` with lanes as `i16`, keep the low bits of the `i32`","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9933721,"byte_end":9933793,"line_start":1935,"line_end":1935,"column_start":1,"column_end":73}},{"value":"/ intermediates.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9933794,"byte_end":9933812,"line_start":1936,"line_end":1936,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9933813,"byte_end":9933820,"line_start":1937,"line_end":1937,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9933821,"byte_end":9933844,"line_start":1938,"line_end":1938,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 200, 300, 4568, -1, -2, -3, -4]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9933845,"byte_end":9933910,"line_start":1939,"line_end":1939,"column_start":1,"column_end":66}},{"value":"/ let b = m128i::from([5_i16, 600, 700, 8910, -15, -26, -37, 48]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9933911,"byte_end":9933979,"line_start":1940,"line_end":1940,"column_start":1,"column_end":69}},{"value":"/ let c: [i16; 8] = mul_i16_keep_low_m128i(a, b).into();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9933980,"byte_end":9934038,"line_start":1941,"line_end":1941,"column_start":1,"column_end":59}},{"value":"/ assert_eq!(c, [5, -11072, 13392, 3024, 15, 52, 111, -192]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9934039,"byte_end":9934102,"line_start":1942,"line_end":1942,"column_start":1,"column_end":64}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9934103,"byte_end":9934110,"line_start":1943,"line_end":1943,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9934111,"byte_end":9934122,"line_start":1944,"line_end":1944,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9934123,"byte_end":9934140,"line_start":1945,"line_end":1945,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":733},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9934620,"byte_end":9934631,"line_start":1962,"line_end":1962,"column_start":8,"column_end":19},"name":"bitor_m128d","qualname":"::x86_x64::sse2::bitor_m128d","value":"fn bitor_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a | b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 0.0]);\n let b = m128d::from_array([1.0, 1.0]);\n let c = bitor_m128d(a, b).to_array();\n assert_eq!(c, [1.0, 1.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a | b`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9934307,"byte_end":9934327,"line_start":1951,"line_end":1951,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9934328,"byte_end":9934335,"line_start":1952,"line_end":1952,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9934336,"byte_end":9934359,"line_start":1953,"line_end":1953,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 0.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9934360,"byte_end":9934402,"line_start":1954,"line_end":1954,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9934403,"byte_end":9934445,"line_start":1955,"line_end":1955,"column_start":1,"column_end":43}},{"value":"/ let c = bitor_m128d(a, b).to_array();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9934446,"byte_end":9934487,"line_start":1956,"line_end":1956,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [1.0, 1.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9934488,"byte_end":9934518,"line_start":1957,"line_end":1957,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9934519,"byte_end":9934526,"line_start":1958,"line_end":1958,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9934527,"byte_end":9934538,"line_start":1959,"line_end":1959,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9934539,"byte_end":9934556,"line_start":1960,"line_end":1960,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":734},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9935019,"byte_end":9935030,"line_start":1977,"line_end":1977,"column_start":8,"column_end":19},"name":"bitor_m128i","qualname":"::x86_x64::sse2::bitor_m128i","value":"fn bitor_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a | b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 0, 1, 0]);\n let b = m128i::from([1, 1, 0, 0]);\n let c: [i32; 4] = bitor_m128i(a, b).into();\n assert_eq!(c, [1, 1, 1, 0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a | b`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9934706,"byte_end":9934726,"line_start":1966,"line_end":1966,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9934727,"byte_end":9934734,"line_start":1967,"line_end":1967,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9934735,"byte_end":9934758,"line_start":1968,"line_end":1968,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 0, 1, 0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9934759,"byte_end":9934797,"line_start":1969,"line_end":1969,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([1, 1, 0, 0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9934798,"byte_end":9934836,"line_start":1970,"line_end":1970,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = bitor_m128i(a, b).into();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9934837,"byte_end":9934884,"line_start":1971,"line_end":1971,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [1, 1, 1, 0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9934885,"byte_end":9934917,"line_start":1972,"line_end":1972,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9934918,"byte_end":9934925,"line_start":1973,"line_end":1973,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9934926,"byte_end":9934937,"line_start":1974,"line_end":1974,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9934938,"byte_end":9934955,"line_start":1975,"line_end":1975,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":735},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9935553,"byte_end":9935573,"line_start":1992,"line_end":1992,"column_start":8,"column_end":28},"name":"pack_i16_to_i8_m128i","qualname":"::x86_x64::sse2::pack_i16_to_i8_m128i","value":"fn pack_i16_to_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Saturating convert `i16` to `i8`, and pack the values.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, 5, 6, 7, 8]);\n let b = m128i::from([9_i16, 10, 11, 12, 13, 14, 15, 16]);\n let c: [i8; 16] = pack_i16_to_i8_m128i(a, b).into();\n assert_eq!(c, [1_i8, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]);\n ```\n","sig":null,"attributes":[{"value":"/ Saturating convert `i16` to `i8`, and pack the values.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9935108,"byte_end":9935166,"line_start":1981,"line_end":1981,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9935167,"byte_end":9935174,"line_start":1982,"line_end":1982,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9935175,"byte_end":9935198,"line_start":1983,"line_end":1983,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, 5, 6, 7, 8]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9935199,"byte_end":9935253,"line_start":1984,"line_end":1984,"column_start":1,"column_end":55}},{"value":"/ let b = m128i::from([9_i16, 10, 11, 12, 13, 14, 15, 16]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9935254,"byte_end":9935315,"line_start":1985,"line_end":1985,"column_start":1,"column_end":62}},{"value":"/ let c: [i8; 16] = pack_i16_to_i8_m128i(a, b).into();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9935316,"byte_end":9935372,"line_start":1986,"line_end":1986,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [1_i8, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9935373,"byte_end":9935451,"line_start":1987,"line_end":1987,"column_start":1,"column_end":79}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9935452,"byte_end":9935459,"line_start":1988,"line_end":1988,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9935460,"byte_end":9935471,"line_start":1989,"line_end":1989,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9935472,"byte_end":9935489,"line_start":1990,"line_end":1990,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":736},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9936040,"byte_end":9936061,"line_start":2007,"line_end":2007,"column_start":8,"column_end":29},"name":"pack_i32_to_i16_m128i","qualname":"::x86_x64::sse2::pack_i32_to_i16_m128i","value":"fn pack_i32_to_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Saturating convert `i32` to `i16`, and pack the values.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i32, 2, 3, 4]);\n let b = m128i::from([5_i32, 6, 7, 8]);\n let c: [i16; 8] = pack_i32_to_i16_m128i(a, b).into();\n assert_eq!(c, [1_i16, 2, 3, 4, 5, 6, 7, 8]);\n ```\n","sig":null,"attributes":[{"value":"/ Saturating convert `i32` to `i16`, and pack the values.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9935654,"byte_end":9935713,"line_start":1996,"line_end":1996,"column_start":1,"column_end":60}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9935714,"byte_end":9935721,"line_start":1997,"line_end":1997,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9935722,"byte_end":9935745,"line_start":1998,"line_end":1998,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i32, 2, 3, 4]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9935746,"byte_end":9935788,"line_start":1999,"line_end":1999,"column_start":1,"column_end":43}},{"value":"/ let b = m128i::from([5_i32, 6, 7, 8]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9935789,"byte_end":9935831,"line_start":2000,"line_end":2000,"column_start":1,"column_end":43}},{"value":"/ let c: [i16; 8] = pack_i32_to_i16_m128i(a, b).into();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9935832,"byte_end":9935889,"line_start":2001,"line_end":2001,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [1_i16, 2, 3, 4, 5, 6, 7, 8]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9935890,"byte_end":9935938,"line_start":2002,"line_end":2002,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9935939,"byte_end":9935946,"line_start":2003,"line_end":2003,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9935947,"byte_end":9935958,"line_start":2004,"line_end":2004,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9935959,"byte_end":9935976,"line_start":2005,"line_end":2005,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":737},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9936621,"byte_end":9936641,"line_start":2025,"line_end":2025,"column_start":8,"column_end":28},"name":"pack_i16_to_u8_m128i","qualname":"::x86_x64::sse2::pack_i16_to_u8_m128i","value":"fn pack_i16_to_u8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Saturating convert `i16` to `u8`, and pack the values.\n ```\n # use safe_arch::*;\n let a = m128i::from([-1_i16, 2, -3, 4, -5, 6, -7, 8]);\n let b = m128i::from([9_i16, 10, 11, 12, 13, -14, 15, -16]);\n let c: [u8; 16] = pack_i16_to_i8_m128i(a, b).into();\n assert_eq!(\n   c,\n   [255_u8, 2, 253, 4, 251, 6, 249, 8, 9, 10, 11, 12, 13, 242, 15, 240]\n );\n ```\n","sig":null,"attributes":[{"value":"/ Saturating convert `i16` to `u8`, and pack the values.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9936142,"byte_end":9936200,"line_start":2011,"line_end":2011,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9936201,"byte_end":9936208,"line_start":2012,"line_end":2012,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9936209,"byte_end":9936232,"line_start":2013,"line_end":2013,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([-1_i16, 2, -3, 4, -5, 6, -7, 8]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9936233,"byte_end":9936291,"line_start":2014,"line_end":2014,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([9_i16, 10, 11, 12, 13, -14, 15, -16]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9936292,"byte_end":9936355,"line_start":2015,"line_end":2015,"column_start":1,"column_end":64}},{"value":"/ let c: [u8; 16] = pack_i16_to_i8_m128i(a, b).into();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9936356,"byte_end":9936412,"line_start":2016,"line_end":2016,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9936413,"byte_end":9936428,"line_start":2017,"line_end":2017,"column_start":1,"column_end":16}},{"value":"/   c,","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9936429,"byte_end":9936437,"line_start":2018,"line_end":2018,"column_start":1,"column_end":9}},{"value":"/   [255_u8, 2, 253, 4, 251, 6, 249, 8, 9, 10, 11, 12, 13, 242, 15, 240]","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9936438,"byte_end":9936512,"line_start":2019,"line_end":2019,"column_start":1,"column_end":75}},{"value":"/ );","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9936513,"byte_end":9936519,"line_start":2020,"line_end":2020,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9936520,"byte_end":9936527,"line_start":2021,"line_end":2021,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9936528,"byte_end":9936539,"line_start":2022,"line_end":2022,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9936540,"byte_end":9936557,"line_start":2023,"line_end":2023,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":738},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9937398,"byte_end":9937422,"line_start":2048,"line_end":2048,"column_start":8,"column_end":32},"name":"sum_of_u8_abs_diff_m128i","qualname":"::x86_x64::sse2::sum_of_u8_abs_diff_m128i","value":"fn sum_of_u8_abs_diff_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Compute \"sum of `u8` absolute differences\".","sig":null,"attributes":[{"value":"/ Compute \"sum of `u8` absolute differences\".","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9936723,"byte_end":9936770,"line_start":2029,"line_end":2029,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9936771,"byte_end":9936774,"line_start":2030,"line_end":2030,"column_start":1,"column_end":4}},{"value":"/ * `u8` lanewise `abs(a - b)`, producing `u8` intermediate values.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9936775,"byte_end":9936844,"line_start":2031,"line_end":2031,"column_start":1,"column_end":70}},{"value":"/ * Sum the first eight and second eight values.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9936845,"byte_end":9936895,"line_start":2032,"line_end":2032,"column_start":1,"column_end":51}},{"value":"/ * Place into the low 16 bits of two `u64` lanes.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9936896,"byte_end":9936948,"line_start":2033,"line_end":2033,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9936949,"byte_end":9936956,"line_start":2034,"line_end":2034,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9936957,"byte_end":9936980,"line_start":2035,"line_end":2035,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9936981,"byte_end":9937006,"line_start":2036,"line_end":2036,"column_start":1,"column_end":26}},{"value":"/   0_u8, 11, 2, 13, 4, 15, 6, 17, 8, 19, 20, 21, 22, 23, 24, 127,","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9937007,"byte_end":9937075,"line_start":2037,"line_end":2037,"column_start":1,"column_end":69}},{"value":"/ ]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9937076,"byte_end":9937083,"line_start":2038,"line_end":2038,"column_start":1,"column_end":8}},{"value":"/ let b = m128i::from([","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9937084,"byte_end":9937109,"line_start":2039,"line_end":2039,"column_start":1,"column_end":26}},{"value":"/   20_u8, 110, 250, 103, 34, 105, 60, 217, 8, 19, 210, 201, 202, 203, 204, 127,","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9937110,"byte_end":9937192,"line_start":2040,"line_end":2040,"column_start":1,"column_end":83}},{"value":"/ ]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9937193,"byte_end":9937200,"line_start":2041,"line_end":2041,"column_start":1,"column_end":8}},{"value":"/ let c: [u64; 2] = sum_of_u8_abs_diff_m128i(a, b).into();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9937201,"byte_end":9937261,"line_start":2042,"line_end":2042,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(c, [831_u64, 910]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9937262,"byte_end":9937296,"line_start":2043,"line_end":2043,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9937297,"byte_end":9937304,"line_start":2044,"line_end":2044,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9937305,"byte_end":9937316,"line_start":2045,"line_end":2045,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9937317,"byte_end":9937334,"line_start":2046,"line_end":2046,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":739},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9938005,"byte_end":9938017,"line_start":2065,"line_end":2065,"column_start":8,"column_end":20},"name":"set_i8_m128i","qualname":"::x86_x64::sse2::set_i8_m128i","value":"fn set_i8_m128i(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8,\ni8) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128i`, first arg is the high lane.\n ```\n # use safe_arch::*;\n let a =\n   m128i::from([15_i8, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]);\n let b = set_i8_m128i(0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);\n assert_eq!(<[i8; 16]>::from(a), <[i8; 16]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128i`, first arg is the high lane.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9937500,"byte_end":9937562,"line_start":2052,"line_end":2052,"column_start":1,"column_end":63}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9937563,"byte_end":9937570,"line_start":2053,"line_end":2053,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9937571,"byte_end":9937594,"line_start":2054,"line_end":2054,"column_start":1,"column_end":24}},{"value":"/ let a =","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9937595,"byte_end":9937606,"line_start":2055,"line_end":2055,"column_start":1,"column_end":12}},{"value":"/   m128i::from([15_i8, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9937607,"byte_end":9937684,"line_start":2056,"line_end":2056,"column_start":1,"column_end":78}},{"value":"/ let b = set_i8_m128i(0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9937685,"byte_end":9937767,"line_start":2057,"line_end":2057,"column_start":1,"column_end":83}},{"value":"/ assert_eq!(<[i8; 16]>::from(a), <[i8; 16]>::from(b));","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9937768,"byte_end":9937825,"line_start":2058,"line_end":2058,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9937826,"byte_end":9937833,"line_start":2059,"line_end":2059,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9937834,"byte_end":9937845,"line_start":2060,"line_end":2060,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9937846,"byte_end":9937863,"line_start":2061,"line_end":2061,"column_start":1,"column_end":18}},{"value":"allow(clippy :: too_many_arguments)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9937864,"byte_end":9937900,"line_start":2062,"line_end":2062,"column_start":1,"column_end":37}},{"value":"allow(clippy :: many_single_char_names)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9937901,"byte_end":9937941,"line_start":2063,"line_end":2063,"column_start":1,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":740},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9938674,"byte_end":9938687,"line_start":2084,"line_end":2084,"column_start":8,"column_end":21},"name":"set_i16_m128i","qualname":"::x86_x64::sse2::set_i16_m128i","value":"fn set_i16_m128i(i16, i16, i16, i16, i16, i16, i16, i16) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128i`, first arg is the high lane.\n ```\n # use safe_arch::*;\n let a = m128i::from([7_i16, 6, 5, 4, 3, 2, 1, 0]);\n let b = set_i16_m128i(0_i16, 1, 2, 3, 4, 5, 6, 7);\n assert_eq!(<[i16; 8]>::from(a), <[i16; 8]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128i`, first arg is the high lane.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9938232,"byte_end":9938294,"line_start":2072,"line_end":2072,"column_start":1,"column_end":63}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9938295,"byte_end":9938302,"line_start":2073,"line_end":2073,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9938303,"byte_end":9938326,"line_start":2074,"line_end":2074,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([7_i16, 6, 5, 4, 3, 2, 1, 0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9938327,"byte_end":9938381,"line_start":2075,"line_end":2075,"column_start":1,"column_end":55}},{"value":"/ let b = set_i16_m128i(0_i16, 1, 2, 3, 4, 5, 6, 7);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9938382,"byte_end":9938436,"line_start":2076,"line_end":2076,"column_start":1,"column_end":55}},{"value":"/ assert_eq!(<[i16; 8]>::from(a), <[i16; 8]>::from(b));","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9938437,"byte_end":9938494,"line_start":2077,"line_end":2077,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9938495,"byte_end":9938502,"line_start":2078,"line_end":2078,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9938503,"byte_end":9938514,"line_start":2079,"line_end":2079,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9938515,"byte_end":9938532,"line_start":2080,"line_end":2080,"column_start":1,"column_end":18}},{"value":"allow(clippy :: too_many_arguments)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9938533,"byte_end":9938569,"line_start":2081,"line_end":2081,"column_start":1,"column_end":37}},{"value":"allow(clippy :: many_single_char_names)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9938570,"byte_end":9938610,"line_start":2082,"line_end":2082,"column_start":1,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":741},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9939161,"byte_end":9939174,"line_start":2100,"line_end":2100,"column_start":8,"column_end":21},"name":"set_i32_m128i","qualname":"::x86_x64::sse2::set_i32_m128i","value":"fn set_i32_m128i(i32, i32, i32, i32) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128i`, first arg is the high lane.\n ```\n # use safe_arch::*;\n let a = m128i::from([3, 2, 1, 0]);\n let b = set_i32_m128i(0, 1, 2, 3);\n assert_eq!(<[i32; 4]>::from(a), <[i32; 4]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128i`, first arg is the high lane.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9938829,"byte_end":9938891,"line_start":2090,"line_end":2090,"column_start":1,"column_end":63}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9938892,"byte_end":9938899,"line_start":2091,"line_end":2091,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9938900,"byte_end":9938923,"line_start":2092,"line_end":2092,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([3, 2, 1, 0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9938924,"byte_end":9938962,"line_start":2093,"line_end":2093,"column_start":1,"column_end":39}},{"value":"/ let b = set_i32_m128i(0, 1, 2, 3);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9938963,"byte_end":9939001,"line_start":2094,"line_end":2094,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(<[i32; 4]>::from(a), <[i32; 4]>::from(b));","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9939002,"byte_end":9939059,"line_start":2095,"line_end":2095,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9939060,"byte_end":9939067,"line_start":2096,"line_end":2096,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9939068,"byte_end":9939079,"line_start":2097,"line_end":2097,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9939080,"byte_end":9939097,"line_start":2098,"line_end":2098,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":742},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9939591,"byte_end":9939604,"line_start":2114,"line_end":2114,"column_start":8,"column_end":21},"name":"set_i64_m128i","qualname":"::x86_x64::sse2::set_i64_m128i","value":"fn set_i64_m128i(i64, i64) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128i`, first arg is the high lane.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i64, 0]);\n let b = set_i64_m128i(0, 1);\n assert_eq!(<[i64; 2]>::from(a), <[i64; 2]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128i`, first arg is the high lane.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9939267,"byte_end":9939329,"line_start":2104,"line_end":2104,"column_start":1,"column_end":63}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9939330,"byte_end":9939337,"line_start":2105,"line_end":2105,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9939338,"byte_end":9939361,"line_start":2106,"line_end":2106,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i64, 0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9939362,"byte_end":9939398,"line_start":2107,"line_end":2107,"column_start":1,"column_end":37}},{"value":"/ let b = set_i64_m128i(0, 1);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9939399,"byte_end":9939431,"line_start":2108,"line_end":2108,"column_start":1,"column_end":33}},{"value":"/ assert_eq!(<[i64; 2]>::from(a), <[i64; 2]>::from(b));","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9939432,"byte_end":9939489,"line_start":2109,"line_end":2109,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9939490,"byte_end":9939497,"line_start":2110,"line_end":2110,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9939498,"byte_end":9939509,"line_start":2111,"line_end":2111,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9939510,"byte_end":9939527,"line_start":2112,"line_end":2112,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":743},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9939992,"byte_end":9940001,"line_start":2128,"line_end":2128,"column_start":8,"column_end":17},"name":"set_m128d","qualname":"::x86_x64::sse2::set_m128d","value":"fn set_m128d(f64, f64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128d`, first arg is the high lane.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 0.0]);\n let b = set_m128d(0.0, 1.0);\n assert_eq!(a.to_array(), b.to_array());\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128d`, first arg is the high lane.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9939676,"byte_end":9939738,"line_start":2118,"line_end":2118,"column_start":1,"column_end":63}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9939739,"byte_end":9939746,"line_start":2119,"line_end":2119,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9939747,"byte_end":9939770,"line_start":2120,"line_end":2120,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 0.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9939771,"byte_end":9939813,"line_start":2121,"line_end":2121,"column_start":1,"column_end":43}},{"value":"/ let b = set_m128d(0.0, 1.0);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9939814,"byte_end":9939846,"line_start":2122,"line_end":2122,"column_start":1,"column_end":33}},{"value":"/ assert_eq!(a.to_array(), b.to_array());","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9939847,"byte_end":9939890,"line_start":2123,"line_end":2123,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9939891,"byte_end":9939898,"line_start":2124,"line_end":2124,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9939899,"byte_end":9939910,"line_start":2125,"line_end":2125,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9939911,"byte_end":9939928,"line_start":2126,"line_end":2126,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":744},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9940369,"byte_end":9940380,"line_start":2142,"line_end":2142,"column_start":8,"column_end":19},"name":"set_m128d_s","qualname":"::x86_x64::sse2::set_m128d_s","value":"fn set_m128d_s(f64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into the low lane of a `m128d`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 0.0]);\n let b = set_m128d_s(1.0);\n assert_eq!(a.to_array(), b.to_array());\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into the low lane of a `m128d`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9940069,"byte_end":9940118,"line_start":2132,"line_end":2132,"column_start":1,"column_end":50}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9940119,"byte_end":9940126,"line_start":2133,"line_end":2133,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9940127,"byte_end":9940150,"line_start":2134,"line_end":2134,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 0.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9940151,"byte_end":9940193,"line_start":2135,"line_end":2135,"column_start":1,"column_end":43}},{"value":"/ let b = set_m128d_s(1.0);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9940194,"byte_end":9940223,"line_start":2136,"line_end":2136,"column_start":1,"column_end":30}},{"value":"/ assert_eq!(a.to_array(), b.to_array());","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9940224,"byte_end":9940267,"line_start":2137,"line_end":2137,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9940268,"byte_end":9940275,"line_start":2138,"line_end":2138,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9940276,"byte_end":9940287,"line_start":2139,"line_end":2139,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9940288,"byte_end":9940305,"line_start":2140,"line_end":2140,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":745},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9940743,"byte_end":9940758,"line_start":2156,"line_end":2156,"column_start":8,"column_end":23},"name":"set_splat_m128d","qualname":"::x86_x64::sse2::set_splat_m128d","value":"fn set_splat_m128d(f64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Splats the args into both lanes of the `m128d`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 1.0]);\n let b = set_splat_m128d(1.0);\n assert_eq!(a.to_array(), b.to_array());\n ```\n","sig":null,"attributes":[{"value":"/ Splats the args into both lanes of the `m128d`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9940437,"byte_end":9940488,"line_start":2146,"line_end":2146,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9940489,"byte_end":9940496,"line_start":2147,"line_end":2147,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9940497,"byte_end":9940520,"line_start":2148,"line_end":2148,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9940521,"byte_end":9940563,"line_start":2149,"line_end":2149,"column_start":1,"column_end":43}},{"value":"/ let b = set_splat_m128d(1.0);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9940564,"byte_end":9940597,"line_start":2150,"line_end":2150,"column_start":1,"column_end":34}},{"value":"/ assert_eq!(a.to_array(), b.to_array());","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9940598,"byte_end":9940641,"line_start":2151,"line_end":2151,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9940642,"byte_end":9940649,"line_start":2152,"line_end":2152,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9940650,"byte_end":9940661,"line_start":2153,"line_end":2153,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9940662,"byte_end":9940679,"line_start":2154,"line_end":2154,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":746},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9941169,"byte_end":9941187,"line_start":2170,"line_end":2170,"column_start":8,"column_end":26},"name":"set_splat_i8_m128i","qualname":"::x86_x64::sse2::set_splat_i8_m128i","value":"fn set_splat_i8_m128i(i8) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Splats the `i8` to all lanes of the `m128i`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]);\n let b = set_splat_i8_m128i(1);\n assert_eq!(<[i8; 16]>::from(a), <[i8; 16]>::from(a));\n ```\n","sig":null,"attributes":[{"value":"/ Splats the `i8` to all lanes of the `m128i`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9940816,"byte_end":9940864,"line_start":2160,"line_end":2160,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9940865,"byte_end":9940872,"line_start":2161,"line_end":2161,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9940873,"byte_end":9940896,"line_start":2162,"line_end":2162,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9940897,"byte_end":9940974,"line_start":2163,"line_end":2163,"column_start":1,"column_end":78}},{"value":"/ let b = set_splat_i8_m128i(1);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9940975,"byte_end":9941009,"line_start":2164,"line_end":2164,"column_start":1,"column_end":35}},{"value":"/ assert_eq!(<[i8; 16]>::from(a), <[i8; 16]>::from(a));","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9941010,"byte_end":9941067,"line_start":2165,"line_end":2165,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9941068,"byte_end":9941075,"line_start":2166,"line_end":2166,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9941076,"byte_end":9941087,"line_start":2167,"line_end":2167,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9941088,"byte_end":9941105,"line_start":2168,"line_end":2168,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":747},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9941578,"byte_end":9941597,"line_start":2184,"line_end":2184,"column_start":8,"column_end":27},"name":"set_splat_i16_m128i","qualname":"::x86_x64::sse2::set_splat_i16_m128i","value":"fn set_splat_i16_m128i(i16) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Splats the `i16` to all lanes of the `m128i`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 1, 1, 1, 1, 1, 1, 1]);\n let b = set_splat_i16_m128i(1);\n assert_eq!(<[i16; 8]>::from(a), <[i16; 8]>::from(a));\n ```\n","sig":null,"attributes":[{"value":"/ Splats the `i16` to all lanes of the `m128i`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9941246,"byte_end":9941295,"line_start":2174,"line_end":2174,"column_start":1,"column_end":50}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9941296,"byte_end":9941303,"line_start":2175,"line_end":2175,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9941304,"byte_end":9941327,"line_start":2176,"line_end":2176,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 1, 1, 1, 1, 1, 1, 1]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9941328,"byte_end":9941382,"line_start":2177,"line_end":2177,"column_start":1,"column_end":55}},{"value":"/ let b = set_splat_i16_m128i(1);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9941383,"byte_end":9941418,"line_start":2178,"line_end":2178,"column_start":1,"column_end":36}},{"value":"/ assert_eq!(<[i16; 8]>::from(a), <[i16; 8]>::from(a));","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9941419,"byte_end":9941476,"line_start":2179,"line_end":2179,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9941477,"byte_end":9941484,"line_start":2180,"line_end":2180,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9941485,"byte_end":9941496,"line_start":2181,"line_end":2181,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9941497,"byte_end":9941514,"line_start":2182,"line_end":2182,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":748},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9941974,"byte_end":9941993,"line_start":2198,"line_end":2198,"column_start":8,"column_end":27},"name":"set_splat_i32_m128i","qualname":"::x86_x64::sse2::set_splat_i32_m128i","value":"fn set_splat_i32_m128i(i32) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Splats the `i32` to all lanes of the `m128i`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 1, 1, 1]);\n let b = set_splat_i32_m128i(1);\n assert_eq!(<[i32; 4]>::from(a), <[i32; 4]>::from(a));\n ```\n","sig":null,"attributes":[{"value":"/ Splats the `i32` to all lanes of the `m128i`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9941658,"byte_end":9941707,"line_start":2188,"line_end":2188,"column_start":1,"column_end":50}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9941708,"byte_end":9941715,"line_start":2189,"line_end":2189,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9941716,"byte_end":9941739,"line_start":2190,"line_end":2190,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 1, 1, 1]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9941740,"byte_end":9941778,"line_start":2191,"line_end":2191,"column_start":1,"column_end":39}},{"value":"/ let b = set_splat_i32_m128i(1);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9941779,"byte_end":9941814,"line_start":2192,"line_end":2192,"column_start":1,"column_end":36}},{"value":"/ assert_eq!(<[i32; 4]>::from(a), <[i32; 4]>::from(a));","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9941815,"byte_end":9941872,"line_start":2193,"line_end":2193,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9941873,"byte_end":9941880,"line_start":2194,"line_end":2194,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9941881,"byte_end":9941892,"line_start":2195,"line_end":2195,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9941893,"byte_end":9941910,"line_start":2196,"line_end":2196,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":749},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9942369,"byte_end":9942388,"line_start":2212,"line_end":2212,"column_start":8,"column_end":27},"name":"set_splat_i64_m128i","qualname":"::x86_x64::sse2::set_splat_i64_m128i","value":"fn set_splat_i64_m128i(i64) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Splats the `i64` to both lanes of the `m128i`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i64, 1]);\n let b = set_splat_i64_m128i(1);\n assert_eq!(<[i64; 2]>::from(a), <[i64; 2]>::from(a));\n ```\n","sig":null,"attributes":[{"value":"/ Splats the `i64` to both lanes of the `m128i`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9942054,"byte_end":9942104,"line_start":2202,"line_end":2202,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9942105,"byte_end":9942112,"line_start":2203,"line_end":2203,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9942113,"byte_end":9942136,"line_start":2204,"line_end":2204,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i64, 1]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9942137,"byte_end":9942173,"line_start":2205,"line_end":2205,"column_start":1,"column_end":37}},{"value":"/ let b = set_splat_i64_m128i(1);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9942174,"byte_end":9942209,"line_start":2206,"line_end":2206,"column_start":1,"column_end":36}},{"value":"/ assert_eq!(<[i64; 2]>::from(a), <[i64; 2]>::from(a));","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9942210,"byte_end":9942267,"line_start":2207,"line_end":2207,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9942268,"byte_end":9942275,"line_start":2208,"line_end":2208,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9942276,"byte_end":9942287,"line_start":2209,"line_end":2209,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9942288,"byte_end":9942305,"line_start":2210,"line_end":2210,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":750},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9942976,"byte_end":9942997,"line_start":2231,"line_end":2231,"column_start":8,"column_end":29},"name":"set_reversed_i8_m128i","qualname":"::x86_x64::sse2::set_reversed_i8_m128i","value":"fn set_reversed_i8_m128i(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8,\ni8, i8, i8) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128i`, first arg is the low lane.\n ```\n # use safe_arch::*;\n let a =\n   m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n let b = set_reversed_i8_m128i(\n   0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n );\n assert_eq!(<[i8; 16]>::from(a), <[i8; 16]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128i`, first arg is the low lane.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9942450,"byte_end":9942511,"line_start":2216,"line_end":2216,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9942512,"byte_end":9942519,"line_start":2217,"line_end":2217,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9942520,"byte_end":9942543,"line_start":2218,"line_end":2218,"column_start":1,"column_end":24}},{"value":"/ let a =","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9942544,"byte_end":9942555,"line_start":2219,"line_end":2219,"column_start":1,"column_end":12}},{"value":"/   m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9942556,"byte_end":9942633,"line_start":2220,"line_end":2220,"column_start":1,"column_end":78}},{"value":"/ let b = set_reversed_i8_m128i(","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9942634,"byte_end":9942668,"line_start":2221,"line_end":2221,"column_start":1,"column_end":35}},{"value":"/   0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9942669,"byte_end":9942731,"line_start":2222,"line_end":2222,"column_start":1,"column_end":63}},{"value":"/ );","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9942732,"byte_end":9942738,"line_start":2223,"line_end":2223,"column_start":1,"column_end":7}},{"value":"/ assert_eq!(<[i8; 16]>::from(a), <[i8; 16]>::from(b));","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9942739,"byte_end":9942796,"line_start":2224,"line_end":2224,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9942797,"byte_end":9942804,"line_start":2225,"line_end":2225,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9942805,"byte_end":9942816,"line_start":2226,"line_end":2226,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9942817,"byte_end":9942834,"line_start":2227,"line_end":2227,"column_start":1,"column_end":18}},{"value":"allow(clippy :: too_many_arguments)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9942835,"byte_end":9942871,"line_start":2228,"line_end":2228,"column_start":1,"column_end":37}},{"value":"allow(clippy :: many_single_char_names)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9942872,"byte_end":9942912,"line_start":2229,"line_end":2229,"column_start":1,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":751},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9943669,"byte_end":9943691,"line_start":2252,"line_end":2252,"column_start":8,"column_end":30},"name":"set_reversed_i16_m128i","qualname":"::x86_x64::sse2::set_reversed_i16_m128i","value":"fn set_reversed_i16_m128i(i16, i16, i16, i16, i16, i16, i16, i16) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128i`, first arg is the low lane.\n ```\n # use safe_arch::*;\n let a = m128i::from([0_i16, 1, 2, 3, 4, 5, 6, 7]);\n let b = set_reversed_i16_m128i(0_i16, 1, 2, 3, 4, 5, 6, 7);\n assert_eq!(<[i16; 8]>::from(a), <[i16; 8]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128i`, first arg is the low lane.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9943219,"byte_end":9943280,"line_start":2240,"line_end":2240,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9943281,"byte_end":9943288,"line_start":2241,"line_end":2241,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9943289,"byte_end":9943312,"line_start":2242,"line_end":2242,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0_i16, 1, 2, 3, 4, 5, 6, 7]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9943313,"byte_end":9943367,"line_start":2243,"line_end":2243,"column_start":1,"column_end":55}},{"value":"/ let b = set_reversed_i16_m128i(0_i16, 1, 2, 3, 4, 5, 6, 7);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9943368,"byte_end":9943431,"line_start":2244,"line_end":2244,"column_start":1,"column_end":64}},{"value":"/ assert_eq!(<[i16; 8]>::from(a), <[i16; 8]>::from(b));","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9943432,"byte_end":9943489,"line_start":2245,"line_end":2245,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9943490,"byte_end":9943497,"line_start":2246,"line_end":2246,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9943498,"byte_end":9943509,"line_start":2247,"line_end":2247,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9943510,"byte_end":9943527,"line_start":2248,"line_end":2248,"column_start":1,"column_end":18}},{"value":"allow(clippy :: too_many_arguments)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9943528,"byte_end":9943564,"line_start":2249,"line_end":2249,"column_start":1,"column_end":37}},{"value":"allow(clippy :: many_single_char_names)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9943565,"byte_end":9943605,"line_start":2250,"line_end":2250,"column_start":1,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":752},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9944174,"byte_end":9944196,"line_start":2268,"line_end":2268,"column_start":8,"column_end":30},"name":"set_reversed_i32_m128i","qualname":"::x86_x64::sse2::set_reversed_i32_m128i","value":"fn set_reversed_i32_m128i(i32, i32, i32, i32) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128i`, first arg is the low lane.\n ```\n # use safe_arch::*;\n let a = m128i::from([0, 1, 2, 3]);\n let b = set_reversed_i32_m128i(0, 1, 2, 3);\n assert_eq!(<[i32; 4]>::from(a), <[i32; 4]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128i`, first arg is the low lane.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9943834,"byte_end":9943895,"line_start":2258,"line_end":2258,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9943896,"byte_end":9943903,"line_start":2259,"line_end":2259,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9943904,"byte_end":9943927,"line_start":2260,"line_end":2260,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0, 1, 2, 3]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9943928,"byte_end":9943966,"line_start":2261,"line_end":2261,"column_start":1,"column_end":39}},{"value":"/ let b = set_reversed_i32_m128i(0, 1, 2, 3);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9943967,"byte_end":9944014,"line_start":2262,"line_end":2262,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(<[i32; 4]>::from(a), <[i32; 4]>::from(b));","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9944015,"byte_end":9944072,"line_start":2263,"line_end":2263,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9944073,"byte_end":9944080,"line_start":2264,"line_end":2264,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9944081,"byte_end":9944092,"line_start":2265,"line_end":2265,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9944093,"byte_end":9944110,"line_start":2266,"line_end":2266,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":753},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9944614,"byte_end":9944632,"line_start":2282,"line_end":2282,"column_start":8,"column_end":26},"name":"set_reversed_m128d","qualname":"::x86_x64::sse2::set_reversed_m128d","value":"fn set_reversed_m128d(f64, f64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128d`, first arg is the low lane.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([0.0, 1.0]);\n let b = set_reversed_m128d(0.0, 1.0);\n assert_eq!(a.to_array(), b.to_array());\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128d`, first arg is the low lane.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9944290,"byte_end":9944351,"line_start":2272,"line_end":2272,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9944352,"byte_end":9944359,"line_start":2273,"line_end":2273,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9944360,"byte_end":9944383,"line_start":2274,"line_end":2274,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([0.0, 1.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9944384,"byte_end":9944426,"line_start":2275,"line_end":2275,"column_start":1,"column_end":43}},{"value":"/ let b = set_reversed_m128d(0.0, 1.0);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9944427,"byte_end":9944468,"line_start":2276,"line_end":2276,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(a.to_array(), b.to_array());","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9944469,"byte_end":9944512,"line_start":2277,"line_end":2277,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9944513,"byte_end":9944520,"line_start":2278,"line_end":2278,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9944521,"byte_end":9944532,"line_start":2279,"line_end":2279,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9944533,"byte_end":9944550,"line_start":2280,"line_end":2280,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":754},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9944916,"byte_end":9944928,"line_start":2295,"line_end":2295,"column_start":8,"column_end":20},"name":"zeroed_m128i","qualname":"::x86_x64::sse2::zeroed_m128i","value":"fn zeroed_m128i() -> m128i","parent":null,"children":[],"decl_id":null,"docs":" All lanes zero.\n ```\n # use safe_arch::*;\n let a = zeroed_m128i();\n assert_eq!(u128::from(a), 0);\n ```\n","sig":null,"attributes":[{"value":"/ All lanes zero.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9944701,"byte_end":9944720,"line_start":2286,"line_end":2286,"column_start":1,"column_end":20}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9944721,"byte_end":9944728,"line_start":2287,"line_end":2287,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9944729,"byte_end":9944752,"line_start":2288,"line_end":2288,"column_start":1,"column_end":24}},{"value":"/ let a = zeroed_m128i();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9944753,"byte_end":9944780,"line_start":2289,"line_end":2289,"column_start":1,"column_end":28}},{"value":"/ assert_eq!(u128::from(a), 0);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9944781,"byte_end":9944814,"line_start":2290,"line_end":2290,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9944815,"byte_end":9944822,"line_start":2291,"line_end":2291,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9944823,"byte_end":9944834,"line_start":2292,"line_end":2292,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9944835,"byte_end":9944852,"line_start":2293,"line_end":2293,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":755},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9945209,"byte_end":9945221,"line_start":2308,"line_end":2308,"column_start":8,"column_end":20},"name":"zeroed_m128d","qualname":"::x86_x64::sse2::zeroed_m128d","value":"fn zeroed_m128d() -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Both lanes zero.\n ```\n # use safe_arch::*;\n let a = zeroed_m128d();\n assert_eq!(a.to_array(), [0.0, 0.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Both lanes zero.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9944985,"byte_end":9945005,"line_start":2299,"line_end":2299,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9945006,"byte_end":9945013,"line_start":2300,"line_end":2300,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9945014,"byte_end":9945037,"line_start":2301,"line_end":2301,"column_start":1,"column_end":24}},{"value":"/ let a = zeroed_m128d();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9945038,"byte_end":9945065,"line_start":2302,"line_end":2302,"column_start":1,"column_end":28}},{"value":"/ assert_eq!(a.to_array(), [0.0, 0.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9945066,"byte_end":9945107,"line_start":2303,"line_end":2303,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9945108,"byte_end":9945115,"line_start":2304,"line_end":2304,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9945116,"byte_end":9945127,"line_start":2305,"line_end":2305,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9945128,"byte_end":9945145,"line_start":2306,"line_end":2306,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":760},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9949912,"byte_end":9949929,"line_start":2440,"line_end":2440,"column_start":8,"column_end":25},"name":"shl_all_u16_m128i","qualname":"::x86_x64::sse2::shl_all_u16_m128i","value":"fn shl_all_u16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift all `u16` lanes to the left by the `count` in the lower `u64` lane.","sig":null,"attributes":[{"value":"/ Shift all `u16` lanes to the left by the `count` in the lower `u64` lane.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9949423,"byte_end":9949500,"line_start":2424,"line_end":2424,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9949501,"byte_end":9949504,"line_start":2425,"line_end":2425,"column_start":1,"column_end":4}},{"value":"/ New bits are 0s.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9949505,"byte_end":9949525,"line_start":2426,"line_end":2426,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9949526,"byte_end":9949533,"line_start":2427,"line_end":2427,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9949534,"byte_end":9949557,"line_start":2428,"line_end":2428,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u16, 2, 3, 4, 1, 2, 3, 4]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9949558,"byte_end":9949612,"line_start":2429,"line_end":2429,"column_start":1,"column_end":55}},{"value":"/ let b = m128i::from([3_u64, 0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9949613,"byte_end":9949649,"line_start":2430,"line_end":2430,"column_start":1,"column_end":37}},{"value":"/ let c: [u16; 8] = shl_all_u16_m128i(a, b).into();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9949650,"byte_end":9949703,"line_start":2431,"line_end":2431,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9949704,"byte_end":9949719,"line_start":2432,"line_end":2432,"column_start":1,"column_end":16}},{"value":"/   c,","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9949720,"byte_end":9949728,"line_start":2433,"line_end":2433,"column_start":1,"column_end":9}},{"value":"/   [1_u16 << 3, 2 << 3, 3 << 3, 4 << 3, 1 << 3, 2 << 3, 3 << 3, 4 << 3]","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9949729,"byte_end":9949803,"line_start":2434,"line_end":2434,"column_start":1,"column_end":75}},{"value":"/ );","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9949804,"byte_end":9949810,"line_start":2435,"line_end":2435,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9949811,"byte_end":9949818,"line_start":2436,"line_end":2436,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9949819,"byte_end":9949830,"line_start":2437,"line_end":2437,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9949831,"byte_end":9949848,"line_start":2438,"line_end":2438,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":761},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9950439,"byte_end":9950456,"line_start":2457,"line_end":2457,"column_start":8,"column_end":25},"name":"shl_all_u32_m128i","qualname":"::x86_x64::sse2::shl_all_u32_m128i","value":"fn shl_all_u32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift all `u32` lanes to the left by the `count` in the lower `u64` lane.","sig":null,"attributes":[{"value":"/ Shift all `u32` lanes to the left by the `count` in the lower `u64` lane.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9950016,"byte_end":9950093,"line_start":2444,"line_end":2444,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9950094,"byte_end":9950097,"line_start":2445,"line_end":2445,"column_start":1,"column_end":4}},{"value":"/ New bits are 0s.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9950098,"byte_end":9950118,"line_start":2446,"line_end":2446,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9950119,"byte_end":9950126,"line_start":2447,"line_end":2447,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9950127,"byte_end":9950150,"line_start":2448,"line_end":2448,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u32, 2, 3, 4]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9950151,"byte_end":9950193,"line_start":2449,"line_end":2449,"column_start":1,"column_end":43}},{"value":"/ let b = m128i::from([3_u64, 0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9950194,"byte_end":9950230,"line_start":2450,"line_end":2450,"column_start":1,"column_end":37}},{"value":"/ let c: [u32; 4] = shl_all_u32_m128i(a, b).into();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9950231,"byte_end":9950284,"line_start":2451,"line_end":2451,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c, [1 << 3, 2 << 3, 3 << 3, 4 << 3]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9950285,"byte_end":9950337,"line_start":2452,"line_end":2452,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9950338,"byte_end":9950345,"line_start":2453,"line_end":2453,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9950346,"byte_end":9950357,"line_start":2454,"line_end":2454,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9950358,"byte_end":9950375,"line_start":2455,"line_end":2455,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":762},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9950944,"byte_end":9950961,"line_start":2474,"line_end":2474,"column_start":8,"column_end":25},"name":"shl_all_u64_m128i","qualname":"::x86_x64::sse2::shl_all_u64_m128i","value":"fn shl_all_u64_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift all `u64` lanes to the left by the `count` in the lower `u64` lane.","sig":null,"attributes":[{"value":"/ Shift all `u64` lanes to the left by the `count` in the lower `u64` lane.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9950543,"byte_end":9950620,"line_start":2461,"line_end":2461,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9950621,"byte_end":9950624,"line_start":2462,"line_end":2462,"column_start":1,"column_end":4}},{"value":"/ New bits are 0s.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9950625,"byte_end":9950645,"line_start":2463,"line_end":2463,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9950646,"byte_end":9950653,"line_start":2464,"line_end":2464,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9950654,"byte_end":9950677,"line_start":2465,"line_end":2465,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u64, 2]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9950678,"byte_end":9950714,"line_start":2466,"line_end":2466,"column_start":1,"column_end":37}},{"value":"/ let b = m128i::from([3_u64, 0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9950715,"byte_end":9950751,"line_start":2467,"line_end":2467,"column_start":1,"column_end":37}},{"value":"/ let c: [u64; 2] = shl_all_u64_m128i(a, b).into();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9950752,"byte_end":9950805,"line_start":2468,"line_end":2468,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c, [1 << 3, 2 << 3]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9950806,"byte_end":9950842,"line_start":2469,"line_end":2469,"column_start":1,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9950843,"byte_end":9950850,"line_start":2470,"line_end":2470,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9950851,"byte_end":9950862,"line_start":2471,"line_end":2471,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9950863,"byte_end":9950880,"line_start":2472,"line_end":2472,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":766},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9953299,"byte_end":9953309,"line_start":2554,"line_end":2554,"column_start":8,"column_end":18},"name":"sqrt_m128d","qualname":"::x86_x64::sse2::sqrt_m128d","value":"fn sqrt_m128d(m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `sqrt(a)`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([25.0, 16.0]);\n let b = sqrt_m128d(a).to_array();\n assert_eq!(b, [5.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `sqrt(a)`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9953028,"byte_end":9953051,"line_start":2544,"line_end":2544,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9953052,"byte_end":9953059,"line_start":2545,"line_end":2545,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9953060,"byte_end":9953083,"line_start":2546,"line_end":2546,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([25.0, 16.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9953084,"byte_end":9953128,"line_start":2547,"line_end":2547,"column_start":1,"column_end":45}},{"value":"/ let b = sqrt_m128d(a).to_array();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9953129,"byte_end":9953166,"line_start":2548,"line_end":2548,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(b, [5.0, 4.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9953167,"byte_end":9953197,"line_start":2549,"line_end":2549,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9953198,"byte_end":9953205,"line_start":2550,"line_end":2550,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9953206,"byte_end":9953217,"line_start":2551,"line_end":2551,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9953218,"byte_end":9953235,"line_start":2552,"line_end":2552,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":767},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9953723,"byte_end":9953735,"line_start":2569,"line_end":2569,"column_start":8,"column_end":20},"name":"sqrt_m128d_s","qualname":"::x86_x64::sse2::sqrt_m128d_s","value":"fn sqrt_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `sqrt(b)`, upper lane is unchanged from `a`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.0]);\n let b = m128d::from_array([25.0, 4.0]);\n let c = sqrt_m128d_s(a, b);\n assert_eq!(c.to_array(), [5.0, 2.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `sqrt(b)`, upper lane is unchanged from `a`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9953371,"byte_end":9953428,"line_start":2558,"line_end":2558,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9953429,"byte_end":9953436,"line_start":2559,"line_end":2559,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9953437,"byte_end":9953460,"line_start":2560,"line_end":2560,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9953461,"byte_end":9953503,"line_start":2561,"line_end":2561,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([25.0, 4.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9953504,"byte_end":9953547,"line_start":2562,"line_end":2562,"column_start":1,"column_end":44}},{"value":"/ let c = sqrt_m128d_s(a, b);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9953548,"byte_end":9953579,"line_start":2563,"line_end":2563,"column_start":1,"column_end":32}},{"value":"/ assert_eq!(c.to_array(), [5.0, 2.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9953580,"byte_end":9953621,"line_start":2564,"line_end":2564,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9953622,"byte_end":9953629,"line_start":2565,"line_end":2565,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9953630,"byte_end":9953641,"line_start":2566,"line_end":2566,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9953642,"byte_end":9953659,"line_start":2567,"line_end":2567,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":768},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9954320,"byte_end":9954337,"line_start":2589,"line_end":2589,"column_start":8,"column_end":25},"name":"shr_all_i16_m128i","qualname":"::x86_x64::sse2::shr_all_i16_m128i","value":"fn shr_all_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift each `i16` lane to the right by the `count` in the lower `i64` lane.","sig":null,"attributes":[{"value":"/ Shift each `i16` lane to the right by the `count` in the lower `i64` lane.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9953812,"byte_end":9953890,"line_start":2573,"line_end":2573,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9953891,"byte_end":9953894,"line_start":2574,"line_end":2574,"column_start":1,"column_end":4}},{"value":"/ New bits are the sign bit.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9953895,"byte_end":9953925,"line_start":2575,"line_end":2575,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9953926,"byte_end":9953933,"line_start":2576,"line_end":2576,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9953934,"byte_end":9953957,"line_start":2577,"line_end":2577,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9953958,"byte_end":9954016,"line_start":2578,"line_end":2578,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([3_i64, 0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9954017,"byte_end":9954053,"line_start":2579,"line_end":2579,"column_start":1,"column_end":37}},{"value":"/ let c: [i16; 8] = shr_all_i16_m128i(a, b).into();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9954054,"byte_end":9954107,"line_start":2580,"line_end":2580,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9954108,"byte_end":9954123,"line_start":2581,"line_end":2581,"column_start":1,"column_end":16}},{"value":"/   c,","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9954124,"byte_end":9954132,"line_start":2582,"line_end":2582,"column_start":1,"column_end":9}},{"value":"/   [1_i16 >> 3, 2 >> 3, 3 >> 3, 4 >> 3, -1 >> 3, -2 >> 3, -3 >> 3, -4 >> 3]","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9954133,"byte_end":9954211,"line_start":2583,"line_end":2583,"column_start":1,"column_end":79}},{"value":"/ );","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9954212,"byte_end":9954218,"line_start":2584,"line_end":2584,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9954219,"byte_end":9954226,"line_start":2585,"line_end":2585,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9954227,"byte_end":9954238,"line_start":2586,"line_end":2586,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9954239,"byte_end":9954256,"line_start":2587,"line_end":2587,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":769},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9954862,"byte_end":9954879,"line_start":2606,"line_end":2606,"column_start":8,"column_end":25},"name":"shr_all_i32_m128i","qualname":"::x86_x64::sse2::shr_all_i32_m128i","value":"fn shr_all_i32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift each `i32` lane to the right by the `count` in the lower `i64` lane.","sig":null,"attributes":[{"value":"/ Shift each `i32` lane to the right by the `count` in the lower `i64` lane.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9954424,"byte_end":9954502,"line_start":2593,"line_end":2593,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9954503,"byte_end":9954506,"line_start":2594,"line_end":2594,"column_start":1,"column_end":4}},{"value":"/ New bits are the sign bit.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9954507,"byte_end":9954537,"line_start":2595,"line_end":2595,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9954538,"byte_end":9954545,"line_start":2596,"line_end":2596,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9954546,"byte_end":9954569,"line_start":2597,"line_end":2597,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i32, 2, -3, -4]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9954570,"byte_end":9954614,"line_start":2598,"line_end":2598,"column_start":1,"column_end":45}},{"value":"/ let b = m128i::from([3_i64, 0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9954615,"byte_end":9954651,"line_start":2599,"line_end":2599,"column_start":1,"column_end":37}},{"value":"/ let c: [i32; 4] = shr_all_i32_m128i(a, b).into();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9954652,"byte_end":9954705,"line_start":2600,"line_end":2600,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c, [1 >> 3, 2 >> 3, -3 >> 3, -4 >> 3]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9954706,"byte_end":9954760,"line_start":2601,"line_end":2601,"column_start":1,"column_end":55}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9954761,"byte_end":9954768,"line_start":2602,"line_end":2602,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9954769,"byte_end":9954780,"line_start":2603,"line_end":2603,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9954781,"byte_end":9954798,"line_start":2604,"line_end":2604,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":772},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9956960,"byte_end":9956977,"line_start":2683,"line_end":2683,"column_start":8,"column_end":25},"name":"shr_all_u16_m128i","qualname":"::x86_x64::sse2::shr_all_u16_m128i","value":"fn shr_all_u16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift each `u16` lane to the right by the `count` in the lower `u64` lane.","sig":null,"attributes":[{"value":"/ Shift each `u16` lane to the right by the `count` in the lower `u64` lane.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9956402,"byte_end":9956480,"line_start":2659,"line_end":2659,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9956481,"byte_end":9956484,"line_start":2660,"line_end":2660,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9956485,"byte_end":9956492,"line_start":2661,"line_end":2661,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9956493,"byte_end":9956516,"line_start":2662,"line_end":2662,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u16, 2, 3, 4, 100, 200, 300, 400]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9956517,"byte_end":9956579,"line_start":2663,"line_end":2663,"column_start":1,"column_end":63}},{"value":"/ let b = m128i::from([3_u64, 0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9956580,"byte_end":9956616,"line_start":2664,"line_end":2664,"column_start":1,"column_end":37}},{"value":"/ let c: [u16; 8] = shr_all_u16_m128i(a, b).into();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9956617,"byte_end":9956670,"line_start":2665,"line_end":2665,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9956671,"byte_end":9956686,"line_start":2666,"line_end":2666,"column_start":1,"column_end":16}},{"value":"/   c,","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9956687,"byte_end":9956695,"line_start":2667,"line_end":2667,"column_start":1,"column_end":9}},{"value":"/   [","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9956696,"byte_end":9956703,"line_start":2668,"line_end":2668,"column_start":1,"column_end":8}},{"value":"/     1_u16 >> 3,","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9956704,"byte_end":9956723,"line_start":2669,"line_end":2669,"column_start":1,"column_end":20}},{"value":"/     2 >> 3,","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9956724,"byte_end":9956739,"line_start":2670,"line_end":2670,"column_start":1,"column_end":16}},{"value":"/     3 >> 3,","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9956740,"byte_end":9956755,"line_start":2671,"line_end":2671,"column_start":1,"column_end":16}},{"value":"/     4 >> 3,","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9956756,"byte_end":9956771,"line_start":2672,"line_end":2672,"column_start":1,"column_end":16}},{"value":"/     100 >> 3,","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9956772,"byte_end":9956789,"line_start":2673,"line_end":2673,"column_start":1,"column_end":18}},{"value":"/     200 >> 3,","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9956790,"byte_end":9956807,"line_start":2674,"line_end":2674,"column_start":1,"column_end":18}},{"value":"/     300 >> 3,","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9956808,"byte_end":9956825,"line_start":2675,"line_end":2675,"column_start":1,"column_end":18}},{"value":"/     400 >> 3,","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9956826,"byte_end":9956843,"line_start":2676,"line_end":2676,"column_start":1,"column_end":18}},{"value":"/   ]","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9956844,"byte_end":9956851,"line_start":2677,"line_end":2677,"column_start":1,"column_end":8}},{"value":"/ );","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9956852,"byte_end":9956858,"line_start":2678,"line_end":2678,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9956859,"byte_end":9956866,"line_start":2679,"line_end":2679,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9956867,"byte_end":9956878,"line_start":2680,"line_end":2680,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9956879,"byte_end":9956896,"line_start":2681,"line_end":2681,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":773},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9957476,"byte_end":9957493,"line_start":2699,"line_end":2699,"column_start":8,"column_end":25},"name":"shr_all_u32_m128i","qualname":"::x86_x64::sse2::shr_all_u32_m128i","value":"fn shr_all_u32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift each `u32` lane to the right by the `count` in the lower `u64` lane.","sig":null,"attributes":[{"value":"/ Shift each `u32` lane to the right by the `count` in the lower `u64` lane.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9957064,"byte_end":9957142,"line_start":2687,"line_end":2687,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9957143,"byte_end":9957146,"line_start":2688,"line_end":2688,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9957147,"byte_end":9957154,"line_start":2689,"line_end":2689,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9957155,"byte_end":9957178,"line_start":2690,"line_end":2690,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u32, 2, 300, 400]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9957179,"byte_end":9957225,"line_start":2691,"line_end":2691,"column_start":1,"column_end":47}},{"value":"/ let b = m128i::from([3_u64, 0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9957226,"byte_end":9957262,"line_start":2692,"line_end":2692,"column_start":1,"column_end":37}},{"value":"/ let c: [u32; 4] = shr_all_u32_m128i(a, b).into();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9957263,"byte_end":9957316,"line_start":2693,"line_end":2693,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c, [1 >> 3, 2 >> 3, 300 >> 3, 400 >> 3,]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9957317,"byte_end":9957374,"line_start":2694,"line_end":2694,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9957375,"byte_end":9957382,"line_start":2695,"line_end":2695,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9957383,"byte_end":9957394,"line_start":2696,"line_end":2696,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9957395,"byte_end":9957412,"line_start":2697,"line_end":2697,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":774},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9957984,"byte_end":9958001,"line_start":2716,"line_end":2716,"column_start":8,"column_end":25},"name":"shr_all_u64_m128i","qualname":"::x86_x64::sse2::shr_all_u64_m128i","value":"fn shr_all_u64_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift each `u64` lane to the right by the `count` in the lower `u64` lane.","sig":null,"attributes":[{"value":"/ Shift each `u64` lane to the right by the `count` in the lower `u64` lane.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9957580,"byte_end":9957658,"line_start":2703,"line_end":2703,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9957659,"byte_end":9957662,"line_start":2704,"line_end":2704,"column_start":1,"column_end":4}},{"value":"/ New bits are 0s.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9957663,"byte_end":9957683,"line_start":2705,"line_end":2705,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9957684,"byte_end":9957691,"line_start":2706,"line_end":2706,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9957692,"byte_end":9957715,"line_start":2707,"line_end":2707,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u64, 56]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9957716,"byte_end":9957753,"line_start":2708,"line_end":2708,"column_start":1,"column_end":38}},{"value":"/ let b = m128i::from([3_u64, 0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9957754,"byte_end":9957790,"line_start":2709,"line_end":2709,"column_start":1,"column_end":37}},{"value":"/ let c: [u64; 2] = shr_all_u64_m128i(a, b).into();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9957791,"byte_end":9957844,"line_start":2710,"line_end":2710,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c, [1 >> 3, 56 >> 3]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9957845,"byte_end":9957882,"line_start":2711,"line_end":2711,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9957883,"byte_end":9957890,"line_start":2712,"line_end":2712,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9957891,"byte_end":9957902,"line_start":2713,"line_end":2713,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9957903,"byte_end":9957920,"line_start":2714,"line_end":2714,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":778},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9960761,"byte_end":9960772,"line_start":2814,"line_end":2814,"column_start":8,"column_end":19},"name":"store_m128d","qualname":"::x86_x64::sse2::store_m128d","value":"fn store_m128d(&mut m128d, m128d)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([10.0, 12.0]);\n let mut b = zeroed_m128d();\n store_m128d(&mut b, a);\n let c = b.to_array();\n assert_eq!(c, [10.0, 12.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the value to the reference given.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9960431,"byte_end":9960475,"line_start":2803,"line_end":2803,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9960476,"byte_end":9960483,"line_start":2804,"line_end":2804,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9960484,"byte_end":9960507,"line_start":2805,"line_end":2805,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([10.0, 12.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9960508,"byte_end":9960552,"line_start":2806,"line_end":2806,"column_start":1,"column_end":45}},{"value":"/ let mut b = zeroed_m128d();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9960553,"byte_end":9960584,"line_start":2807,"line_end":2807,"column_start":1,"column_end":32}},{"value":"/ store_m128d(&mut b, a);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9960585,"byte_end":9960612,"line_start":2808,"line_end":2808,"column_start":1,"column_end":28}},{"value":"/ let c = b.to_array();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9960613,"byte_end":9960638,"line_start":2809,"line_end":2809,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(c, [10.0, 12.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9960639,"byte_end":9960671,"line_start":2810,"line_end":2810,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9960672,"byte_end":9960679,"line_start":2811,"line_end":2811,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9960680,"byte_end":9960697,"line_start":2812,"line_end":2812,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":779},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9961159,"byte_end":9961172,"line_start":2828,"line_end":2828,"column_start":8,"column_end":21},"name":"store_m128d_s","qualname":"::x86_x64::sse2::store_m128d_s","value":"fn store_m128d_s(&mut f64, m128d)","parent":null,"children":[],"decl_id":null,"docs":" Stores the low lane value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([10.0, 12.0]);\n let mut f = 0.0;\n store_m128d_s(&mut f, a);\n assert_eq!(f, 10.0);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the low lane value to the reference given.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9960863,"byte_end":9960916,"line_start":2818,"line_end":2818,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9960917,"byte_end":9960924,"line_start":2819,"line_end":2819,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9960925,"byte_end":9960948,"line_start":2820,"line_end":2820,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([10.0, 12.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9960949,"byte_end":9960993,"line_start":2821,"line_end":2821,"column_start":1,"column_end":45}},{"value":"/ let mut f = 0.0;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9960994,"byte_end":9961014,"line_start":2822,"line_end":2822,"column_start":1,"column_end":21}},{"value":"/ store_m128d_s(&mut f, a);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9961015,"byte_end":9961044,"line_start":2823,"line_end":2823,"column_start":1,"column_end":30}},{"value":"/ assert_eq!(f, 10.0);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9961045,"byte_end":9961069,"line_start":2824,"line_end":2824,"column_start":1,"column_end":25}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9961070,"byte_end":9961077,"line_start":2825,"line_end":2825,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9961078,"byte_end":9961095,"line_start":2826,"line_end":2826,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":780},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9961605,"byte_end":9961622,"line_start":2843,"line_end":2843,"column_start":8,"column_end":25},"name":"store_splat_m128d","qualname":"::x86_x64::sse2::store_splat_m128d","value":"fn store_splat_m128d(&mut m128d, m128d)","parent":null,"children":[],"decl_id":null,"docs":" Stores the low lane value to all lanes of the reference given.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([10.0, 12.0]);\n let mut b = zeroed_m128d();\n store_splat_m128d(&mut b, a);\n let c = b.to_array();\n assert_eq!(c, [10.0, 10.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the low lane value to all lanes of the reference given.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9961247,"byte_end":9961313,"line_start":2832,"line_end":2832,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9961314,"byte_end":9961321,"line_start":2833,"line_end":2833,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9961322,"byte_end":9961345,"line_start":2834,"line_end":2834,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([10.0, 12.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9961346,"byte_end":9961390,"line_start":2835,"line_end":2835,"column_start":1,"column_end":45}},{"value":"/ let mut b = zeroed_m128d();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9961391,"byte_end":9961422,"line_start":2836,"line_end":2836,"column_start":1,"column_end":32}},{"value":"/ store_splat_m128d(&mut b, a);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9961423,"byte_end":9961456,"line_start":2837,"line_end":2837,"column_start":1,"column_end":34}},{"value":"/ let c = b.to_array();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9961457,"byte_end":9961482,"line_start":2838,"line_end":2838,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(c, [10.0, 10.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9961483,"byte_end":9961515,"line_start":2839,"line_end":2839,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9961516,"byte_end":9961523,"line_start":2840,"line_end":2840,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9961524,"byte_end":9961541,"line_start":2841,"line_end":2841,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":781},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9962044,"byte_end":9962055,"line_start":2858,"line_end":2858,"column_start":8,"column_end":19},"name":"store_m128i","qualname":"::x86_x64::sse2::store_m128i","value":"fn store_m128i(&mut m128i, m128i)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let mut b = zeroed_m128i();\n store_m128i(&mut b, a);\n let c: [i32; 4] = b.into();\n assert_eq!(c, [1, 2, 3, 4]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the value to the reference given.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9961714,"byte_end":9961758,"line_start":2847,"line_end":2847,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9961759,"byte_end":9961766,"line_start":2848,"line_end":2848,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9961767,"byte_end":9961790,"line_start":2849,"line_end":2849,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9961791,"byte_end":9961829,"line_start":2850,"line_end":2850,"column_start":1,"column_end":39}},{"value":"/ let mut b = zeroed_m128i();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9961830,"byte_end":9961861,"line_start":2851,"line_end":2851,"column_start":1,"column_end":32}},{"value":"/ store_m128i(&mut b, a);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9961862,"byte_end":9961889,"line_start":2852,"line_end":2852,"column_start":1,"column_end":28}},{"value":"/ let c: [i32; 4] = b.into();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9961890,"byte_end":9961921,"line_start":2853,"line_end":2853,"column_start":1,"column_end":32}},{"value":"/ assert_eq!(c, [1, 2, 3, 4]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9961922,"byte_end":9961954,"line_start":2854,"line_end":2854,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9961955,"byte_end":9961962,"line_start":2855,"line_end":2855,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9961963,"byte_end":9961980,"line_start":2856,"line_end":2856,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":782},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9962432,"byte_end":9962450,"line_start":2872,"line_end":2872,"column_start":8,"column_end":26},"name":"store_high_m128d_s","qualname":"::x86_x64::sse2::store_high_m128d_s","value":"fn store_high_m128d_s(&mut f64, m128d)","parent":null,"children":[],"decl_id":null,"docs":" Stores the high lane value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([10.0, 12.0]);\n let mut f = 0.0;\n store_high_m128d_s(&mut f, a);\n assert_eq!(f, 12.0);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the high lane value to the reference given.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9962130,"byte_end":9962184,"line_start":2862,"line_end":2862,"column_start":1,"column_end":55}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9962185,"byte_end":9962192,"line_start":2863,"line_end":2863,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9962193,"byte_end":9962216,"line_start":2864,"line_end":2864,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([10.0, 12.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9962217,"byte_end":9962261,"line_start":2865,"line_end":2865,"column_start":1,"column_end":45}},{"value":"/ let mut f = 0.0;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9962262,"byte_end":9962282,"line_start":2866,"line_end":2866,"column_start":1,"column_end":21}},{"value":"/ store_high_m128d_s(&mut f, a);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9962283,"byte_end":9962317,"line_start":2867,"line_end":2867,"column_start":1,"column_end":35}},{"value":"/ assert_eq!(f, 12.0);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9962318,"byte_end":9962342,"line_start":2868,"line_end":2868,"column_start":1,"column_end":25}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9962343,"byte_end":9962350,"line_start":2869,"line_end":2869,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9962351,"byte_end":9962368,"line_start":2870,"line_end":2870,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":783},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9962849,"byte_end":9962866,"line_start":2887,"line_end":2887,"column_start":8,"column_end":25},"name":"store_i64_m128i_s","qualname":"::x86_x64::sse2::store_i64_m128i_s","value":"fn store_i64_m128i_s(&mut i64, m128i)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i64, 2]);\n let mut b = 0_i64;\n store_i64_m128i_s(&mut b, a);\n assert_eq!(b, 1_i64);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the value to the reference given.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9962526,"byte_end":9962570,"line_start":2876,"line_end":2876,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9962571,"byte_end":9962578,"line_start":2877,"line_end":2877,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9962579,"byte_end":9962602,"line_start":2878,"line_end":2878,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i64, 2]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9962603,"byte_end":9962639,"line_start":2879,"line_end":2879,"column_start":1,"column_end":37}},{"value":"/ let mut b = 0_i64;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9962640,"byte_end":9962662,"line_start":2880,"line_end":2880,"column_start":1,"column_end":23}},{"value":"/ store_i64_m128i_s(&mut b, a);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9962663,"byte_end":9962696,"line_start":2881,"line_end":2881,"column_start":1,"column_end":34}},{"value":"/ assert_eq!(b, 1_i64);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9962697,"byte_end":9962722,"line_start":2882,"line_end":2882,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9962723,"byte_end":9962730,"line_start":2883,"line_end":2883,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9962731,"byte_end":9962748,"line_start":2884,"line_end":2884,"column_start":1,"column_end":18}},{"value":"allow(clippy :: cast_ptr_alignment)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9962749,"byte_end":9962785,"line_start":2885,"line_end":2885,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":784},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9963300,"byte_end":9963320,"line_start":2902,"line_end":2902,"column_start":8,"column_end":28},"name":"store_reversed_m128d","qualname":"::x86_x64::sse2::store_reversed_m128d","value":"fn store_reversed_m128d(&mut m128d, m128d)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([10.0, 12.0]);\n let mut b = zeroed_m128d();\n store_reversed_m128d(&mut b, a);\n let c = b.to_array();\n assert_eq!(c, [12.0, 10.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the value to the reference given.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9962961,"byte_end":9963005,"line_start":2891,"line_end":2891,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9963006,"byte_end":9963013,"line_start":2892,"line_end":2892,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9963014,"byte_end":9963037,"line_start":2893,"line_end":2893,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([10.0, 12.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9963038,"byte_end":9963082,"line_start":2894,"line_end":2894,"column_start":1,"column_end":45}},{"value":"/ let mut b = zeroed_m128d();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9963083,"byte_end":9963114,"line_start":2895,"line_end":2895,"column_start":1,"column_end":32}},{"value":"/ store_reversed_m128d(&mut b, a);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9963115,"byte_end":9963151,"line_start":2896,"line_end":2896,"column_start":1,"column_end":37}},{"value":"/ let c = b.to_array();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9963152,"byte_end":9963177,"line_start":2897,"line_end":2897,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(c, [12.0, 10.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9963178,"byte_end":9963210,"line_start":2898,"line_end":2898,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9963211,"byte_end":9963218,"line_start":2899,"line_end":2899,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9963219,"byte_end":9963236,"line_start":2900,"line_end":2900,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":785},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9963722,"byte_end":9963743,"line_start":2916,"line_end":2916,"column_start":8,"column_end":29},"name":"store_unaligned_m128d","qualname":"::x86_x64::sse2::store_unaligned_m128d","value":"fn store_unaligned_m128d(&mut [f64; ], m128d)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([10.0, 12.0]);\n let mut b = [0.0, 0.0];\n store_unaligned_m128d(&mut b, a);\n assert_eq!(b, [10.0, 12.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the value to the reference given.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9963412,"byte_end":9963456,"line_start":2906,"line_end":2906,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9963457,"byte_end":9963464,"line_start":2907,"line_end":2907,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9963465,"byte_end":9963488,"line_start":2908,"line_end":2908,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([10.0, 12.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9963489,"byte_end":9963533,"line_start":2909,"line_end":2909,"column_start":1,"column_end":45}},{"value":"/ let mut b = [0.0, 0.0];","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9963534,"byte_end":9963561,"line_start":2910,"line_end":2910,"column_start":1,"column_end":28}},{"value":"/ store_unaligned_m128d(&mut b, a);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9963562,"byte_end":9963599,"line_start":2911,"line_end":2911,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(b, [10.0, 12.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9963600,"byte_end":9963632,"line_start":2912,"line_end":2912,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9963633,"byte_end":9963640,"line_start":2913,"line_end":2913,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9963641,"byte_end":9963658,"line_start":2914,"line_end":2914,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":787},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9964225,"byte_end":9964246,"line_start":2931,"line_end":2931,"column_start":8,"column_end":29},"name":"store_unaligned_m128i","qualname":"::x86_x64::sse2::store_unaligned_m128i","value":"fn store_unaligned_m128i(&mut [u8; ], m128i)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given.\n ```\n # use safe_arch::*;\n let a =\n   m128i::from([0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n let mut b = [0_u8; 16];\n store_unaligned_m128i(&mut b, a);\n assert_eq!(b, [0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the value to the reference given.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9963825,"byte_end":9963869,"line_start":2920,"line_end":2920,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9963870,"byte_end":9963877,"line_start":2921,"line_end":2921,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9963878,"byte_end":9963901,"line_start":2922,"line_end":2922,"column_start":1,"column_end":24}},{"value":"/ let a =","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9963902,"byte_end":9963913,"line_start":2923,"line_end":2923,"column_start":1,"column_end":12}},{"value":"/   m128i::from([0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9963914,"byte_end":9963991,"line_start":2924,"line_end":2924,"column_start":1,"column_end":78}},{"value":"/ let mut b = [0_u8; 16];","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9963992,"byte_end":9964019,"line_start":2925,"line_end":2925,"column_start":1,"column_end":28}},{"value":"/ store_unaligned_m128i(&mut b, a);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9964020,"byte_end":9964057,"line_start":2926,"line_end":2926,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(b, [0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9964058,"byte_end":9964135,"line_start":2927,"line_end":2927,"column_start":1,"column_end":78}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9964136,"byte_end":9964143,"line_start":2928,"line_end":2928,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9964144,"byte_end":9964161,"line_start":2929,"line_end":2929,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":789},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9964864,"byte_end":9964876,"line_start":2952,"line_end":2952,"column_start":8,"column_end":20},"name":"sub_i8_m128i","qualname":"::x86_x64::sse2::sub_i8_m128i","value":"fn sub_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a - b` with lanes as `i8`.\n ```\n # use safe_arch::*;\n let a =\n   m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n let b = m128i::from([\n   0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127,\n ]);\n let c: [i8; 16] = sub_i8_m128i(a, b).into();\n assert_eq!(\n   c,\n   [0, -10, 0, -10, 0, -10, 0, -10, 0, -10, 30, -10, -10, 36, -10, -112]\n );\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a - b` with lanes as `i8`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9964338,"byte_end":9964378,"line_start":2935,"line_end":2935,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9964379,"byte_end":9964386,"line_start":2936,"line_end":2936,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9964387,"byte_end":9964410,"line_start":2937,"line_end":2937,"column_start":1,"column_end":24}},{"value":"/ let a =","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9964411,"byte_end":9964422,"line_start":2938,"line_end":2938,"column_start":1,"column_end":12}},{"value":"/   m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9964423,"byte_end":9964500,"line_start":2939,"line_end":2939,"column_start":1,"column_end":78}},{"value":"/ let b = m128i::from([","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9964501,"byte_end":9964526,"line_start":2940,"line_end":2940,"column_start":1,"column_end":26}},{"value":"/   0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127,","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9964527,"byte_end":9964597,"line_start":2941,"line_end":2941,"column_start":1,"column_end":71}},{"value":"/ ]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9964598,"byte_end":9964605,"line_start":2942,"line_end":2942,"column_start":1,"column_end":8}},{"value":"/ let c: [i8; 16] = sub_i8_m128i(a, b).into();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9964606,"byte_end":9964654,"line_start":2943,"line_end":2943,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9964655,"byte_end":9964670,"line_start":2944,"line_end":2944,"column_start":1,"column_end":16}},{"value":"/   c,","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9964671,"byte_end":9964679,"line_start":2945,"line_end":2945,"column_start":1,"column_end":9}},{"value":"/   [0, -10, 0, -10, 0, -10, 0, -10, 0, -10, 30, -10, -10, 36, -10, -112]","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9964680,"byte_end":9964755,"line_start":2946,"line_end":2946,"column_start":1,"column_end":76}},{"value":"/ );","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9964756,"byte_end":9964762,"line_start":2947,"line_end":2947,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9964763,"byte_end":9964770,"line_start":2948,"line_end":2948,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9964771,"byte_end":9964782,"line_start":2949,"line_end":2949,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9964783,"byte_end":9964800,"line_start":2950,"line_end":2950,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":790},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9965362,"byte_end":9965375,"line_start":2967,"line_end":2967,"column_start":8,"column_end":21},"name":"sub_i16_m128i","qualname":"::x86_x64::sse2::sub_i16_m128i","value":"fn sub_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a - b` with lanes as `i16`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([51_i16, 61, 71, 81, -15, -26, -37, 48]);\n let c: [i16; 8] = sub_i16_m128i(a, b).into();\n assert_eq!(c, [-50, -59, -68, -77, 14, 24, 34, -52]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a - b` with lanes as `i16`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9964954,"byte_end":9964995,"line_start":2956,"line_end":2956,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9964996,"byte_end":9965003,"line_start":2957,"line_end":2957,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9965004,"byte_end":9965027,"line_start":2958,"line_end":2958,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9965028,"byte_end":9965086,"line_start":2959,"line_end":2959,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([51_i16, 61, 71, 81, -15, -26, -37, 48]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9965087,"byte_end":9965152,"line_start":2960,"line_end":2960,"column_start":1,"column_end":66}},{"value":"/ let c: [i16; 8] = sub_i16_m128i(a, b).into();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9965153,"byte_end":9965202,"line_start":2961,"line_end":2961,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [-50, -59, -68, -77, 14, 24, 34, -52]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9965203,"byte_end":9965260,"line_start":2962,"line_end":2962,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9965261,"byte_end":9965268,"line_start":2963,"line_end":2963,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9965269,"byte_end":9965280,"line_start":2964,"line_end":2964,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9965281,"byte_end":9965298,"line_start":2965,"line_end":2965,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":791},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9965802,"byte_end":9965815,"line_start":2982,"line_end":2982,"column_start":8,"column_end":21},"name":"sub_i32_m128i","qualname":"::x86_x64::sse2::sub_i32_m128i","value":"fn sub_i32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a - b` with lanes as `i32`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let b = m128i::from([50, 60, 70, 87]);\n let c: [i32; 4] = sub_i32_m128i(a, b).into();\n assert_eq!(c, [-49, -58, -67, -83]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a - b` with lanes as `i32`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9965454,"byte_end":9965495,"line_start":2971,"line_end":2971,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9965496,"byte_end":9965503,"line_start":2972,"line_end":2972,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9965504,"byte_end":9965527,"line_start":2973,"line_end":2973,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9965528,"byte_end":9965566,"line_start":2974,"line_end":2974,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([50, 60, 70, 87]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9965567,"byte_end":9965609,"line_start":2975,"line_end":2975,"column_start":1,"column_end":43}},{"value":"/ let c: [i32; 4] = sub_i32_m128i(a, b).into();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9965610,"byte_end":9965659,"line_start":2976,"line_end":2976,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [-49, -58, -67, -83]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9965660,"byte_end":9965700,"line_start":2977,"line_end":2977,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9965701,"byte_end":9965708,"line_start":2978,"line_end":2978,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9965709,"byte_end":9965720,"line_start":2979,"line_end":2979,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9965721,"byte_end":9965738,"line_start":2980,"line_end":2980,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":792},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9966230,"byte_end":9966243,"line_start":2997,"line_end":2997,"column_start":8,"column_end":21},"name":"sub_i64_m128i","qualname":"::x86_x64::sse2::sub_i64_m128i","value":"fn sub_i64_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a - b` with lanes as `i64`.\n ```\n # use safe_arch::*;\n let a = m128i::from([92_i64, 87]);\n let b = m128i::from([-9001_i64, 1]);\n let c: [i64; 2] = sub_i64_m128i(a, b).into();\n assert_eq!(c, [9093, 86]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a - b` with lanes as `i64`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9965894,"byte_end":9965935,"line_start":2986,"line_end":2986,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9965936,"byte_end":9965943,"line_start":2987,"line_end":2987,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9965944,"byte_end":9965967,"line_start":2988,"line_end":2988,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([92_i64, 87]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9965968,"byte_end":9966006,"line_start":2989,"line_end":2989,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([-9001_i64, 1]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9966007,"byte_end":9966047,"line_start":2990,"line_end":2990,"column_start":1,"column_end":41}},{"value":"/ let c: [i64; 2] = sub_i64_m128i(a, b).into();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9966048,"byte_end":9966097,"line_start":2991,"line_end":2991,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [9093, 86]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9966098,"byte_end":9966128,"line_start":2992,"line_end":2992,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9966129,"byte_end":9966136,"line_start":2993,"line_end":2993,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9966137,"byte_end":9966148,"line_start":2994,"line_end":2994,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9966149,"byte_end":9966166,"line_start":2995,"line_end":2995,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":793},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9966641,"byte_end":9966650,"line_start":3012,"line_end":3012,"column_start":8,"column_end":17},"name":"sub_m128d","qualname":"::x86_x64::sse2::sub_m128d","value":"fn sub_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a - b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -6.0]);\n let c = sub_m128d(a, b).to_array();\n assert_eq!(c, [-8.0, 93.5]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a - b`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9966322,"byte_end":9966343,"line_start":3001,"line_end":3001,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9966344,"byte_end":9966351,"line_start":3002,"line_end":3002,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9966352,"byte_end":9966375,"line_start":3003,"line_end":3003,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9966376,"byte_end":9966420,"line_start":3004,"line_end":3004,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -6.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9966421,"byte_end":9966466,"line_start":3005,"line_end":3005,"column_start":1,"column_end":46}},{"value":"/ let c = sub_m128d(a, b).to_array();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9966467,"byte_end":9966506,"line_start":3006,"line_end":3006,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(c, [-8.0, 93.5]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9966507,"byte_end":9966539,"line_start":3007,"line_end":3007,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9966540,"byte_end":9966547,"line_start":3008,"line_end":3008,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9966548,"byte_end":9966559,"line_start":3009,"line_end":3009,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9966560,"byte_end":9966577,"line_start":3010,"line_end":3010,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":794},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9967073,"byte_end":9967084,"line_start":3027,"line_end":3027,"column_start":8,"column_end":19},"name":"sub_m128d_s","qualname":"::x86_x64::sse2::sub_m128d_s","value":"fn sub_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lowest lane `a - b`, high lane unchanged.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -600.0]);\n let c = sub_m128d_s(a, b).to_array();\n assert_eq!(c, [-8.0, 87.5]);\n ```\n","sig":null,"attributes":[{"value":"/ Lowest lane `a - b`, high lane unchanged.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9966726,"byte_end":9966771,"line_start":3016,"line_end":3016,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9966772,"byte_end":9966779,"line_start":3017,"line_end":3017,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9966780,"byte_end":9966803,"line_start":3018,"line_end":3018,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9966804,"byte_end":9966848,"line_start":3019,"line_end":3019,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -600.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9966849,"byte_end":9966896,"line_start":3020,"line_end":3020,"column_start":1,"column_end":48}},{"value":"/ let c = sub_m128d_s(a, b).to_array();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9966897,"byte_end":9966938,"line_start":3021,"line_end":3021,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [-8.0, 87.5]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9966939,"byte_end":9966971,"line_start":3022,"line_end":3022,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9966972,"byte_end":9966979,"line_start":3023,"line_end":3023,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9966980,"byte_end":9966991,"line_start":3024,"line_end":3024,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9966992,"byte_end":9967009,"line_start":3025,"line_end":3025,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":795},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9967713,"byte_end":9967736,"line_start":3048,"line_end":3048,"column_start":8,"column_end":31},"name":"sub_saturating_i8_m128i","qualname":"::x86_x64::sse2::sub_saturating_i8_m128i","value":"fn sub_saturating_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise saturating `a - b` with lanes as `i8`.\n ```\n # use safe_arch::*;\n let a =\n   m128i::from([0_i8, -128, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, -127]);\n let b = m128i::from([\n   0_i8, 1, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127,\n ]);\n let c: [i8; 16] = sub_saturating_i8_m128i(a, b).into();\n assert_eq!(\n   c,\n   [0, -128, 0, -10, 0, -10, 0, -10, 0, -10, 30, -10, -10, 36, -10, -128]\n );\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise saturating `a - b` with lanes as `i8`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9967160,"byte_end":9967211,"line_start":3031,"line_end":3031,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9967212,"byte_end":9967219,"line_start":3032,"line_end":3032,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9967220,"byte_end":9967243,"line_start":3033,"line_end":3033,"column_start":1,"column_end":24}},{"value":"/ let a =","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9967244,"byte_end":9967255,"line_start":3034,"line_end":3034,"column_start":1,"column_end":12}},{"value":"/   m128i::from([0_i8, -128, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, -127]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9967256,"byte_end":9967338,"line_start":3035,"line_end":3035,"column_start":1,"column_end":83}},{"value":"/ let b = m128i::from([","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9967339,"byte_end":9967364,"line_start":3036,"line_end":3036,"column_start":1,"column_end":26}},{"value":"/   0_i8, 1, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127,","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9967365,"byte_end":9967434,"line_start":3037,"line_end":3037,"column_start":1,"column_end":70}},{"value":"/ ]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9967435,"byte_end":9967442,"line_start":3038,"line_end":3038,"column_start":1,"column_end":8}},{"value":"/ let c: [i8; 16] = sub_saturating_i8_m128i(a, b).into();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9967443,"byte_end":9967502,"line_start":3039,"line_end":3039,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9967503,"byte_end":9967518,"line_start":3040,"line_end":3040,"column_start":1,"column_end":16}},{"value":"/   c,","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9967519,"byte_end":9967527,"line_start":3041,"line_end":3041,"column_start":1,"column_end":9}},{"value":"/   [0, -128, 0, -10, 0, -10, 0, -10, 0, -10, 30, -10, -10, 36, -10, -128]","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9967528,"byte_end":9967604,"line_start":3042,"line_end":3042,"column_start":1,"column_end":77}},{"value":"/ );","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9967605,"byte_end":9967611,"line_start":3043,"line_end":3043,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9967612,"byte_end":9967619,"line_start":3044,"line_end":3044,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9967620,"byte_end":9967631,"line_start":3045,"line_end":3045,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9967632,"byte_end":9967649,"line_start":3046,"line_end":3046,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":796},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9968254,"byte_end":9968278,"line_start":3063,"line_end":3063,"column_start":8,"column_end":32},"name":"sub_saturating_i16_m128i","qualname":"::x86_x64::sse2::sub_saturating_i16_m128i","value":"fn sub_saturating_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise saturating `a - b` with lanes as `i16`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([51_i16, 61, 71, 81, i16::MAX, -26, -37, 48]);\n let c: [i16; 8] = sub_saturating_i16_m128i(a, b).into();\n assert_eq!(c, [-50, -59, -68, -77, -32768, 24, 34, -52]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise saturating `a - b` with lanes as `i16`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9967815,"byte_end":9967867,"line_start":3052,"line_end":3052,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9967868,"byte_end":9967875,"line_start":3053,"line_end":3053,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9967876,"byte_end":9967899,"line_start":3054,"line_end":3054,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9967900,"byte_end":9967958,"line_start":3055,"line_end":3055,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([51_i16, 61, 71, 81, i16::MAX, -26, -37, 48]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9967959,"byte_end":9968029,"line_start":3056,"line_end":3056,"column_start":1,"column_end":71}},{"value":"/ let c: [i16; 8] = sub_saturating_i16_m128i(a, b).into();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9968030,"byte_end":9968090,"line_start":3057,"line_end":3057,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(c, [-50, -59, -68, -77, -32768, 24, 34, -52]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9968091,"byte_end":9968152,"line_start":3058,"line_end":3058,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9968153,"byte_end":9968160,"line_start":3059,"line_end":3059,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9968161,"byte_end":9968172,"line_start":3060,"line_end":3060,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9968173,"byte_end":9968190,"line_start":3061,"line_end":3061,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":797},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9968868,"byte_end":9968891,"line_start":3080,"line_end":3080,"column_start":8,"column_end":31},"name":"sub_saturating_u8_m128i","qualname":"::x86_x64::sse2::sub_saturating_u8_m128i","value":"fn sub_saturating_u8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise saturating `a - b` with lanes as `u8`.\n ```\n # use safe_arch::*;\n let a =\n   m128i::from([10_u8, 255, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 255]);\n let b =\n   m128i::from([1_u8, 1, 2, 13, 4, 15, 6, 17, 8, 19, 20, 21, 22, 23, 24, 127]);\n let c: [u8; 16] = sub_saturating_u8_m128i(a, b).into();\n assert_eq!(c, [9_u8, 254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise saturating `a - b` with lanes as `u8`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9968358,"byte_end":9968409,"line_start":3067,"line_end":3067,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9968410,"byte_end":9968417,"line_start":3068,"line_end":3068,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9968418,"byte_end":9968441,"line_start":3069,"line_end":3069,"column_start":1,"column_end":24}},{"value":"/ let a =","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9968442,"byte_end":9968453,"line_start":3070,"line_end":3070,"column_start":1,"column_end":12}},{"value":"/   m128i::from([10_u8, 255, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 255]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9968454,"byte_end":9968535,"line_start":3071,"line_end":3071,"column_start":1,"column_end":82}},{"value":"/ let b =","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9968536,"byte_end":9968547,"line_start":3072,"line_end":3072,"column_start":1,"column_end":12}},{"value":"/   m128i::from([1_u8, 1, 2, 13, 4, 15, 6, 17, 8, 19, 20, 21, 22, 23, 24, 127]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9968548,"byte_end":9968630,"line_start":3073,"line_end":3073,"column_start":1,"column_end":83}},{"value":"/ let c: [u8; 16] = sub_saturating_u8_m128i(a, b).into();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9968631,"byte_end":9968690,"line_start":3074,"line_end":3074,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(c, [9_u8, 254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9968691,"byte_end":9968766,"line_start":3075,"line_end":3075,"column_start":1,"column_end":76}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9968767,"byte_end":9968774,"line_start":3076,"line_end":3076,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9968775,"byte_end":9968786,"line_start":3077,"line_end":3077,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9968787,"byte_end":9968804,"line_start":3078,"line_end":3078,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":798},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9969415,"byte_end":9969439,"line_start":3095,"line_end":3095,"column_start":8,"column_end":32},"name":"sub_saturating_u16_m128i","qualname":"::x86_x64::sse2::sub_saturating_u16_m128i","value":"fn sub_saturating_u16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise saturating `a - b` with lanes as `u16`.\n ```\n # use safe_arch::*;\n let a = m128i::from([51_u16, 61, 3, 4, u16::MAX, 2, 3, u16::MAX]);\n let b = m128i::from([5_u16, 2, 71, 81, u16::MAX, 26, 37, u16::MIN]);\n let c: [u16; 8] = sub_saturating_u16_m128i(a, b).into();\n assert_eq!(c, [46, 59, 0, 0, 0, 0, 0, u16::MAX]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise saturating `a - b` with lanes as `u16`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9968970,"byte_end":9969022,"line_start":3084,"line_end":3084,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9969023,"byte_end":9969030,"line_start":3085,"line_end":3085,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9969031,"byte_end":9969054,"line_start":3086,"line_end":3086,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([51_u16, 61, 3, 4, u16::MAX, 2, 3, u16::MAX]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9969055,"byte_end":9969125,"line_start":3087,"line_end":3087,"column_start":1,"column_end":71}},{"value":"/ let b = m128i::from([5_u16, 2, 71, 81, u16::MAX, 26, 37, u16::MIN]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9969126,"byte_end":9969198,"line_start":3088,"line_end":3088,"column_start":1,"column_end":73}},{"value":"/ let c: [u16; 8] = sub_saturating_u16_m128i(a, b).into();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9969199,"byte_end":9969259,"line_start":3089,"line_end":3089,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(c, [46, 59, 0, 0, 0, 0, 0, u16::MAX]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9969260,"byte_end":9969313,"line_start":3090,"line_end":3090,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9969314,"byte_end":9969321,"line_start":3091,"line_end":3091,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9969322,"byte_end":9969333,"line_start":3092,"line_end":3092,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9969334,"byte_end":9969351,"line_start":3093,"line_end":3093,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":799},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9970065,"byte_end":9970085,"line_start":3116,"line_end":3116,"column_start":8,"column_end":28},"name":"unpack_high_i8_m128i","qualname":"::x86_x64::sse2::unpack_high_i8_m128i","value":"fn unpack_high_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave high `i8` lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a =\n   m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n let b = m128i::from([\n   0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127,\n ]);\n let c: [i8; 16] = unpack_high_i8_m128i(a, b).into();\n assert_eq!(\n   c,\n   [8, 8, 9, 19, 10, -20, 11, 21, 12, 22, 13, -23, 14, 24, 15, 127]\n );\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave high `i8` lanes of `a` and `b`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9969519,"byte_end":9969576,"line_start":3099,"line_end":3099,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9969577,"byte_end":9969584,"line_start":3100,"line_end":3100,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9969585,"byte_end":9969608,"line_start":3101,"line_end":3101,"column_start":1,"column_end":24}},{"value":"/ let a =","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9969609,"byte_end":9969620,"line_start":3102,"line_end":3102,"column_start":1,"column_end":12}},{"value":"/   m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9969621,"byte_end":9969698,"line_start":3103,"line_end":3103,"column_start":1,"column_end":78}},{"value":"/ let b = m128i::from([","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9969699,"byte_end":9969724,"line_start":3104,"line_end":3104,"column_start":1,"column_end":26}},{"value":"/   0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127,","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9969725,"byte_end":9969795,"line_start":3105,"line_end":3105,"column_start":1,"column_end":71}},{"value":"/ ]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9969796,"byte_end":9969803,"line_start":3106,"line_end":3106,"column_start":1,"column_end":8}},{"value":"/ let c: [i8; 16] = unpack_high_i8_m128i(a, b).into();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9969804,"byte_end":9969860,"line_start":3107,"line_end":3107,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9969861,"byte_end":9969876,"line_start":3108,"line_end":3108,"column_start":1,"column_end":16}},{"value":"/   c,","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9969877,"byte_end":9969885,"line_start":3109,"line_end":3109,"column_start":1,"column_end":9}},{"value":"/   [8, 8, 9, 19, 10, -20, 11, 21, 12, 22, 13, -23, 14, 24, 15, 127]","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9969886,"byte_end":9969956,"line_start":3110,"line_end":3110,"column_start":1,"column_end":71}},{"value":"/ );","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9969957,"byte_end":9969963,"line_start":3111,"line_end":3111,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9969964,"byte_end":9969971,"line_start":3112,"line_end":3112,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9969972,"byte_end":9969983,"line_start":3113,"line_end":3113,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9969984,"byte_end":9970001,"line_start":3114,"line_end":3114,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":800},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9970595,"byte_end":9970616,"line_start":3131,"line_end":3131,"column_start":8,"column_end":29},"name":"unpack_high_i16_m128i","qualname":"::x86_x64::sse2::unpack_high_i16_m128i","value":"fn unpack_high_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave high `i16` lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);\n let c: [i16; 8] = unpack_high_i16_m128i(a, b).into();\n assert_eq!(c, [-1, -15, -2, -26, -3, -37, -4, 48]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave high `i16` lanes of `a` and `b`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9970168,"byte_end":9970226,"line_start":3120,"line_end":3120,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9970227,"byte_end":9970234,"line_start":3121,"line_end":3121,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9970235,"byte_end":9970258,"line_start":3122,"line_end":3122,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9970259,"byte_end":9970317,"line_start":3123,"line_end":3123,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9970318,"byte_end":9970379,"line_start":3124,"line_end":3124,"column_start":1,"column_end":62}},{"value":"/ let c: [i16; 8] = unpack_high_i16_m128i(a, b).into();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9970380,"byte_end":9970437,"line_start":3125,"line_end":3125,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [-1, -15, -2, -26, -3, -37, -4, 48]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9970438,"byte_end":9970493,"line_start":3126,"line_end":3126,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9970494,"byte_end":9970501,"line_start":3127,"line_end":3127,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9970502,"byte_end":9970513,"line_start":3128,"line_end":3128,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9970514,"byte_end":9970531,"line_start":3129,"line_end":3129,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":801},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9971061,"byte_end":9971082,"line_start":3146,"line_end":3146,"column_start":8,"column_end":29},"name":"unpack_high_i32_m128i","qualname":"::x86_x64::sse2::unpack_high_i32_m128i","value":"fn unpack_high_i32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave high `i32` lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let b = m128i::from([5, 6, 7, 8]);\n let c: [i32; 4] = unpack_high_i32_m128i(a, b).into();\n assert_eq!(c, [3, 7, 4, 8]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave high `i32` lanes of `a` and `b`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9970700,"byte_end":9970758,"line_start":3135,"line_end":3135,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9970759,"byte_end":9970766,"line_start":3136,"line_end":3136,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9970767,"byte_end":9970790,"line_start":3137,"line_end":3137,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9970791,"byte_end":9970829,"line_start":3138,"line_end":3138,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([5, 6, 7, 8]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9970830,"byte_end":9970868,"line_start":3139,"line_end":3139,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = unpack_high_i32_m128i(a, b).into();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9970869,"byte_end":9970926,"line_start":3140,"line_end":3140,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [3, 7, 4, 8]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9970927,"byte_end":9970959,"line_start":3141,"line_end":3141,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9970960,"byte_end":9970967,"line_start":3142,"line_end":3142,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9970968,"byte_end":9970979,"line_start":3143,"line_end":3143,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9970980,"byte_end":9970997,"line_start":3144,"line_end":3144,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":802},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9971524,"byte_end":9971545,"line_start":3161,"line_end":3161,"column_start":8,"column_end":29},"name":"unpack_high_i64_m128i","qualname":"::x86_x64::sse2::unpack_high_i64_m128i","value":"fn unpack_high_i64_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave high `i64` lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([92_i64, 87]);\n let b = m128i::from([-9001_i64, 1]);\n let c: [i64; 2] = unpack_high_i64_m128i(a, b).into();\n assert_eq!(c, [87, 1]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave high `i64` lanes of `a` and `b`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9971166,"byte_end":9971224,"line_start":3150,"line_end":3150,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9971225,"byte_end":9971232,"line_start":3151,"line_end":3151,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9971233,"byte_end":9971256,"line_start":3152,"line_end":3152,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([92_i64, 87]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9971257,"byte_end":9971295,"line_start":3153,"line_end":3153,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([-9001_i64, 1]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9971296,"byte_end":9971336,"line_start":3154,"line_end":3154,"column_start":1,"column_end":41}},{"value":"/ let c: [i64; 2] = unpack_high_i64_m128i(a, b).into();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9971337,"byte_end":9971394,"line_start":3155,"line_end":3155,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [87, 1]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9971395,"byte_end":9971422,"line_start":3156,"line_end":3156,"column_start":1,"column_end":28}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9971423,"byte_end":9971430,"line_start":3157,"line_end":3157,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9971431,"byte_end":9971442,"line_start":3158,"line_end":3158,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9971443,"byte_end":9971460,"line_start":3159,"line_end":3159,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":803},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9971987,"byte_end":9972004,"line_start":3176,"line_end":3176,"column_start":8,"column_end":25},"name":"unpack_high_m128d","qualname":"::x86_x64::sse2::unpack_high_m128d","value":"fn unpack_high_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave high lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -6.0]);\n let c = unpack_high_m128d(a, b).to_array();\n assert_eq!(c, [87.5, -6.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave high lanes of `a` and `b`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9971629,"byte_end":9971681,"line_start":3165,"line_end":3165,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9971682,"byte_end":9971689,"line_start":3166,"line_end":3166,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9971690,"byte_end":9971713,"line_start":3167,"line_end":3167,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9971714,"byte_end":9971758,"line_start":3168,"line_end":3168,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -6.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9971759,"byte_end":9971804,"line_start":3169,"line_end":3169,"column_start":1,"column_end":46}},{"value":"/ let c = unpack_high_m128d(a, b).to_array();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9971805,"byte_end":9971852,"line_start":3170,"line_end":3170,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [87.5, -6.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9971853,"byte_end":9971885,"line_start":3171,"line_end":3171,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9971886,"byte_end":9971893,"line_start":3172,"line_end":3172,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9971894,"byte_end":9971905,"line_start":3173,"line_end":3173,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9971906,"byte_end":9971923,"line_start":3174,"line_end":3174,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":804},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9972607,"byte_end":9972626,"line_start":3194,"line_end":3194,"column_start":8,"column_end":27},"name":"unpack_low_i8_m128i","qualname":"::x86_x64::sse2::unpack_low_i8_m128i","value":"fn unpack_low_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave low `i8` lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a =\n   m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n let b = m128i::from([\n   12_i8, 11, 22, 13, 99, 15, 16, 17, 8, 19, -20, 21, 22, -23, 24, 127,\n ]);\n let c: [i8; 16] = unpack_low_i8_m128i(a, b).into();\n assert_eq!(c, [0, 12, 1, 11, 2, 22, 3, 13, 4, 99, 5, 15, 6, 16, 7, 17]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave low `i8` lanes of `a` and `b`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9972085,"byte_end":9972141,"line_start":3180,"line_end":3180,"column_start":1,"column_end":57}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9972142,"byte_end":9972149,"line_start":3181,"line_end":3181,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9972150,"byte_end":9972173,"line_start":3182,"line_end":3182,"column_start":1,"column_end":24}},{"value":"/ let a =","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9972174,"byte_end":9972185,"line_start":3183,"line_end":3183,"column_start":1,"column_end":12}},{"value":"/   m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9972186,"byte_end":9972263,"line_start":3184,"line_end":3184,"column_start":1,"column_end":78}},{"value":"/ let b = m128i::from([","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9972264,"byte_end":9972289,"line_start":3185,"line_end":3185,"column_start":1,"column_end":26}},{"value":"/   12_i8, 11, 22, 13, 99, 15, 16, 17, 8, 19, -20, 21, 22, -23, 24, 127,","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9972290,"byte_end":9972364,"line_start":3186,"line_end":3186,"column_start":1,"column_end":75}},{"value":"/ ]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9972365,"byte_end":9972372,"line_start":3187,"line_end":3187,"column_start":1,"column_end":8}},{"value":"/ let c: [i8; 16] = unpack_low_i8_m128i(a, b).into();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9972373,"byte_end":9972428,"line_start":3188,"line_end":3188,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(c, [0, 12, 1, 11, 2, 22, 3, 13, 4, 99, 5, 15, 6, 16, 7, 17]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9972429,"byte_end":9972505,"line_start":3189,"line_end":3189,"column_start":1,"column_end":77}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9972506,"byte_end":9972513,"line_start":3190,"line_end":3190,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9972514,"byte_end":9972525,"line_start":3191,"line_end":3191,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9972526,"byte_end":9972543,"line_start":3192,"line_end":3192,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":805},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9973123,"byte_end":9973143,"line_start":3209,"line_end":3209,"column_start":8,"column_end":28},"name":"unpack_low_i16_m128i","qualname":"::x86_x64::sse2::unpack_low_i16_m128i","value":"fn unpack_low_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave low `i16` lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);\n let c: [i16; 8] = unpack_low_i16_m128i(a, b).into();\n assert_eq!(c, [1, 5, 2, 6, 3, 7, 4, 8]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave low `i16` lanes of `a` and `b`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9972709,"byte_end":9972766,"line_start":3198,"line_end":3198,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9972767,"byte_end":9972774,"line_start":3199,"line_end":3199,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9972775,"byte_end":9972798,"line_start":3200,"line_end":3200,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9972799,"byte_end":9972857,"line_start":3201,"line_end":3201,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9972858,"byte_end":9972919,"line_start":3202,"line_end":3202,"column_start":1,"column_end":62}},{"value":"/ let c: [i16; 8] = unpack_low_i16_m128i(a, b).into();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9972920,"byte_end":9972976,"line_start":3203,"line_end":3203,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [1, 5, 2, 6, 3, 7, 4, 8]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9972977,"byte_end":9973021,"line_start":3204,"line_end":3204,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9973022,"byte_end":9973029,"line_start":3205,"line_end":3205,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9973030,"byte_end":9973041,"line_start":3206,"line_end":3206,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9973042,"byte_end":9973059,"line_start":3207,"line_end":3207,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":806},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9973586,"byte_end":9973606,"line_start":3224,"line_end":3224,"column_start":8,"column_end":28},"name":"unpack_low_i32_m128i","qualname":"::x86_x64::sse2::unpack_low_i32_m128i","value":"fn unpack_low_i32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave low `i32` lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let b = m128i::from([5, 6, 7, 8]);\n let c: [i32; 4] = unpack_low_i32_m128i(a, b).into();\n assert_eq!(c, [1, 5, 2, 6]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave low `i32` lanes of `a` and `b`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9973227,"byte_end":9973284,"line_start":3213,"line_end":3213,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9973285,"byte_end":9973292,"line_start":3214,"line_end":3214,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9973293,"byte_end":9973316,"line_start":3215,"line_end":3215,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9973317,"byte_end":9973355,"line_start":3216,"line_end":3216,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([5, 6, 7, 8]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9973356,"byte_end":9973394,"line_start":3217,"line_end":3217,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = unpack_low_i32_m128i(a, b).into();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9973395,"byte_end":9973451,"line_start":3218,"line_end":3218,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [1, 5, 2, 6]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9973452,"byte_end":9973484,"line_start":3219,"line_end":3219,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9973485,"byte_end":9973492,"line_start":3220,"line_end":3220,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9973493,"byte_end":9973504,"line_start":3221,"line_end":3221,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9973505,"byte_end":9973522,"line_start":3222,"line_end":3222,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":807},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9974050,"byte_end":9974070,"line_start":3239,"line_end":3239,"column_start":8,"column_end":28},"name":"unpack_low_i64_m128i","qualname":"::x86_x64::sse2::unpack_low_i64_m128i","value":"fn unpack_low_i64_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave low `i64` lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([92_i64, 87]);\n let b = m128i::from([-9001_i64, 1]);\n let c: [i64; 2] = unpack_low_i64_m128i(a, b).into();\n assert_eq!(c, [92, -9001]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave low `i64` lanes of `a` and `b`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9973690,"byte_end":9973747,"line_start":3228,"line_end":3228,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9973748,"byte_end":9973755,"line_start":3229,"line_end":3229,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9973756,"byte_end":9973779,"line_start":3230,"line_end":3230,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([92_i64, 87]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9973780,"byte_end":9973818,"line_start":3231,"line_end":3231,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([-9001_i64, 1]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9973819,"byte_end":9973859,"line_start":3232,"line_end":3232,"column_start":1,"column_end":41}},{"value":"/ let c: [i64; 2] = unpack_low_i64_m128i(a, b).into();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9973860,"byte_end":9973916,"line_start":3233,"line_end":3233,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [92, -9001]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9973917,"byte_end":9973948,"line_start":3234,"line_end":3234,"column_start":1,"column_end":32}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9973949,"byte_end":9973956,"line_start":3235,"line_end":3235,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9973957,"byte_end":9973968,"line_start":3236,"line_end":3236,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9973969,"byte_end":9973986,"line_start":3237,"line_end":3237,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":808},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9974511,"byte_end":9974527,"line_start":3254,"line_end":3254,"column_start":8,"column_end":24},"name":"unpack_low_m128d","qualname":"::x86_x64::sse2::unpack_low_m128d","value":"fn unpack_low_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave low lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -6.0]);\n let c = unpack_low_m128d(a, b).to_array();\n assert_eq!(c, [92.0, 100.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave low lanes of `a` and `b`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9974154,"byte_end":9974205,"line_start":3243,"line_end":3243,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9974206,"byte_end":9974213,"line_start":3244,"line_end":3244,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9974214,"byte_end":9974237,"line_start":3245,"line_end":3245,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9974238,"byte_end":9974282,"line_start":3246,"line_end":3246,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -6.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9974283,"byte_end":9974328,"line_start":3247,"line_end":3247,"column_start":1,"column_end":46}},{"value":"/ let c = unpack_low_m128d(a, b).to_array();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9974329,"byte_end":9974375,"line_start":3248,"line_end":3248,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [92.0, 100.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9974376,"byte_end":9974409,"line_start":3249,"line_end":3249,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9974410,"byte_end":9974417,"line_start":3250,"line_end":3250,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9974418,"byte_end":9974429,"line_start":3251,"line_end":3251,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9974430,"byte_end":9974447,"line_start":3252,"line_end":3252,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":809},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9974922,"byte_end":9974934,"line_start":3269,"line_end":3269,"column_start":8,"column_end":20},"name":"bitxor_m128d","qualname":"::x86_x64::sse2::bitxor_m128d","value":"fn bitxor_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a ^ b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 0.0]);\n let b = m128d::from_array([1.0, 1.0]);\n let c = bitxor_m128d(a, b).to_array();\n assert_eq!(c, [0.0, 1.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a ^ b`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9974608,"byte_end":9974628,"line_start":3258,"line_end":3258,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9974629,"byte_end":9974636,"line_start":3259,"line_end":3259,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9974637,"byte_end":9974660,"line_start":3260,"line_end":3260,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 0.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9974661,"byte_end":9974703,"line_start":3261,"line_end":3261,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9974704,"byte_end":9974746,"line_start":3262,"line_end":3262,"column_start":1,"column_end":43}},{"value":"/ let c = bitxor_m128d(a, b).to_array();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9974747,"byte_end":9974789,"line_start":3263,"line_end":3263,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(c, [0.0, 1.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9974790,"byte_end":9974820,"line_start":3264,"line_end":3264,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9974821,"byte_end":9974828,"line_start":3265,"line_end":3265,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9974829,"byte_end":9974840,"line_start":3266,"line_end":3266,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9974841,"byte_end":9974858,"line_start":3267,"line_end":3267,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":810},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9975324,"byte_end":9975336,"line_start":3284,"line_end":3284,"column_start":8,"column_end":20},"name":"bitxor_m128i","qualname":"::x86_x64::sse2::bitxor_m128i","value":"fn bitxor_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a ^ b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 0, 1, 0]);\n let b = m128i::from([1, 1, 0, 0]);\n let c: [i32; 4] = bitxor_m128i(a, b).into();\n assert_eq!(c, [0, 1, 1, 0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a ^ b`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9975010,"byte_end":9975030,"line_start":3273,"line_end":3273,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9975031,"byte_end":9975038,"line_start":3274,"line_end":3274,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9975039,"byte_end":9975062,"line_start":3275,"line_end":3275,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 0, 1, 0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9975063,"byte_end":9975101,"line_start":3276,"line_end":3276,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([1, 1, 0, 0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9975102,"byte_end":9975140,"line_start":3277,"line_end":3277,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = bitxor_m128i(a, b).into();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9975141,"byte_end":9975189,"line_start":3278,"line_end":3278,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, 1, 1, 0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9975190,"byte_end":9975222,"line_start":3279,"line_end":3279,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9975223,"byte_end":9975230,"line_start":3280,"line_end":3280,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9975231,"byte_end":9975242,"line_start":3281,"line_end":3281,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9975243,"byte_end":9975260,"line_start":3282,"line_end":3282,"column_start":1,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":813},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9976136,"byte_end":9976139,"line_start":3305,"line_end":3305,"column_start":6,"column_end":9},"name":"add","qualname":"<m128d as core::ops::Add>::add","value":"fn add(Self, Self) -> Self","parent":{"krate":1,"index":3247},"children":[],"decl_id":{"krate":1,"index":3250},"docs":"","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9976099,"byte_end":9976110,"line_start":3303,"line_end":3303,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9976113,"byte_end":9976130,"line_start":3304,"line_end":3304,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":815},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9976250,"byte_end":9976260,"line_start":3311,"line_end":3311,"column_start":6,"column_end":16},"name":"add_assign","qualname":"<m128d as core::ops::AddAssign>::add_assign","value":"fn add_assign(&mut Self, Self)","parent":{"krate":1,"index":3278},"children":[],"decl_id":{"krate":1,"index":3280},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9976227,"byte_end":9976244,"line_start":3310,"line_end":3310,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":818},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9976402,"byte_end":9976408,"line_start":3320,"line_end":3320,"column_start":6,"column_end":12},"name":"bitand","qualname":"<m128d as core::ops::BitAnd>::bitand","value":"fn bitand(Self, Self) -> Self","parent":{"krate":1,"index":3306},"children":[],"decl_id":{"krate":1,"index":3309},"docs":"","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9976365,"byte_end":9976376,"line_start":3318,"line_end":3318,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9976379,"byte_end":9976396,"line_start":3319,"line_end":3319,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":820},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9976525,"byte_end":9976538,"line_start":3326,"line_end":3326,"column_start":6,"column_end":19},"name":"bitand_assign","qualname":"<m128d as core::ops::BitAndAssign>::bitand_assign","value":"fn bitand_assign(&mut Self, Self)","parent":{"krate":1,"index":3333},"children":[],"decl_id":{"krate":1,"index":3335},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9976502,"byte_end":9976519,"line_start":3325,"line_end":3325,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":823},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9976679,"byte_end":9976684,"line_start":3335,"line_end":3335,"column_start":6,"column_end":11},"name":"bitor","qualname":"<m128d as core::ops::BitOr>::bitor","value":"fn bitor(Self, Self) -> Self","parent":{"krate":1,"index":3311},"children":[],"decl_id":{"krate":1,"index":3314},"docs":"","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9976642,"byte_end":9976653,"line_start":3333,"line_end":3333,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9976656,"byte_end":9976673,"line_start":3334,"line_end":3334,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":825},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9976799,"byte_end":9976811,"line_start":3341,"line_end":3341,"column_start":6,"column_end":18},"name":"bitor_assign","qualname":"<m128d as core::ops::BitOrAssign>::bitor_assign","value":"fn bitor_assign(&mut Self, Self)","parent":{"krate":1,"index":3337},"children":[],"decl_id":{"krate":1,"index":3339},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9976776,"byte_end":9976793,"line_start":3340,"line_end":3340,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":828},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9976953,"byte_end":9976959,"line_start":3350,"line_end":3350,"column_start":6,"column_end":12},"name":"bitxor","qualname":"<m128d as core::ops::BitXor>::bitxor","value":"fn bitxor(Self, Self) -> Self","parent":{"krate":1,"index":3316},"children":[],"decl_id":{"krate":1,"index":3319},"docs":"","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9976916,"byte_end":9976927,"line_start":3348,"line_end":3348,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9976930,"byte_end":9976947,"line_start":3349,"line_end":3349,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":830},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9977076,"byte_end":9977089,"line_start":3356,"line_end":3356,"column_start":6,"column_end":19},"name":"bitxor_assign","qualname":"<m128d as core::ops::BitXorAssign>::bitxor_assign","value":"fn bitxor_assign(&mut Self, Self)","parent":{"krate":1,"index":3341},"children":[],"decl_id":{"krate":1,"index":3343},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9977053,"byte_end":9977070,"line_start":3355,"line_end":3355,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":833},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9977228,"byte_end":9977231,"line_start":3365,"line_end":3365,"column_start":6,"column_end":9},"name":"div","qualname":"<m128d as core::ops::Div>::div","value":"fn div(Self, Self) -> Self","parent":{"krate":1,"index":3262},"children":[],"decl_id":{"krate":1,"index":3265},"docs":"","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9977191,"byte_end":9977202,"line_start":3363,"line_end":3363,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9977205,"byte_end":9977222,"line_start":3364,"line_end":3364,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":835},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9977342,"byte_end":9977352,"line_start":3371,"line_end":3371,"column_start":6,"column_end":16},"name":"div_assign","qualname":"<m128d as core::ops::DivAssign>::div_assign","value":"fn div_assign(&mut Self, Self)","parent":{"krate":1,"index":3290},"children":[],"decl_id":{"krate":1,"index":3292},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9977319,"byte_end":9977336,"line_start":3370,"line_end":3370,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":838},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9977491,"byte_end":9977494,"line_start":3380,"line_end":3380,"column_start":6,"column_end":9},"name":"mul","qualname":"<m128d as core::ops::Mul>::mul","value":"fn mul(Self, Self) -> Self","parent":{"krate":1,"index":3257},"children":[],"decl_id":{"krate":1,"index":3260},"docs":"","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9977454,"byte_end":9977465,"line_start":3378,"line_end":3378,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9977468,"byte_end":9977485,"line_start":3379,"line_end":3379,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":840},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9977605,"byte_end":9977615,"line_start":3386,"line_end":3386,"column_start":6,"column_end":16},"name":"mul_assign","qualname":"<m128d as core::ops::MulAssign>::mul_assign","value":"fn mul_assign(&mut Self, Self)","parent":{"krate":1,"index":3286},"children":[],"decl_id":{"krate":1,"index":3288},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9977582,"byte_end":9977599,"line_start":3385,"line_end":3385,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":843},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9977754,"byte_end":9977757,"line_start":3395,"line_end":3395,"column_start":6,"column_end":9},"name":"neg","qualname":"<m128d as core::ops::Neg>::neg","value":"fn neg(Self) -> Self","parent":{"krate":1,"index":3274},"children":[],"decl_id":{"krate":1,"index":3276},"docs":"","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9977717,"byte_end":9977728,"line_start":3393,"line_end":3393,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9977731,"byte_end":9977748,"line_start":3394,"line_end":3394,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":846},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9978077,"byte_end":9978080,"line_start":3408,"line_end":3408,"column_start":6,"column_end":9},"name":"not","qualname":"<m128d as core::ops::Not>::not","value":"fn not(Self) -> Self","parent":{"krate":1,"index":3299},"children":[],"decl_id":{"krate":1,"index":3301},"docs":" Not a direct intrinsic, but it's very useful and the implementation is\n simple enough.","sig":null,"attributes":[{"value":"/ Not a direct intrinsic, but it's very useful and the implementation is","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9977862,"byte_end":9977936,"line_start":3402,"line_end":3402,"column_start":3,"column_end":77}},{"value":"/ simple enough.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9977939,"byte_end":9977957,"line_start":3403,"line_end":3403,"column_start":3,"column_end":21}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9977960,"byte_end":9977963,"line_start":3404,"line_end":3404,"column_start":3,"column_end":6}},{"value":"/ Negates the bits by performing an `xor` with an all-1s bit pattern.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9977966,"byte_end":9978037,"line_start":3405,"line_end":3405,"column_start":3,"column_end":74}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9978040,"byte_end":9978051,"line_start":3406,"line_end":3406,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9978054,"byte_end":9978071,"line_start":3407,"line_end":3407,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":849},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9978268,"byte_end":9978271,"line_start":3418,"line_end":3418,"column_start":6,"column_end":9},"name":"sub","qualname":"<m128d as core::ops::Sub>::sub","value":"fn sub(Self, Self) -> Self","parent":{"krate":1,"index":3252},"children":[],"decl_id":{"krate":1,"index":3255},"docs":"","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9978231,"byte_end":9978242,"line_start":3416,"line_end":3416,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9978245,"byte_end":9978262,"line_start":3417,"line_end":3417,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":851},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9978382,"byte_end":9978392,"line_start":3424,"line_end":3424,"column_start":6,"column_end":16},"name":"sub_assign","qualname":"<m128d as core::ops::SubAssign>::sub_assign","value":"fn sub_assign(&mut Self, Self)","parent":{"krate":1,"index":3282},"children":[],"decl_id":{"krate":1,"index":3284},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9978359,"byte_end":9978376,"line_start":3423,"line_end":3423,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":853},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9978593,"byte_end":9978595,"line_start":3433,"line_end":3433,"column_start":6,"column_end":8},"name":"eq","qualname":"<m128d as core::cmp::PartialEq>::eq","value":"fn eq(&Self, &Self) -> bool","parent":{"krate":1,"index":2831},"children":[],"decl_id":{"krate":1,"index":2833},"docs":" Not a direct intrinsic, this is a `cmp_eq_mask` and then a `move_mask`.\n","sig":null,"attributes":[{"value":"/ Not a direct intrinsic, this is a `cmp_eq_mask` and then a `move_mask`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9978478,"byte_end":9978553,"line_start":3430,"line_end":3430,"column_start":3,"column_end":78}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9978556,"byte_end":9978567,"line_start":3431,"line_end":3431,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9978570,"byte_end":9978587,"line_start":3432,"line_end":3432,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":856},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9978952,"byte_end":9978958,"line_start":3446,"line_end":3446,"column_start":6,"column_end":12},"name":"bitand","qualname":"<m128i as core::ops::BitAnd>::bitand","value":"fn bitand(Self, Self) -> Self","parent":{"krate":1,"index":3306},"children":[],"decl_id":{"krate":1,"index":3309},"docs":"","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9978915,"byte_end":9978926,"line_start":3444,"line_end":3444,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9978929,"byte_end":9978946,"line_start":3445,"line_end":3445,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":858},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9979075,"byte_end":9979088,"line_start":3452,"line_end":3452,"column_start":6,"column_end":19},"name":"bitand_assign","qualname":"<m128i as core::ops::BitAndAssign>::bitand_assign","value":"fn bitand_assign(&mut Self, Self)","parent":{"krate":1,"index":3333},"children":[],"decl_id":{"krate":1,"index":3335},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9979052,"byte_end":9979069,"line_start":3451,"line_end":3451,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":861},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9979229,"byte_end":9979234,"line_start":3461,"line_end":3461,"column_start":6,"column_end":11},"name":"bitor","qualname":"<m128i as core::ops::BitOr>::bitor","value":"fn bitor(Self, Self) -> Self","parent":{"krate":1,"index":3311},"children":[],"decl_id":{"krate":1,"index":3314},"docs":"","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9979192,"byte_end":9979203,"line_start":3459,"line_end":3459,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9979206,"byte_end":9979223,"line_start":3460,"line_end":3460,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":863},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9979349,"byte_end":9979361,"line_start":3467,"line_end":3467,"column_start":6,"column_end":18},"name":"bitor_assign","qualname":"<m128i as core::ops::BitOrAssign>::bitor_assign","value":"fn bitor_assign(&mut Self, Self)","parent":{"krate":1,"index":3337},"children":[],"decl_id":{"krate":1,"index":3339},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9979326,"byte_end":9979343,"line_start":3466,"line_end":3466,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":866},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9979503,"byte_end":9979509,"line_start":3476,"line_end":3476,"column_start":6,"column_end":12},"name":"bitxor","qualname":"<m128i as core::ops::BitXor>::bitxor","value":"fn bitxor(Self, Self) -> Self","parent":{"krate":1,"index":3316},"children":[],"decl_id":{"krate":1,"index":3319},"docs":"","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9979466,"byte_end":9979477,"line_start":3474,"line_end":3474,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9979480,"byte_end":9979497,"line_start":3475,"line_end":3475,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":868},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9979626,"byte_end":9979639,"line_start":3482,"line_end":3482,"column_start":6,"column_end":19},"name":"bitxor_assign","qualname":"<m128i as core::ops::BitXorAssign>::bitxor_assign","value":"fn bitxor_assign(&mut Self, Self)","parent":{"krate":1,"index":3341},"children":[],"decl_id":{"krate":1,"index":3343},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9979603,"byte_end":9979620,"line_start":3481,"line_end":3481,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":871},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9979956,"byte_end":9979959,"line_start":3495,"line_end":3495,"column_start":6,"column_end":9},"name":"not","qualname":"<m128i as core::ops::Not>::not","value":"fn not(Self) -> Self","parent":{"krate":1,"index":3299},"children":[],"decl_id":{"krate":1,"index":3301},"docs":" Not a direct intrinsic, but it's very useful and the implementation is\n simple enough.","sig":null,"attributes":[{"value":"/ Not a direct intrinsic, but it's very useful and the implementation is","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9979741,"byte_end":9979815,"line_start":3489,"line_end":3489,"column_start":3,"column_end":77}},{"value":"/ simple enough.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9979818,"byte_end":9979836,"line_start":3490,"line_end":3490,"column_start":3,"column_end":21}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9979839,"byte_end":9979842,"line_start":3491,"line_end":3491,"column_start":3,"column_end":6}},{"value":"/ Negates the bits by performing an `xor` with an all-1s bit pattern.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9979845,"byte_end":9979916,"line_start":3492,"line_end":3492,"column_start":3,"column_end":74}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9979919,"byte_end":9979930,"line_start":3493,"line_end":3493,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9979933,"byte_end":9979950,"line_start":3494,"line_end":3494,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":873},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9980215,"byte_end":9980217,"line_start":3506,"line_end":3506,"column_start":6,"column_end":8},"name":"eq","qualname":"<m128i as core::cmp::PartialEq>::eq","value":"fn eq(&Self, &Self) -> bool","parent":{"krate":1,"index":2831},"children":[],"decl_id":{"krate":1,"index":2833},"docs":" Not a direct intrinsic, this is a `cmp_eq_mask_i8_m128i` and then a\n `move_mask_i8_m128i`.\n","sig":null,"attributes":[{"value":"/ Not a direct intrinsic, this is a `cmp_eq_mask_i8_m128i` and then a","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9980076,"byte_end":9980147,"line_start":3502,"line_end":3502,"column_start":3,"column_end":74}},{"value":"/ `move_mask_i8_m128i`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9980150,"byte_end":9980175,"line_start":3503,"line_end":3503,"column_start":3,"column_end":28}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9980178,"byte_end":9980189,"line_start":3504,"line_end":3504,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9980192,"byte_end":9980209,"line_start":3505,"line_end":3505,"column_start":3,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":881},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9984344,"byte_end":9984356,"line_start":16,"line_end":16,"column_start":8,"column_end":20},"name":"addsub_m128d","qualname":"::x86_x64::sse3::addsub_m128d","value":"fn addsub_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Add the high lane and subtract the low lane.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([10.0, 50.0]);\n let b = m128d::from_array([100.0, 500.0]);\n let c = addsub_m128d(a, b).to_array();\n assert_eq!(c, [-90.0, 550.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Add the high lane and subtract the low lane.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9983992,"byte_end":9984040,"line_start":5,"line_end":5,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9984041,"byte_end":9984048,"line_start":6,"line_end":6,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9984049,"byte_end":9984072,"line_start":7,"line_end":7,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([10.0, 50.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9984073,"byte_end":9984117,"line_start":8,"line_end":8,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, 500.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9984118,"byte_end":9984164,"line_start":9,"line_end":9,"column_start":1,"column_end":47}},{"value":"/ let c = addsub_m128d(a, b).to_array();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9984165,"byte_end":9984207,"line_start":10,"line_end":10,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(c, [-90.0, 550.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9984208,"byte_end":9984242,"line_start":11,"line_end":11,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9984243,"byte_end":9984250,"line_start":12,"line_end":12,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9984251,"byte_end":9984262,"line_start":13,"line_end":13,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9984263,"byte_end":9984280,"line_start":14,"line_end":14,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":882},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9984844,"byte_end":9984855,"line_start":31,"line_end":31,"column_start":8,"column_end":19},"name":"addsub_m128","qualname":"::x86_x64::sse3::addsub_m128","value":"fn addsub_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Alternately, from the top, add a lane and then subtract a lane.\n ```\n # use safe_arch::*;\n let a = m128::from_array([10.0, 20.0, 30.0, 40.0]);\n let b = m128::from_array([100.0, 200.0, 300.0, 400.0]);\n let c = addsub_m128(a, b).to_array();\n assert_eq!(c, [-90.0, 220.0, -270.0, 440.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Alternately, from the top, add a lane and then subtract a lane.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9984435,"byte_end":9984502,"line_start":20,"line_end":20,"column_start":1,"column_end":68}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9984503,"byte_end":9984510,"line_start":21,"line_end":21,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9984511,"byte_end":9984534,"line_start":22,"line_end":22,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 20.0, 30.0, 40.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9984535,"byte_end":9984590,"line_start":23,"line_end":23,"column_start":1,"column_end":56}},{"value":"/ let b = m128::from_array([100.0, 200.0, 300.0, 400.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9984591,"byte_end":9984650,"line_start":24,"line_end":24,"column_start":1,"column_end":60}},{"value":"/ let c = addsub_m128(a, b).to_array();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9984651,"byte_end":9984692,"line_start":25,"line_end":25,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [-90.0, 220.0, -270.0, 440.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9984693,"byte_end":9984742,"line_start":26,"line_end":26,"column_start":1,"column_end":50}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9984743,"byte_end":9984750,"line_start":27,"line_end":27,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9984751,"byte_end":9984762,"line_start":28,"line_end":28,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9984763,"byte_end":9984780,"line_start":29,"line_end":29,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":883},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9985306,"byte_end":9985326,"line_start":46,"line_end":46,"column_start":8,"column_end":28},"name":"add_horizontal_m128d","qualname":"::x86_x64::sse3::add_horizontal_m128d","value":"fn add_horizontal_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Add each lane horizontally, pack the outputs as `a` then `b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([10.0, 50.0]);\n let b = m128d::from_array([100.0, 500.0]);\n let c = add_horizontal_m128d(a, b).to_array();\n assert_eq!(c, [60.0, 600.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Add each lane horizontally, pack the outputs as `a` then `b`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9984930,"byte_end":9984995,"line_start":35,"line_end":35,"column_start":1,"column_end":66}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9984996,"byte_end":9985003,"line_start":36,"line_end":36,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9985004,"byte_end":9985027,"line_start":37,"line_end":37,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([10.0, 50.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9985028,"byte_end":9985072,"line_start":38,"line_end":38,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, 500.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9985073,"byte_end":9985119,"line_start":39,"line_end":39,"column_start":1,"column_end":47}},{"value":"/ let c = add_horizontal_m128d(a, b).to_array();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9985120,"byte_end":9985170,"line_start":40,"line_end":40,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(c, [60.0, 600.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9985171,"byte_end":9985204,"line_start":41,"line_end":41,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9985205,"byte_end":9985212,"line_start":42,"line_end":42,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9985213,"byte_end":9985224,"line_start":43,"line_end":43,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9985225,"byte_end":9985242,"line_start":44,"line_end":44,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":884},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9985815,"byte_end":9985834,"line_start":61,"line_end":61,"column_start":8,"column_end":27},"name":"add_horizontal_m128","qualname":"::x86_x64::sse3::add_horizontal_m128","value":"fn add_horizontal_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Add each lane horizontally, pack the outputs as `a` then `b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([10.0, 20.0, 30.0, 40.0]);\n let b = m128::from_array([100.0, 200.0, 300.0, 400.0]);\n let c = add_horizontal_m128(a, b).to_array();\n assert_eq!(c, [30.0, 70.0, 300.0, 700.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Add each lane horizontally, pack the outputs as `a` then `b`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9985403,"byte_end":9985468,"line_start":50,"line_end":50,"column_start":1,"column_end":66}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9985469,"byte_end":9985476,"line_start":51,"line_end":51,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9985477,"byte_end":9985500,"line_start":52,"line_end":52,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 20.0, 30.0, 40.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9985501,"byte_end":9985556,"line_start":53,"line_end":53,"column_start":1,"column_end":56}},{"value":"/ let b = m128::from_array([100.0, 200.0, 300.0, 400.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9985557,"byte_end":9985616,"line_start":54,"line_end":54,"column_start":1,"column_end":60}},{"value":"/ let c = add_horizontal_m128(a, b).to_array();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9985617,"byte_end":9985666,"line_start":55,"line_end":55,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [30.0, 70.0, 300.0, 700.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9985667,"byte_end":9985713,"line_start":56,"line_end":56,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9985714,"byte_end":9985721,"line_start":57,"line_end":57,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9985722,"byte_end":9985733,"line_start":58,"line_end":58,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9985734,"byte_end":9985751,"line_start":59,"line_end":59,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":885},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9986290,"byte_end":9986310,"line_start":76,"line_end":76,"column_start":8,"column_end":28},"name":"sub_horizontal_m128d","qualname":"::x86_x64::sse3::sub_horizontal_m128d","value":"fn sub_horizontal_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Subtract each lane horizontally, pack the outputs as `a` then `b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([10.0, 50.0]);\n let b = m128d::from_array([100.0, 500.0]);\n let c = sub_horizontal_m128d(a, b).to_array();\n assert_eq!(c, [-40.0, -400.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Subtract each lane horizontally, pack the outputs as `a` then `b`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9985907,"byte_end":9985977,"line_start":65,"line_end":65,"column_start":1,"column_end":71}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9985978,"byte_end":9985985,"line_start":66,"line_end":66,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9985986,"byte_end":9986009,"line_start":67,"line_end":67,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([10.0, 50.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9986010,"byte_end":9986054,"line_start":68,"line_end":68,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, 500.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9986055,"byte_end":9986101,"line_start":69,"line_end":69,"column_start":1,"column_end":47}},{"value":"/ let c = sub_horizontal_m128d(a, b).to_array();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9986102,"byte_end":9986152,"line_start":70,"line_end":70,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(c, [-40.0, -400.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9986153,"byte_end":9986188,"line_start":71,"line_end":71,"column_start":1,"column_end":36}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9986189,"byte_end":9986196,"line_start":72,"line_end":72,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9986197,"byte_end":9986208,"line_start":73,"line_end":73,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9986209,"byte_end":9986226,"line_start":74,"line_end":74,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":886},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9986808,"byte_end":9986827,"line_start":91,"line_end":91,"column_start":8,"column_end":27},"name":"sub_horizontal_m128","qualname":"::x86_x64::sse3::sub_horizontal_m128","value":"fn sub_horizontal_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Subtract each lane horizontally, pack the outputs as `a` then `b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([10.0, 20.0, 30.0, 45.0]);\n let b = m128::from_array([100.0, 200.0, 300.0, 450.0]);\n let c = sub_horizontal_m128(a, b).to_array();\n assert_eq!(c, [-10.0, -15.0, -100.0, -150.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Subtract each lane horizontally, pack the outputs as `a` then `b`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9986387,"byte_end":9986457,"line_start":80,"line_end":80,"column_start":1,"column_end":71}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9986458,"byte_end":9986465,"line_start":81,"line_end":81,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9986466,"byte_end":9986489,"line_start":82,"line_end":82,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 20.0, 30.0, 45.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9986490,"byte_end":9986545,"line_start":83,"line_end":83,"column_start":1,"column_end":56}},{"value":"/ let b = m128::from_array([100.0, 200.0, 300.0, 450.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9986546,"byte_end":9986605,"line_start":84,"line_end":84,"column_start":1,"column_end":60}},{"value":"/ let c = sub_horizontal_m128(a, b).to_array();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9986606,"byte_end":9986655,"line_start":85,"line_end":85,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [-10.0, -15.0, -100.0, -150.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9986656,"byte_end":9986706,"line_start":86,"line_end":86,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9986707,"byte_end":9986714,"line_start":87,"line_end":87,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9986715,"byte_end":9986726,"line_start":88,"line_end":88,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9986727,"byte_end":9986744,"line_start":89,"line_end":89,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":887},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9987225,"byte_end":9987251,"line_start":105,"line_end":105,"column_start":8,"column_end":34},"name":"duplicate_low_lane_m128d_s","qualname":"::x86_x64::sse3::duplicate_low_lane_m128d_s","value":"fn duplicate_low_lane_m128d_s(m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Copy the low lane of the input to both lanes of the output.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.0]);\n let b = duplicate_low_lane_m128d_s(a);\n assert_eq!(b.to_array(), [1.0, 1.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Copy the low lane of the input to both lanes of the output.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9986900,"byte_end":9986963,"line_start":95,"line_end":95,"column_start":1,"column_end":64}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9986964,"byte_end":9986971,"line_start":96,"line_end":96,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9986972,"byte_end":9986995,"line_start":97,"line_end":97,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9986996,"byte_end":9987038,"line_start":98,"line_end":98,"column_start":1,"column_end":43}},{"value":"/ let b = duplicate_low_lane_m128d_s(a);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9987039,"byte_end":9987081,"line_start":99,"line_end":99,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(b.to_array(), [1.0, 1.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9987082,"byte_end":9987123,"line_start":100,"line_end":100,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9987124,"byte_end":9987131,"line_start":101,"line_end":101,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9987132,"byte_end":9987143,"line_start":102,"line_end":102,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9987144,"byte_end":9987161,"line_start":103,"line_end":103,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":888},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9987641,"byte_end":9987665,"line_start":119,"line_end":119,"column_start":8,"column_end":32},"name":"duplicate_odd_lanes_m128","qualname":"::x86_x64::sse3::duplicate_odd_lanes_m128","value":"fn duplicate_odd_lanes_m128(m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Duplicate the odd lanes to the even lanes.\n ```\n # use safe_arch::*;\n let a = m128::from_array([0.0, 1.0, 2.0, 3.0]);\n let b = duplicate_odd_lanes_m128(a);\n assert_eq!(b.to_array(), [1.0, 1.0, 3.0, 3.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Duplicate the odd lanes to the even lanes.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9987316,"byte_end":9987362,"line_start":109,"line_end":109,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9987363,"byte_end":9987370,"line_start":110,"line_end":110,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9987371,"byte_end":9987394,"line_start":111,"line_end":111,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([0.0, 1.0, 2.0, 3.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9987395,"byte_end":9987446,"line_start":112,"line_end":112,"column_start":1,"column_end":52}},{"value":"/ let b = duplicate_odd_lanes_m128(a);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9987447,"byte_end":9987487,"line_start":113,"line_end":113,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(b.to_array(), [1.0, 1.0, 3.0, 3.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9987488,"byte_end":9987539,"line_start":114,"line_end":114,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9987540,"byte_end":9987547,"line_start":115,"line_end":115,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9987548,"byte_end":9987559,"line_start":116,"line_end":116,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9987560,"byte_end":9987577,"line_start":117,"line_end":117,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":889},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9988054,"byte_end":9988079,"line_start":133,"line_end":133,"column_start":8,"column_end":33},"name":"duplicate_even_lanes_m128","qualname":"::x86_x64::sse3::duplicate_even_lanes_m128","value":"fn duplicate_even_lanes_m128(m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Duplicate the odd lanes to the even lanes.\n ```\n # use safe_arch::*;\n let a = m128::from_array([0.0, 1.0, 2.0, 3.0]);\n let b = duplicate_even_lanes_m128(a);\n assert_eq!(b.to_array(), [0.0, 0.0, 2.0, 2.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Duplicate the odd lanes to the even lanes.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9987728,"byte_end":9987774,"line_start":123,"line_end":123,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9987775,"byte_end":9987782,"line_start":124,"line_end":124,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9987783,"byte_end":9987806,"line_start":125,"line_end":125,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([0.0, 1.0, 2.0, 3.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9987807,"byte_end":9987858,"line_start":126,"line_end":126,"column_start":1,"column_end":52}},{"value":"/ let b = duplicate_even_lanes_m128(a);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9987859,"byte_end":9987900,"line_start":127,"line_end":127,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(b.to_array(), [0.0, 0.0, 2.0, 2.0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9987901,"byte_end":9987952,"line_start":128,"line_end":128,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9987953,"byte_end":9987960,"line_start":129,"line_end":129,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9987961,"byte_end":9987972,"line_start":130,"line_end":130,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse3.rs","byte_start":9987973,"byte_end":9987990,"line_start":131,"line_end":131,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":893},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9988820,"byte_end":9988832,"line_start":19,"line_end":19,"column_start":8,"column_end":20},"name":"abs_i8_m128i","qualname":"::x86_x64::ssse3::abs_i8_m128i","value":"fn abs_i8_m128i(m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise absolute value with lanes as `i8`.","sig":null,"attributes":[{"value":"/ Lanewise absolute value with lanes as `i8`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9988327,"byte_end":9988374,"line_start":5,"line_end":5,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9988375,"byte_end":9988378,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ This is a \"wrapping\" absolute value, so `i8::MIN` stays as `i8::MIN`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9988379,"byte_end":9988452,"line_start":7,"line_end":7,"column_start":1,"column_end":74}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9988453,"byte_end":9988460,"line_start":8,"line_end":8,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9988461,"byte_end":9988484,"line_start":9,"line_end":9,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9988485,"byte_end":9988510,"line_start":10,"line_end":10,"column_start":1,"column_end":26}},{"value":"/   0_i8, -1, 2, -3, 4, -5, 6, -7, -8, 9, -10, 11, -12, 13, -14, -128,","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9988511,"byte_end":9988583,"line_start":11,"line_end":11,"column_start":1,"column_end":73}},{"value":"/ ]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9988584,"byte_end":9988591,"line_start":12,"line_end":12,"column_start":1,"column_end":8}},{"value":"/ let c: [i8; 16] = abs_i8_m128i(a).into();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9988592,"byte_end":9988637,"line_start":13,"line_end":13,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(c, [0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, -128]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9988638,"byte_end":9988717,"line_start":14,"line_end":14,"column_start":1,"column_end":80}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9988718,"byte_end":9988725,"line_start":15,"line_end":15,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9988726,"byte_end":9988737,"line_start":16,"line_end":16,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9988738,"byte_end":9988755,"line_start":17,"line_end":17,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":894},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9989323,"byte_end":9989336,"line_start":35,"line_end":35,"column_start":8,"column_end":21},"name":"abs_i16_m128i","qualname":"::x86_x64::ssse3::abs_i16_m128i","value":"fn abs_i16_m128i(m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise absolute value with lanes as `i16`.","sig":null,"attributes":[{"value":"/ Lanewise absolute value with lanes as `i16`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9988895,"byte_end":9988943,"line_start":23,"line_end":23,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9988944,"byte_end":9988947,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ This is a \"wrapping\" absolute value, so `i16::MIN` stays as `i16::MIN`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9988948,"byte_end":9989023,"line_start":25,"line_end":25,"column_start":1,"column_end":76}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9989024,"byte_end":9989031,"line_start":26,"line_end":26,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9989032,"byte_end":9989055,"line_start":27,"line_end":27,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0_i16, 1, 2, 3, 4, 5, 6, i16::MIN]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9989056,"byte_end":9989117,"line_start":28,"line_end":28,"column_start":1,"column_end":62}},{"value":"/ let c: [i16; 8] = abs_i16_m128i(a).into();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9989118,"byte_end":9989164,"line_start":29,"line_end":29,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [0_i16, 1, 2, 3, 4, 5, 6, i16::MIN]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9989165,"byte_end":9989220,"line_start":30,"line_end":30,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9989221,"byte_end":9989228,"line_start":31,"line_end":31,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9989229,"byte_end":9989240,"line_start":32,"line_end":32,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9989241,"byte_end":9989258,"line_start":33,"line_end":33,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":895},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9989797,"byte_end":9989810,"line_start":51,"line_end":51,"column_start":8,"column_end":21},"name":"abs_i32_m128i","qualname":"::x86_x64::ssse3::abs_i32_m128i","value":"fn abs_i32_m128i(m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise absolute value with lanes as `i32`.","sig":null,"attributes":[{"value":"/ Lanewise absolute value with lanes as `i32`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9989400,"byte_end":9989448,"line_start":39,"line_end":39,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9989449,"byte_end":9989452,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ This is a \"wrapping\" absolute value, so `i32::MIN` stays as `i32::MIN`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9989453,"byte_end":9989528,"line_start":41,"line_end":41,"column_start":1,"column_end":76}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9989529,"byte_end":9989536,"line_start":42,"line_end":42,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9989537,"byte_end":9989560,"line_start":43,"line_end":43,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0, -1, 2, i32::MIN]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9989561,"byte_end":9989607,"line_start":44,"line_end":44,"column_start":1,"column_end":47}},{"value":"/ let c: [i32; 4] = abs_i32_m128i(a).into();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9989608,"byte_end":9989654,"line_start":45,"line_end":45,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [0, 1, 2, i32::MIN]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9989655,"byte_end":9989694,"line_start":46,"line_end":46,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9989695,"byte_end":9989702,"line_start":47,"line_end":47,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9989703,"byte_end":9989714,"line_start":48,"line_end":48,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9989715,"byte_end":9989732,"line_start":49,"line_end":49,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":897},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9991666,"byte_end":9991690,"line_start":102,"line_end":102,"column_start":8,"column_end":32},"name":"add_horizontal_i16_m128i","qualname":"::x86_x64::ssse3::add_horizontal_i16_m128i","value":"fn add_horizontal_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Add horizontal pairs of `i16` values, pack the outputs as `a` then `b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);\n let c: [i16; 8] = add_horizontal_i16_m128i(a, b).into();\n assert_eq!(c, [3, 7, -3, -7, 11, 15, -41, 11]);\n ```\n","sig":null,"attributes":[{"value":"/ Add horizontal pairs of `i16` values, pack the outputs as `a` then `b`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9991222,"byte_end":9991297,"line_start":91,"line_end":91,"column_start":1,"column_end":76}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9991298,"byte_end":9991305,"line_start":92,"line_end":92,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9991306,"byte_end":9991329,"line_start":93,"line_end":93,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9991330,"byte_end":9991388,"line_start":94,"line_end":94,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9991389,"byte_end":9991450,"line_start":95,"line_end":95,"column_start":1,"column_end":62}},{"value":"/ let c: [i16; 8] = add_horizontal_i16_m128i(a, b).into();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9991451,"byte_end":9991511,"line_start":96,"line_end":96,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(c, [3, 7, -3, -7, 11, 15, -41, 11]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9991512,"byte_end":9991563,"line_start":97,"line_end":97,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9991564,"byte_end":9991571,"line_start":98,"line_end":98,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9991572,"byte_end":9991583,"line_start":99,"line_end":99,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9991584,"byte_end":9991601,"line_start":100,"line_end":100,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":898},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9992154,"byte_end":9992178,"line_start":117,"line_end":117,"column_start":8,"column_end":32},"name":"add_horizontal_i32_m128i","qualname":"::x86_x64::ssse3::add_horizontal_i32_m128i","value":"fn add_horizontal_i32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Add horizontal pairs of `i32` values, pack the outputs as `a` then `b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let b = m128i::from([5, 6, 7, 8]);\n let c: [i32; 4] = add_horizontal_i32_m128i(a, b).into();\n assert_eq!(c, [3, 7, 11, 15]);\n ```\n","sig":null,"attributes":[{"value":"/ Add horizontal pairs of `i32` values, pack the outputs as `a` then `b`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9991770,"byte_end":9991845,"line_start":106,"line_end":106,"column_start":1,"column_end":76}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9991846,"byte_end":9991853,"line_start":107,"line_end":107,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9991854,"byte_end":9991877,"line_start":108,"line_end":108,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9991878,"byte_end":9991916,"line_start":109,"line_end":109,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([5, 6, 7, 8]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9991917,"byte_end":9991955,"line_start":110,"line_end":110,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = add_horizontal_i32_m128i(a, b).into();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9991956,"byte_end":9992016,"line_start":111,"line_end":111,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(c, [3, 7, 11, 15]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9992017,"byte_end":9992051,"line_start":112,"line_end":112,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9992052,"byte_end":9992059,"line_start":113,"line_end":113,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9992060,"byte_end":9992071,"line_start":114,"line_end":114,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9992072,"byte_end":9992089,"line_start":115,"line_end":115,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":899},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9992746,"byte_end":9992781,"line_start":133,"line_end":133,"column_start":8,"column_end":43},"name":"add_horizontal_saturating_i16_m128i","qualname":"::x86_x64::ssse3::add_horizontal_saturating_i16_m128i","value":"fn add_horizontal_saturating_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Add horizontal pairs of `i16` values, saturating, pack the outputs as `a`\n then `b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([i16::MAX, i16::MAX, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);\n let c: [i16; 8] = add_horizontal_saturating_i16_m128i(a, b).into();\n assert_eq!(c, [i16::MAX, 7, -3, -7, 11, 15, -41, 11]);\n ```\n","sig":null,"attributes":[{"value":"/ Add horizontal pairs of `i16` values, saturating, pack the outputs as `a`","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9992258,"byte_end":9992335,"line_start":121,"line_end":121,"column_start":1,"column_end":78}},{"value":"/ then `b`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9992336,"byte_end":9992349,"line_start":122,"line_end":122,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9992350,"byte_end":9992357,"line_start":123,"line_end":123,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9992358,"byte_end":9992381,"line_start":124,"line_end":124,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([i16::MAX, i16::MAX, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9992382,"byte_end":9992450,"line_start":125,"line_end":125,"column_start":1,"column_end":69}},{"value":"/ let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9992451,"byte_end":9992512,"line_start":126,"line_end":126,"column_start":1,"column_end":62}},{"value":"/ let c: [i16; 8] = add_horizontal_saturating_i16_m128i(a, b).into();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9992513,"byte_end":9992584,"line_start":127,"line_end":127,"column_start":1,"column_end":72}},{"value":"/ assert_eq!(c, [i16::MAX, 7, -3, -7, 11, 15, -41, 11]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9992585,"byte_end":9992643,"line_start":128,"line_end":128,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9992644,"byte_end":9992651,"line_start":129,"line_end":129,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9992652,"byte_end":9992663,"line_start":130,"line_end":130,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9992664,"byte_end":9992681,"line_start":131,"line_end":131,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":900},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9993327,"byte_end":9993351,"line_start":148,"line_end":148,"column_start":8,"column_end":32},"name":"sub_horizontal_i16_m128i","qualname":"::x86_x64::ssse3::sub_horizontal_i16_m128i","value":"fn sub_horizontal_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Subtract horizontal pairs of `i16` values, pack the outputs as `a` then `b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 29, 3, 64, -18, -23, -73, -14]);\n let b = m128i::from([50_i16, 76, 72, 89, -15, -26, -37, 48]);\n let c: [i16; 8] = sub_horizontal_i16_m128i(a, b).into();\n assert_eq!(c, [-28, -61, 5, -59, -26, -17, 11, -85]);\n ```\n","sig":null,"attributes":[{"value":"/ Subtract horizontal pairs of `i16` values, pack the outputs as `a` then `b`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9992862,"byte_end":9992942,"line_start":137,"line_end":137,"column_start":1,"column_end":81}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9992943,"byte_end":9992950,"line_start":138,"line_end":138,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9992951,"byte_end":9992974,"line_start":139,"line_end":139,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 29, 3, 64, -18, -23, -73, -14]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9992975,"byte_end":9993039,"line_start":140,"line_end":140,"column_start":1,"column_end":65}},{"value":"/ let b = m128i::from([50_i16, 76, 72, 89, -15, -26, -37, 48]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9993040,"byte_end":9993105,"line_start":141,"line_end":141,"column_start":1,"column_end":66}},{"value":"/ let c: [i16; 8] = sub_horizontal_i16_m128i(a, b).into();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9993106,"byte_end":9993166,"line_start":142,"line_end":142,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(c, [-28, -61, 5, -59, -26, -17, 11, -85]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9993167,"byte_end":9993224,"line_start":143,"line_end":143,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9993225,"byte_end":9993232,"line_start":144,"line_end":144,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9993233,"byte_end":9993244,"line_start":145,"line_end":145,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9993245,"byte_end":9993262,"line_start":146,"line_end":146,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":901},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9993830,"byte_end":9993854,"line_start":163,"line_end":163,"column_start":8,"column_end":32},"name":"sub_horizontal_i32_m128i","qualname":"::x86_x64::ssse3::sub_horizontal_i32_m128i","value":"fn sub_horizontal_i32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Subtract horizontal pairs of `i32` values, pack the outputs as `a` then `b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 29, 3, 42]);\n let b = m128i::from([5, 96, 7, 84]);\n let c: [i32; 4] = sub_horizontal_i32_m128i(a, b).into();\n assert_eq!(c, [-28, -39, -91, -77]);\n ```\n","sig":null,"attributes":[{"value":"/ Subtract horizontal pairs of `i32` values, pack the outputs as `a` then `b`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9993431,"byte_end":9993511,"line_start":152,"line_end":152,"column_start":1,"column_end":81}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9993512,"byte_end":9993519,"line_start":153,"line_end":153,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9993520,"byte_end":9993543,"line_start":154,"line_end":154,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 29, 3, 42]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9993544,"byte_end":9993584,"line_start":155,"line_end":155,"column_start":1,"column_end":41}},{"value":"/ let b = m128i::from([5, 96, 7, 84]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9993585,"byte_end":9993625,"line_start":156,"line_end":156,"column_start":1,"column_end":41}},{"value":"/ let c: [i32; 4] = sub_horizontal_i32_m128i(a, b).into();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9993626,"byte_end":9993686,"line_start":157,"line_end":157,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(c, [-28, -39, -91, -77]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9993687,"byte_end":9993727,"line_start":158,"line_end":158,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9993728,"byte_end":9993735,"line_start":159,"line_end":159,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9993736,"byte_end":9993747,"line_start":160,"line_end":160,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9993748,"byte_end":9993765,"line_start":161,"line_end":161,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":902},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9994443,"byte_end":9994478,"line_start":179,"line_end":179,"column_start":8,"column_end":43},"name":"sub_horizontal_saturating_i16_m128i","qualname":"::x86_x64::ssse3::sub_horizontal_saturating_i16_m128i","value":"fn sub_horizontal_saturating_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Subtract horizontal pairs of `i16` values, saturating, pack the outputs as\n `a` then `b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([i16::MIN, 1, 3, 49, -1, -27, -3, -412]);\n let b = m128i::from([5_i16, 699, 7, 877, -15, -2664, -37, 4008]);\n let c: [i16; 8] = sub_horizontal_saturating_i16_m128i(a, b).into();\n assert_eq!(c, [i16::MIN, -46, 26, 409, -694, -870, 2649, -4045]);\n ```\n","sig":null,"attributes":[{"value":"/ Subtract horizontal pairs of `i16` values, saturating, pack the outputs as","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9993934,"byte_end":9994012,"line_start":167,"line_end":167,"column_start":1,"column_end":79}},{"value":"/ `a` then `b`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9994013,"byte_end":9994030,"line_start":168,"line_end":168,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9994031,"byte_end":9994038,"line_start":169,"line_end":169,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9994039,"byte_end":9994062,"line_start":170,"line_end":170,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([i16::MIN, 1, 3, 49, -1, -27, -3, -412]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9994063,"byte_end":9994128,"line_start":171,"line_end":171,"column_start":1,"column_end":66}},{"value":"/ let b = m128i::from([5_i16, 699, 7, 877, -15, -2664, -37, 4008]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9994129,"byte_end":9994198,"line_start":172,"line_end":172,"column_start":1,"column_end":70}},{"value":"/ let c: [i16; 8] = sub_horizontal_saturating_i16_m128i(a, b).into();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9994199,"byte_end":9994270,"line_start":173,"line_end":173,"column_start":1,"column_end":72}},{"value":"/ assert_eq!(c, [i16::MIN, -46, 26, 409, -694, -870, 2649, -4045]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9994271,"byte_end":9994340,"line_start":174,"line_end":174,"column_start":1,"column_end":70}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9994341,"byte_end":9994348,"line_start":175,"line_end":175,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9994349,"byte_end":9994360,"line_start":176,"line_end":176,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9994361,"byte_end":9994378,"line_start":177,"line_end":177,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":903},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9995290,"byte_end":9995330,"line_start":203,"line_end":203,"column_start":8,"column_end":48},"name":"mul_u8i8_add_horizontal_saturating_m128i","qualname":"::x86_x64::ssse3::mul_u8i8_add_horizontal_saturating_m128i","value":"fn mul_u8i8_add_horizontal_saturating_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" This is dumb and weird.","sig":null,"attributes":[{"value":"/ This is dumb and weird.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9994559,"byte_end":9994586,"line_start":183,"line_end":183,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9994587,"byte_end":9994590,"line_start":184,"line_end":184,"column_start":1,"column_end":4}},{"value":"/ * Vertically multiplies each `u8` lane from `a` with an `i8` lane from `b`,","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9994591,"byte_end":9994670,"line_start":185,"line_end":185,"column_start":1,"column_end":80}},{"value":"/   producing an `i16` intermediate value.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9994671,"byte_end":9994715,"line_start":186,"line_end":186,"column_start":1,"column_end":45}},{"value":"/ * These intermediate `i16` values are horizontally added with saturation.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9994716,"byte_end":9994793,"line_start":187,"line_end":187,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9994794,"byte_end":9994797,"line_start":188,"line_end":188,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9994798,"byte_end":9994805,"line_start":189,"line_end":189,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9994806,"byte_end":9994829,"line_start":190,"line_end":190,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9994830,"byte_end":9994855,"line_start":191,"line_end":191,"column_start":1,"column_end":26}},{"value":"/   255_u8, 255, 0, 0, 255, 255, 1, 1, 8, 9, 10, 11, 12, 13, 14, 15,","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9994856,"byte_end":9994926,"line_start":192,"line_end":192,"column_start":1,"column_end":71}},{"value":"/ ]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9994927,"byte_end":9994934,"line_start":193,"line_end":193,"column_start":1,"column_end":8}},{"value":"/ let b = m128i::from([","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9994935,"byte_end":9994960,"line_start":194,"line_end":194,"column_start":1,"column_end":26}},{"value":"/   127_i8, 127, 0, 0, -127, -127, 1, 1, 24, 25, 26, 27, 28, 29, 30, 31,","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9994961,"byte_end":9995035,"line_start":195,"line_end":195,"column_start":1,"column_end":75}},{"value":"/ ]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9995036,"byte_end":9995043,"line_start":196,"line_end":196,"column_start":1,"column_end":8}},{"value":"/ let c: [i16; 8] = mul_u8i8_add_horizontal_saturating_m128i(a, b).into();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9995044,"byte_end":9995120,"line_start":197,"line_end":197,"column_start":1,"column_end":77}},{"value":"/ assert_eq!(c, [i16::MAX, 0, i16::MIN, 2, 417, 557, 713, 885]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9995121,"byte_end":9995187,"line_start":198,"line_end":198,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9995188,"byte_end":9995195,"line_start":199,"line_end":199,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9995196,"byte_end":9995207,"line_start":200,"line_end":200,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9995208,"byte_end":9995225,"line_start":201,"line_end":201,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":904},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9996044,"byte_end":9996069,"line_start":222,"line_end":222,"column_start":8,"column_end":33},"name":"mul_i16_scale_round_m128i","qualname":"::x86_x64::ssse3::mul_i16_scale_round_m128i","value":"fn mul_i16_scale_round_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Multiply `i16` lanes into `i32` intermediates, keep the high 18 bits, round\n by adding 1, right shift by 1.","sig":null,"attributes":[{"value":"/ Multiply `i16` lanes into `i32` intermediates, keep the high 18 bits, round","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9995413,"byte_end":9995492,"line_start":207,"line_end":207,"column_start":1,"column_end":80}},{"value":"/ by adding 1, right shift by 1.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9995493,"byte_end":9995527,"line_start":208,"line_end":208,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9995528,"byte_end":9995531,"line_start":209,"line_end":209,"column_start":1,"column_end":4}},{"value":"/ This is `_mm_mulhrs_epi16`, which I can only assume is named for something","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9995532,"byte_end":9995610,"line_start":210,"line_end":210,"column_start":1,"column_end":79}},{"value":"/ like \"high bits rounded and scaled\".","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9995611,"byte_end":9995651,"line_start":211,"line_end":211,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9995652,"byte_end":9995659,"line_start":212,"line_end":212,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9995660,"byte_end":9995683,"line_start":213,"line_end":213,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0_i16, 100, 200, 300, 400, 500, 600, 700]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9995684,"byte_end":9995752,"line_start":214,"line_end":214,"column_start":1,"column_end":69}},{"value":"/ let b = m128i::from([800_i16, 900, 1000, 1100, 1200, 1300, 1400, 1500]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9995753,"byte_end":9995829,"line_start":215,"line_end":215,"column_start":1,"column_end":77}},{"value":"/ let c: [i16; 8] = mul_i16_scale_round_m128i(a, b).into();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9995830,"byte_end":9995891,"line_start":216,"line_end":216,"column_start":1,"column_end":62}},{"value":"/ assert_eq!(c, [0, 3, 6, 10, 15, 20, 26, 32]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9995892,"byte_end":9995941,"line_start":217,"line_end":217,"column_start":1,"column_end":50}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9995942,"byte_end":9995949,"line_start":218,"line_end":218,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9995950,"byte_end":9995961,"line_start":219,"line_end":219,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9995962,"byte_end":9995979,"line_start":220,"line_end":220,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":905},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9996806,"byte_end":9996830,"line_start":243,"line_end":243,"column_start":8,"column_end":32},"name":"shuffle_av_i8z_all_m128i","qualname":"::x86_x64::ssse3::shuffle_av_i8z_all_m128i","value":"fn shuffle_av_i8z_all_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shuffle `i8` lanes in `a` using `i8` values in `v`.","sig":null,"attributes":[{"value":"/ Shuffle `i8` lanes in `a` using `i8` values in `v`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9996151,"byte_end":9996206,"line_start":226,"line_end":226,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9996207,"byte_end":9996210,"line_start":227,"line_end":227,"column_start":1,"column_end":4}},{"value":"/ If a lane in `v` is negative, that output is zeroed.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9996211,"byte_end":9996267,"line_start":228,"line_end":228,"column_start":1,"column_end":57}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9996268,"byte_end":9996275,"line_start":229,"line_end":229,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9996276,"byte_end":9996299,"line_start":230,"line_end":230,"column_start":1,"column_end":24}},{"value":"/ let a =","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9996300,"byte_end":9996311,"line_start":231,"line_end":231,"column_start":1,"column_end":12}},{"value":"/   m128i::from([70_i8, 1, 2, 3, 4, 5, 6, 7, 8, 99, 100, 11, 12, 13, 14, 55]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9996312,"byte_end":9996392,"line_start":232,"line_end":232,"column_start":1,"column_end":81}},{"value":"/ let v =","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9996393,"byte_end":9996404,"line_start":233,"line_end":233,"column_start":1,"column_end":12}},{"value":"/   m128i::from([-1_i8, 5, 4, 1, 3, 0, 9, 10, 2, 14, 6, 7, 15, 12, 13, 8]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9996405,"byte_end":9996482,"line_start":234,"line_end":234,"column_start":1,"column_end":78}},{"value":"/ let c: [i8; 16] = shuffle_av_i8z_all_m128i(a, v).into();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9996483,"byte_end":9996543,"line_start":235,"line_end":235,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(c, [0_i8, 5, 4, 1, 3, 70, 99, 100, 2, 14, 6, 7, 55, 12, 13, 8]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9996544,"byte_end":9996623,"line_start":236,"line_end":236,"column_start":1,"column_end":80}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9996624,"byte_end":9996631,"line_start":237,"line_end":237,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_shuffle_epi8`]","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9996632,"byte_end":9996673,"line_start":238,"line_end":238,"column_start":1,"column_end":42}},{"value":"/ * **Assembly:** `pshufb xmm, xmm`","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9996674,"byte_end":9996711,"line_start":239,"line_end":239,"column_start":1,"column_end":38}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9996712,"byte_end":9996723,"line_start":240,"line_end":240,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9996724,"byte_end":9996741,"line_start":241,"line_end":241,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":906},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9997567,"byte_end":9997586,"line_start":263,"line_end":263,"column_start":8,"column_end":27},"name":"sign_apply_i8_m128i","qualname":"::x86_x64::ssse3::sign_apply_i8_m128i","value":"fn sign_apply_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Applies the sign of `i8` values in `b` to the values in `a`.","sig":null,"attributes":[{"value":"/ Applies the sign of `i8` values in `b` to the values in `a`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9996912,"byte_end":9996976,"line_start":247,"line_end":247,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9996977,"byte_end":9996980,"line_start":248,"line_end":248,"column_start":1,"column_end":4}},{"value":"/ * If `b` is negative: the `a` value is negated.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9996981,"byte_end":9997032,"line_start":249,"line_end":249,"column_start":1,"column_end":52}},{"value":"/ * Else If `b` is 0: the `a` value becomes 0.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9997033,"byte_end":9997081,"line_start":250,"line_end":250,"column_start":1,"column_end":49}},{"value":"/ * Else the `a` value is unchanged.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9997082,"byte_end":9997120,"line_start":251,"line_end":251,"column_start":1,"column_end":39}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9997121,"byte_end":9997128,"line_start":252,"line_end":252,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9997129,"byte_end":9997152,"line_start":253,"line_end":253,"column_start":1,"column_end":24}},{"value":"/ let a =","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9997153,"byte_end":9997164,"line_start":254,"line_end":254,"column_start":1,"column_end":12}},{"value":"/   m128i::from([0_i8, 1, -2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, -15]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9997165,"byte_end":9997244,"line_start":255,"line_end":255,"column_start":1,"column_end":80}},{"value":"/ let b = m128i::from([-1_i8, 1, 1, -1, -1, 1, 1, 1, 1, 0, 0, -1, -1, 0, 0, 1]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9997245,"byte_end":9997327,"line_start":256,"line_end":256,"column_start":1,"column_end":83}},{"value":"/ let c: [i8; 16] = sign_apply_i8_m128i(a, b).into();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9997328,"byte_end":9997383,"line_start":257,"line_end":257,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(c, [0_i8, 1, -2, -3, -4, 5, 6, 7, 8, 0, 0, -11, -12, 0, 0, -15]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9997384,"byte_end":9997464,"line_start":258,"line_end":258,"column_start":1,"column_end":81}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9997465,"byte_end":9997472,"line_start":259,"line_end":259,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9997473,"byte_end":9997484,"line_start":260,"line_end":260,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9997485,"byte_end":9997502,"line_start":261,"line_end":261,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":907},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9998229,"byte_end":9998249,"line_start":282,"line_end":282,"column_start":8,"column_end":28},"name":"sign_apply_i16_m128i","qualname":"::x86_x64::ssse3::sign_apply_i16_m128i","value":"fn sign_apply_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Applies the sign of `i16` values in `b` to the values in `a`.","sig":null,"attributes":[{"value":"/ Applies the sign of `i16` values in `b` to the values in `a`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9997665,"byte_end":9997730,"line_start":267,"line_end":267,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9997731,"byte_end":9997734,"line_start":268,"line_end":268,"column_start":1,"column_end":4}},{"value":"/ * If `b` is negative: the `a` value is negated.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9997735,"byte_end":9997786,"line_start":269,"line_end":269,"column_start":1,"column_end":52}},{"value":"/ * Else If `b` is 0: the `a` value becomes 0.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9997787,"byte_end":9997835,"line_start":270,"line_end":270,"column_start":1,"column_end":49}},{"value":"/ * Else the `a` value is unchanged.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9997836,"byte_end":9997874,"line_start":271,"line_end":271,"column_start":1,"column_end":39}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9997875,"byte_end":9997882,"line_start":272,"line_end":272,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9997883,"byte_end":9997906,"line_start":273,"line_end":273,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, -3, 4, 5, 6, 7, 8]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9997907,"byte_end":9997962,"line_start":274,"line_end":274,"column_start":1,"column_end":56}},{"value":"/ let b = m128i::from([5_i16, -6, 7, 0, 1, 1, 0, 1]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9997963,"byte_end":9998018,"line_start":275,"line_end":275,"column_start":1,"column_end":56}},{"value":"/ let c: [i16; 8] = sign_apply_i16_m128i(a, b).into();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9998019,"byte_end":9998075,"line_start":276,"line_end":276,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [1_i16, -2, -3, 0, 5, 6, 0, 8]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9998076,"byte_end":9998126,"line_start":277,"line_end":277,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9998127,"byte_end":9998134,"line_start":278,"line_end":278,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9998135,"byte_end":9998146,"line_start":279,"line_end":279,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9998147,"byte_end":9998164,"line_start":280,"line_end":280,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":908},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9998845,"byte_end":9998865,"line_start":301,"line_end":301,"column_start":8,"column_end":28},"name":"sign_apply_i32_m128i","qualname":"::x86_x64::ssse3::sign_apply_i32_m128i","value":"fn sign_apply_i32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Applies the sign of `i32` values in `b` to the values in `a`.","sig":null,"attributes":[{"value":"/ Applies the sign of `i32` values in `b` to the values in `a`.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9998329,"byte_end":9998394,"line_start":286,"line_end":286,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9998395,"byte_end":9998398,"line_start":287,"line_end":287,"column_start":1,"column_end":4}},{"value":"/ * If `b` is negative: the `a` value is negated.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9998399,"byte_end":9998450,"line_start":288,"line_end":288,"column_start":1,"column_end":52}},{"value":"/ * Else If `b` is 0: the `a` value becomes 0.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9998451,"byte_end":9998499,"line_start":289,"line_end":289,"column_start":1,"column_end":49}},{"value":"/ * Else the `a` value is unchanged.","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9998500,"byte_end":9998538,"line_start":290,"line_end":290,"column_start":1,"column_end":39}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9998539,"byte_end":9998546,"line_start":291,"line_end":291,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9998547,"byte_end":9998570,"line_start":292,"line_end":292,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, -3, 4]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9998571,"byte_end":9998610,"line_start":293,"line_end":293,"column_start":1,"column_end":40}},{"value":"/ let b = m128i::from([5, -6, 7, 0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9998611,"byte_end":9998650,"line_start":294,"line_end":294,"column_start":1,"column_end":40}},{"value":"/ let c: [i32; 4] = sign_apply_i32_m128i(a, b).into();","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9998651,"byte_end":9998707,"line_start":295,"line_end":295,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [1, -2, -3, 0]);","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9998708,"byte_end":9998742,"line_start":296,"line_end":296,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9998743,"byte_end":9998750,"line_start":297,"line_end":297,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9998751,"byte_end":9998762,"line_start":298,"line_end":298,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/ssse3.rs","byte_start":9998763,"byte_end":9998780,"line_start":299,"line_end":299,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":87},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":10563,"byte_end":10585,"line_start":238,"line_end":238,"column_start":10,"column_end":32},"name":"read_timestamp_counter","qualname":"::x86_x64::read_timestamp_counter","value":"fn read_timestamp_counter() -> u64","parent":null,"children":[],"decl_id":null,"docs":" Reads the CPU's timestamp counter value.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":88},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":11430,"byte_end":11454,"line_start":258,"line_end":258,"column_start":10,"column_end":34},"name":"read_timestamp_counter_p","qualname":"::x86_x64::read_timestamp_counter_p","value":"fn read_timestamp_counter_p(&mut u32) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Reads the CPU's timestamp counter value and store the processor signature.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":89},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":11745,"byte_end":11758,"line_start":270,"line_end":270,"column_start":10,"column_end":23},"name":"byte_swap_i32","qualname":"::x86_x64::byte_swap_i32","value":"fn byte_swap_i32(i32) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Swap the bytes of the given 32-bit value.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":90},"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":12089,"byte_end":12102,"line_start":283,"line_end":283,"column_start":10,"column_end":23},"name":"byte_swap_i64","qualname":"::x86_x64::byte_swap_i64","value":"fn byte_swap_i64(i64) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Swap the bytes of the given 64-bit value.","sig":null,"attributes":[{"value":"cfg(target_arch = \"x86_64\")","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":12051,"byte_end":12079,"line_start":282,"line_end":282,"column_start":3,"column_end":31}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9789130,"byte_end":9789134,"line_start":19,"line_end":19,"column_start":36,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9789197,"byte_end":9789201,"line_start":21,"line_end":21,"column_start":31,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9789287,"byte_end":9789291,"line_start":23,"line_end":23,"column_start":54,"column_end":58},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9789437,"byte_end":9789441,"line_start":31,"line_end":31,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":101},{"krate":0,"index":103},{"krate":0,"index":105},{"krate":0,"index":107}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9790459,"byte_end":9790463,"line_start":72,"line_end":72,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":110}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9790558,"byte_end":9790562,"line_start":79,"line_end":79,"column_start":15,"column_end":19},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9790584,"byte_end":9790588,"line_start":81,"line_end":81,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":113}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9790716,"byte_end":9790720,"line_start":89,"line_end":89,"column_start":25,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":116}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9791318,"byte_end":9791322,"line_start":113,"line_end":113,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":122}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9791784,"byte_end":9791788,"line_start":132,"line_end":132,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":124}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9792277,"byte_end":9792281,"line_start":151,"line_end":151,"column_start":17,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":126}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9792778,"byte_end":9792782,"line_start":170,"line_end":170,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":128}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9793243,"byte_end":9793247,"line_start":189,"line_end":189,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":130}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9793708,"byte_end":9793712,"line_start":208,"line_end":208,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":132}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9794213,"byte_end":9794217,"line_start":227,"line_end":227,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":134}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9794715,"byte_end":9794719,"line_start":246,"line_end":246,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":136}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9796127,"byte_end":9796132,"line_start":19,"line_end":19,"column_start":36,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9796195,"byte_end":9796200,"line_start":21,"line_end":21,"column_start":31,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9796287,"byte_end":9796292,"line_start":23,"line_end":23,"column_start":55,"column_end":60},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9796441,"byte_end":9796446,"line_start":31,"line_end":31,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":147},{"krate":0,"index":149},{"krate":0,"index":151},{"krate":0,"index":153}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9797461,"byte_end":9797466,"line_start":72,"line_end":72,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":156}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9797561,"byte_end":9797566,"line_start":79,"line_end":79,"column_start":15,"column_end":20},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9797588,"byte_end":9797593,"line_start":81,"line_end":81,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":159}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9797721,"byte_end":9797726,"line_start":89,"line_end":89,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":162}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9798326,"byte_end":9798331,"line_start":113,"line_end":113,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":168}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9798746,"byte_end":9798751,"line_start":130,"line_end":130,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":170}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9799197,"byte_end":9799202,"line_start":147,"line_end":147,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":172}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9799664,"byte_end":9799669,"line_start":164,"line_end":164,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":174}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9800084,"byte_end":9800089,"line_start":181,"line_end":181,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":176}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9800504,"byte_end":9800509,"line_start":198,"line_end":198,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":178}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9800977,"byte_end":9800982,"line_start":215,"line_end":215,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":180}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9801447,"byte_end":9801452,"line_start":232,"line_end":232,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":182}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9802965,"byte_end":9802970,"line_start":22,"line_end":22,"column_start":36,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9803033,"byte_end":9803038,"line_start":24,"line_end":24,"column_start":31,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9803125,"byte_end":9803130,"line_start":26,"line_end":26,"column_start":55,"column_end":60},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9803289,"byte_end":9803294,"line_start":34,"line_end":34,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":193}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9803389,"byte_end":9803394,"line_start":41,"line_end":41,"column_start":15,"column_end":20},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9803416,"byte_end":9803421,"line_start":43,"line_end":43,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":196}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9803559,"byte_end":9803564,"line_start":53,"line_end":53,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":199}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9803850,"byte_end":9803855,"line_start":69,"line_end":69,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":206}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9804152,"byte_end":9804157,"line_start":87,"line_end":87,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":213}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9804443,"byte_end":9804448,"line_start":103,"line_end":103,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":220}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9804745,"byte_end":9804750,"line_start":121,"line_end":121,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":227}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9805036,"byte_end":9805041,"line_start":137,"line_end":137,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":234}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9805338,"byte_end":9805343,"line_start":155,"line_end":155,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":241}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9805629,"byte_end":9805634,"line_start":171,"line_end":171,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":248}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9805928,"byte_end":9805933,"line_start":189,"line_end":189,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":254}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9806203,"byte_end":9806208,"line_start":205,"line_end":205,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":258}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9806543,"byte_end":9806548,"line_start":225,"line_end":225,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":262}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9807009,"byte_end":9807014,"line_start":244,"line_end":244,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":265}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9807508,"byte_end":9807513,"line_start":263,"line_end":263,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":268}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9807967,"byte_end":9807972,"line_start":282,"line_end":282,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":271}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9808438,"byte_end":9808443,"line_start":301,"line_end":301,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":274}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9808909,"byte_end":9808914,"line_start":320,"line_end":320,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":277}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9809372,"byte_end":9809377,"line_start":339,"line_end":339,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":280}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9809832,"byte_end":9809837,"line_start":358,"line_end":358,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":283}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9811312,"byte_end":9811316,"line_start":19,"line_end":19,"column_start":36,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9811379,"byte_end":9811383,"line_start":21,"line_end":21,"column_start":31,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9811469,"byte_end":9811473,"line_start":23,"line_end":23,"column_start":54,"column_end":58},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9811619,"byte_end":9811623,"line_start":31,"line_end":31,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":295},{"krate":0,"index":297},{"krate":0,"index":299},{"krate":0,"index":301}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9812637,"byte_end":9812641,"line_start":70,"line_end":70,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":304}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9812736,"byte_end":9812740,"line_start":77,"line_end":77,"column_start":15,"column_end":19},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9812762,"byte_end":9812766,"line_start":79,"line_end":79,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":307}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9812894,"byte_end":9812898,"line_start":87,"line_end":87,"column_start":25,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":310}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9813496,"byte_end":9813500,"line_start":111,"line_end":111,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":316}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9813982,"byte_end":9813986,"line_start":130,"line_end":130,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":318}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9814487,"byte_end":9814491,"line_start":149,"line_end":149,"column_start":17,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":320}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9815000,"byte_end":9815004,"line_start":168,"line_end":168,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":322}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9815485,"byte_end":9815489,"line_start":187,"line_end":187,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":324}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9815970,"byte_end":9815974,"line_start":206,"line_end":206,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":326}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9816487,"byte_end":9816491,"line_start":225,"line_end":225,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":328}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9817001,"byte_end":9817005,"line_start":244,"line_end":244,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":330}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9818424,"byte_end":9818429,"line_start":19,"line_end":19,"column_start":36,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9818492,"byte_end":9818497,"line_start":21,"line_end":21,"column_start":31,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9818584,"byte_end":9818589,"line_start":23,"line_end":23,"column_start":55,"column_end":60},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Inherent","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9818738,"byte_end":9818743,"line_start":31,"line_end":31,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":341},{"krate":0,"index":343},{"krate":0,"index":345},{"krate":0,"index":347}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9819758,"byte_end":9819763,"line_start":72,"line_end":72,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":350}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9819858,"byte_end":9819863,"line_start":79,"line_end":79,"column_start":15,"column_end":20},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9819885,"byte_end":9819890,"line_start":81,"line_end":81,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":353}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9820018,"byte_end":9820023,"line_start":89,"line_end":89,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":356}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9820623,"byte_end":9820628,"line_start":113,"line_end":113,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":362}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9821043,"byte_end":9821048,"line_start":130,"line_end":130,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":364}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9821494,"byte_end":9821499,"line_start":147,"line_end":147,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":366}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9821961,"byte_end":9821966,"line_start":164,"line_end":164,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":368}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9822381,"byte_end":9822386,"line_start":181,"line_end":181,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":370}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9822801,"byte_end":9822806,"line_start":198,"line_end":198,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":372}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9823274,"byte_end":9823279,"line_start":215,"line_end":215,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":374}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9823744,"byte_end":9823749,"line_start":232,"line_end":232,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":376}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9825262,"byte_end":9825267,"line_start":22,"line_end":22,"column_start":36,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9825330,"byte_end":9825335,"line_start":24,"line_end":24,"column_start":31,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9825422,"byte_end":9825427,"line_start":26,"line_end":26,"column_start":55,"column_end":60},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9825586,"byte_end":9825591,"line_start":34,"line_end":34,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":387}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9825686,"byte_end":9825691,"line_start":41,"line_end":41,"column_start":15,"column_end":20},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9825713,"byte_end":9825718,"line_start":43,"line_end":43,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":390}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9825856,"byte_end":9825861,"line_start":53,"line_end":53,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":393}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9826147,"byte_end":9826152,"line_start":69,"line_end":69,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":400}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9826450,"byte_end":9826455,"line_start":87,"line_end":87,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":407}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9826744,"byte_end":9826749,"line_start":103,"line_end":103,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":414}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9827048,"byte_end":9827053,"line_start":121,"line_end":121,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":421}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9827339,"byte_end":9827344,"line_start":137,"line_end":137,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":428}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9827641,"byte_end":9827646,"line_start":155,"line_end":155,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":435}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9827932,"byte_end":9827937,"line_start":171,"line_end":171,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":442}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9828236,"byte_end":9828241,"line_start":189,"line_end":189,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":449}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9828526,"byte_end":9828531,"line_start":205,"line_end":205,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":456}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9828876,"byte_end":9828881,"line_start":225,"line_end":225,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":462}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9829354,"byte_end":9829359,"line_start":244,"line_end":244,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":465}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9829865,"byte_end":9829870,"line_start":263,"line_end":263,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":468}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9830336,"byte_end":9830341,"line_start":282,"line_end":282,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":471}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9830827,"byte_end":9830832,"line_start":301,"line_end":301,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":474}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9831318,"byte_end":9831323,"line_start":320,"line_end":320,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":477}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9831793,"byte_end":9831798,"line_start":339,"line_end":339,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":480}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9832265,"byte_end":9832270,"line_start":358,"line_end":358,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":483}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9872344,"byte_end":9872348,"line_start":1307,"line_end":1307,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":570},{"krate":0,"index":571}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9872492,"byte_end":9872496,"line_start":1315,"line_end":1315,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":573}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9872607,"byte_end":9872611,"line_start":1322,"line_end":1322,"column_start":17,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":575},{"krate":0,"index":576}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9872764,"byte_end":9872768,"line_start":1330,"line_end":1330,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":578}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9872881,"byte_end":9872885,"line_start":1337,"line_end":1337,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":580},{"krate":0,"index":581}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9873035,"byte_end":9873039,"line_start":1345,"line_end":1345,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":583}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9873152,"byte_end":9873156,"line_start":1352,"line_end":1352,"column_start":17,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":585},{"krate":0,"index":586}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9873309,"byte_end":9873313,"line_start":1360,"line_end":1360,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":588}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9873424,"byte_end":9873428,"line_start":1367,"line_end":1367,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":590},{"krate":0,"index":591}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9873572,"byte_end":9873576,"line_start":1375,"line_end":1375,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":593}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9873684,"byte_end":9873688,"line_start":1382,"line_end":1382,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":595},{"krate":0,"index":596}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9873832,"byte_end":9873836,"line_start":1390,"line_end":1390,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":598}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9873944,"byte_end":9873948,"line_start":1397,"line_end":1397,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":600},{"krate":0,"index":601}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9874086,"byte_end":9874090,"line_start":1406,"line_end":1406,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":603},{"krate":0,"index":604}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9874453,"byte_end":9874457,"line_start":1420,"line_end":1420,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":606},{"krate":0,"index":607}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9874601,"byte_end":9874605,"line_start":1428,"line_end":1428,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":609}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9874719,"byte_end":9874723,"line_start":1435,"line_end":1435,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":611}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9976067,"byte_end":9976072,"line_start":3301,"line_end":3301,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":812},{"krate":0,"index":813}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9976217,"byte_end":9976222,"line_start":3309,"line_end":3309,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":815}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9976333,"byte_end":9976338,"line_start":3316,"line_end":3316,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":817},{"krate":0,"index":818}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9976492,"byte_end":9976497,"line_start":3324,"line_end":3324,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":820}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9976610,"byte_end":9976615,"line_start":3331,"line_end":3331,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":822},{"krate":0,"index":823}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9976766,"byte_end":9976771,"line_start":3339,"line_end":3339,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":825}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9976884,"byte_end":9976889,"line_start":3346,"line_end":3346,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":827},{"krate":0,"index":828}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9977043,"byte_end":9977048,"line_start":3354,"line_end":3354,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":830}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9977159,"byte_end":9977164,"line_start":3361,"line_end":3361,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":832},{"krate":0,"index":833}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9977309,"byte_end":9977314,"line_start":3369,"line_end":3369,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":835}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9977422,"byte_end":9977427,"line_start":3376,"line_end":3376,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":837},{"krate":0,"index":838}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9977572,"byte_end":9977577,"line_start":3384,"line_end":3384,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":840}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9977685,"byte_end":9977690,"line_start":3391,"line_end":3391,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":842},{"krate":0,"index":843}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9977830,"byte_end":9977835,"line_start":3400,"line_end":3400,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":845},{"krate":0,"index":846}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9978199,"byte_end":9978204,"line_start":3414,"line_end":3414,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":848},{"krate":0,"index":849}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9978349,"byte_end":9978354,"line_start":3422,"line_end":3422,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":851}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9978468,"byte_end":9978473,"line_start":3429,"line_end":3429,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":853}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9978883,"byte_end":9978888,"line_start":3442,"line_end":3442,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":855},{"krate":0,"index":856}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9979042,"byte_end":9979047,"line_start":3450,"line_end":3450,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":858}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9979160,"byte_end":9979165,"line_start":3457,"line_end":3457,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":860},{"krate":0,"index":861}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9979316,"byte_end":9979321,"line_start":3465,"line_end":3465,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":863}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9979434,"byte_end":9979439,"line_start":3472,"line_end":3472,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":865},{"krate":0,"index":866}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9979593,"byte_end":9979598,"line_start":3480,"line_end":3480,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":868}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9979709,"byte_end":9979714,"line_start":3487,"line_end":3487,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":870},{"krate":0,"index":871}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9980066,"byte_end":9980071,"line_start":3501,"line_end":3501,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":873}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Direct","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9980421,"byte_end":9980426,"line_start":3512,"line_end":3512,"column_start":13,"column_end":18},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":7113,"byte_end":7131,"line_start":138,"line_end":138,"column_start":9,"column_end":27},"ref_id":{"krate":0,"index":82}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9789130,"byte_end":9789134,"line_start":19,"line_end":19,"column_start":36,"column_end":40},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":94},"to":{"krate":4,"index":165}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9789197,"byte_end":9789201,"line_start":21,"line_end":21,"column_start":31,"column_end":35},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":94},"to":{"krate":4,"index":268}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9789287,"byte_end":9789291,"line_start":23,"line_end":23,"column_start":54,"column_end":58},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":94},"to":{"krate":4,"index":390}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9789437,"byte_end":9789441,"line_start":31,"line_end":31,"column_start":6,"column_end":10},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":94},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9790459,"byte_end":9790463,"line_start":72,"line_end":72,"column_start":16,"column_end":20},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":2801}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9790558,"byte_end":9790562,"line_start":79,"line_end":79,"column_start":15,"column_end":19},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":3189}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9790584,"byte_end":9790588,"line_start":81,"line_end":81,"column_start":18,"column_end":22},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":3157}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9790716,"byte_end":9790720,"line_start":89,"line_end":89,"column_start":25,"column_end":29},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":3085}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9791318,"byte_end":9791322,"line_start":113,"line_end":113,"column_start":16,"column_end":20},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":10110}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9791784,"byte_end":9791788,"line_start":132,"line_end":132,"column_start":18,"column_end":22},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":10117}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9792277,"byte_end":9792281,"line_start":151,"line_end":151,"column_start":17,"column_end":21},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":10121}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9792778,"byte_end":9792782,"line_start":170,"line_end":170,"column_start":19,"column_end":23},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":10129}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9793243,"byte_end":9793247,"line_start":189,"line_end":189,"column_start":19,"column_end":23},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":10131}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9793708,"byte_end":9793712,"line_start":208,"line_end":208,"column_start":19,"column_end":23},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":10123}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9794213,"byte_end":9794217,"line_start":227,"line_end":227,"column_start":19,"column_end":23},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":10125}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":9794715,"byte_end":9794719,"line_start":246,"line_end":246,"column_start":16,"column_end":20},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":10119}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9796127,"byte_end":9796132,"line_start":19,"line_end":19,"column_start":36,"column_end":41},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":140},"to":{"krate":4,"index":165}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9796195,"byte_end":9796200,"line_start":21,"line_end":21,"column_start":31,"column_end":36},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":140},"to":{"krate":4,"index":268}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9796287,"byte_end":9796292,"line_start":23,"line_end":23,"column_start":55,"column_end":60},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":140},"to":{"krate":4,"index":390}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9796441,"byte_end":9796446,"line_start":31,"line_end":31,"column_start":6,"column_end":11},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":140},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9797461,"byte_end":9797466,"line_start":72,"line_end":72,"column_start":16,"column_end":21},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":2801}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9797561,"byte_end":9797566,"line_start":79,"line_end":79,"column_start":15,"column_end":20},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":3189}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9797588,"byte_end":9797593,"line_start":81,"line_end":81,"column_start":18,"column_end":23},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":3157}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9797721,"byte_end":9797726,"line_start":89,"line_end":89,"column_start":25,"column_end":30},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":3085}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9798326,"byte_end":9798331,"line_start":113,"line_end":113,"column_start":16,"column_end":21},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":10110}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9798746,"byte_end":9798751,"line_start":130,"line_end":130,"column_start":18,"column_end":23},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":10117}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9799197,"byte_end":9799202,"line_start":147,"line_end":147,"column_start":17,"column_end":22},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":10121}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9799664,"byte_end":9799669,"line_start":164,"line_end":164,"column_start":19,"column_end":24},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":10129}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9800084,"byte_end":9800089,"line_start":181,"line_end":181,"column_start":19,"column_end":24},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":10131}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9800504,"byte_end":9800509,"line_start":198,"line_end":198,"column_start":19,"column_end":24},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":10123}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9800977,"byte_end":9800982,"line_start":215,"line_end":215,"column_start":19,"column_end":24},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":10125}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":9801447,"byte_end":9801452,"line_start":232,"line_end":232,"column_start":16,"column_end":21},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":10119}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9802965,"byte_end":9802970,"line_start":22,"line_end":22,"column_start":36,"column_end":41},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":186},"to":{"krate":4,"index":165}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9803033,"byte_end":9803038,"line_start":24,"line_end":24,"column_start":31,"column_end":36},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":186},"to":{"krate":4,"index":268}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9803125,"byte_end":9803130,"line_start":26,"line_end":26,"column_start":55,"column_end":60},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":186},"to":{"krate":4,"index":390}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9803289,"byte_end":9803294,"line_start":34,"line_end":34,"column_start":16,"column_end":21},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":2801}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9803389,"byte_end":9803394,"line_start":41,"line_end":41,"column_start":15,"column_end":20},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":3189}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9803416,"byte_end":9803421,"line_start":43,"line_end":43,"column_start":18,"column_end":23},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":3157}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9803559,"byte_end":9803564,"line_start":53,"line_end":53,"column_start":25,"column_end":30},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":3085}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9803850,"byte_end":9803855,"line_start":69,"line_end":69,"column_start":25,"column_end":30},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":3085}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9804152,"byte_end":9804157,"line_start":87,"line_end":87,"column_start":25,"column_end":30},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":3085}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9804443,"byte_end":9804448,"line_start":103,"line_end":103,"column_start":25,"column_end":30},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":3085}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9804745,"byte_end":9804750,"line_start":121,"line_end":121,"column_start":25,"column_end":30},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":3085}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9805036,"byte_end":9805041,"line_start":137,"line_end":137,"column_start":25,"column_end":30},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":3085}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9805338,"byte_end":9805343,"line_start":155,"line_end":155,"column_start":25,"column_end":30},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":3085}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9805629,"byte_end":9805634,"line_start":171,"line_end":171,"column_start":25,"column_end":30},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":3085}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9805928,"byte_end":9805933,"line_start":189,"line_end":189,"column_start":21,"column_end":26},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":3085}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9806203,"byte_end":9806208,"line_start":205,"line_end":205,"column_start":21,"column_end":26},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":3085}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9806543,"byte_end":9806548,"line_start":225,"line_end":225,"column_start":16,"column_end":21},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":10110}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9807009,"byte_end":9807014,"line_start":244,"line_end":244,"column_start":18,"column_end":23},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":10117}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9807508,"byte_end":9807513,"line_start":263,"line_end":263,"column_start":17,"column_end":22},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":10121}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9807967,"byte_end":9807972,"line_start":282,"line_end":282,"column_start":19,"column_end":24},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":10129}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9808438,"byte_end":9808443,"line_start":301,"line_end":301,"column_start":19,"column_end":24},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":10131}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9808909,"byte_end":9808914,"line_start":320,"line_end":320,"column_start":19,"column_end":24},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":10123}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9809372,"byte_end":9809377,"line_start":339,"line_end":339,"column_start":19,"column_end":24},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":10125}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":9809832,"byte_end":9809837,"line_start":358,"line_end":358,"column_start":16,"column_end":21},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":10119}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9811312,"byte_end":9811316,"line_start":19,"line_end":19,"column_start":36,"column_end":40},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":288},"to":{"krate":4,"index":165}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9811379,"byte_end":9811383,"line_start":21,"line_end":21,"column_start":31,"column_end":35},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":288},"to":{"krate":4,"index":268}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9811469,"byte_end":9811473,"line_start":23,"line_end":23,"column_start":54,"column_end":58},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":288},"to":{"krate":4,"index":390}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9811619,"byte_end":9811623,"line_start":31,"line_end":31,"column_start":6,"column_end":10},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":288},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9812637,"byte_end":9812641,"line_start":70,"line_end":70,"column_start":16,"column_end":20},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":288},"to":{"krate":1,"index":2801}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9812736,"byte_end":9812740,"line_start":77,"line_end":77,"column_start":15,"column_end":19},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":288},"to":{"krate":1,"index":3189}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9812762,"byte_end":9812766,"line_start":79,"line_end":79,"column_start":18,"column_end":22},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":288},"to":{"krate":1,"index":3157}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9812894,"byte_end":9812898,"line_start":87,"line_end":87,"column_start":25,"column_end":29},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":288},"to":{"krate":1,"index":3085}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9813496,"byte_end":9813500,"line_start":111,"line_end":111,"column_start":16,"column_end":20},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":288},"to":{"krate":1,"index":10110}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9813982,"byte_end":9813986,"line_start":130,"line_end":130,"column_start":18,"column_end":22},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":288},"to":{"krate":1,"index":10117}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9814487,"byte_end":9814491,"line_start":149,"line_end":149,"column_start":17,"column_end":21},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":288},"to":{"krate":1,"index":10121}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9815000,"byte_end":9815004,"line_start":168,"line_end":168,"column_start":19,"column_end":23},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":288},"to":{"krate":1,"index":10129}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9815485,"byte_end":9815489,"line_start":187,"line_end":187,"column_start":19,"column_end":23},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":288},"to":{"krate":1,"index":10131}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9815970,"byte_end":9815974,"line_start":206,"line_end":206,"column_start":19,"column_end":23},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":288},"to":{"krate":1,"index":10123}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9816487,"byte_end":9816491,"line_start":225,"line_end":225,"column_start":19,"column_end":23},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":288},"to":{"krate":1,"index":10125}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":9817001,"byte_end":9817005,"line_start":244,"line_end":244,"column_start":16,"column_end":20},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":288},"to":{"krate":1,"index":10119}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9818424,"byte_end":9818429,"line_start":19,"line_end":19,"column_start":36,"column_end":41},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":334},"to":{"krate":4,"index":165}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9818492,"byte_end":9818497,"line_start":21,"line_end":21,"column_start":31,"column_end":36},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":334},"to":{"krate":4,"index":268}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9818584,"byte_end":9818589,"line_start":23,"line_end":23,"column_start":55,"column_end":60},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":334},"to":{"krate":4,"index":390}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9818738,"byte_end":9818743,"line_start":31,"line_end":31,"column_start":6,"column_end":11},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":334},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9819758,"byte_end":9819763,"line_start":72,"line_end":72,"column_start":16,"column_end":21},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":334},"to":{"krate":1,"index":2801}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9819858,"byte_end":9819863,"line_start":79,"line_end":79,"column_start":15,"column_end":20},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":334},"to":{"krate":1,"index":3189}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9819885,"byte_end":9819890,"line_start":81,"line_end":81,"column_start":18,"column_end":23},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":334},"to":{"krate":1,"index":3157}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9820018,"byte_end":9820023,"line_start":89,"line_end":89,"column_start":25,"column_end":30},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":334},"to":{"krate":1,"index":3085}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9820623,"byte_end":9820628,"line_start":113,"line_end":113,"column_start":16,"column_end":21},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":334},"to":{"krate":1,"index":10110}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9821043,"byte_end":9821048,"line_start":130,"line_end":130,"column_start":18,"column_end":23},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":334},"to":{"krate":1,"index":10117}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9821494,"byte_end":9821499,"line_start":147,"line_end":147,"column_start":17,"column_end":22},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":334},"to":{"krate":1,"index":10121}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9821961,"byte_end":9821966,"line_start":164,"line_end":164,"column_start":19,"column_end":24},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":334},"to":{"krate":1,"index":10129}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9822381,"byte_end":9822386,"line_start":181,"line_end":181,"column_start":19,"column_end":24},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":334},"to":{"krate":1,"index":10131}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9822801,"byte_end":9822806,"line_start":198,"line_end":198,"column_start":19,"column_end":24},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":334},"to":{"krate":1,"index":10123}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9823274,"byte_end":9823279,"line_start":215,"line_end":215,"column_start":19,"column_end":24},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":334},"to":{"krate":1,"index":10125}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":9823744,"byte_end":9823749,"line_start":232,"line_end":232,"column_start":16,"column_end":21},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":334},"to":{"krate":1,"index":10119}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9825262,"byte_end":9825267,"line_start":22,"line_end":22,"column_start":36,"column_end":41},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":380},"to":{"krate":4,"index":165}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9825330,"byte_end":9825335,"line_start":24,"line_end":24,"column_start":31,"column_end":36},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":380},"to":{"krate":4,"index":268}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9825422,"byte_end":9825427,"line_start":26,"line_end":26,"column_start":55,"column_end":60},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":380},"to":{"krate":4,"index":390}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9825586,"byte_end":9825591,"line_start":34,"line_end":34,"column_start":16,"column_end":21},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":380},"to":{"krate":1,"index":2801}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9825686,"byte_end":9825691,"line_start":41,"line_end":41,"column_start":15,"column_end":20},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":380},"to":{"krate":1,"index":3189}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9825713,"byte_end":9825718,"line_start":43,"line_end":43,"column_start":18,"column_end":23},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":380},"to":{"krate":1,"index":3157}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9825856,"byte_end":9825861,"line_start":53,"line_end":53,"column_start":25,"column_end":30},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":380},"to":{"krate":1,"index":3085}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9826147,"byte_end":9826152,"line_start":69,"line_end":69,"column_start":25,"column_end":30},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":380},"to":{"krate":1,"index":3085}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9826450,"byte_end":9826455,"line_start":87,"line_end":87,"column_start":26,"column_end":31},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":380},"to":{"krate":1,"index":3085}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9826744,"byte_end":9826749,"line_start":103,"line_end":103,"column_start":26,"column_end":31},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":380},"to":{"krate":1,"index":3085}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9827048,"byte_end":9827053,"line_start":121,"line_end":121,"column_start":25,"column_end":30},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":380},"to":{"krate":1,"index":3085}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9827339,"byte_end":9827344,"line_start":137,"line_end":137,"column_start":25,"column_end":30},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":380},"to":{"krate":1,"index":3085}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9827641,"byte_end":9827646,"line_start":155,"line_end":155,"column_start":25,"column_end":30},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":380},"to":{"krate":1,"index":3085}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9827932,"byte_end":9827937,"line_start":171,"line_end":171,"column_start":25,"column_end":30},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":380},"to":{"krate":1,"index":3085}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9828236,"byte_end":9828241,"line_start":189,"line_end":189,"column_start":26,"column_end":31},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":380},"to":{"krate":1,"index":3085}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9828526,"byte_end":9828531,"line_start":205,"line_end":205,"column_start":26,"column_end":31},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":380},"to":{"krate":1,"index":3085}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9828876,"byte_end":9828881,"line_start":225,"line_end":225,"column_start":16,"column_end":21},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":380},"to":{"krate":1,"index":10110}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9829354,"byte_end":9829359,"line_start":244,"line_end":244,"column_start":18,"column_end":23},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":380},"to":{"krate":1,"index":10117}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9829865,"byte_end":9829870,"line_start":263,"line_end":263,"column_start":17,"column_end":22},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":380},"to":{"krate":1,"index":10121}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9830336,"byte_end":9830341,"line_start":282,"line_end":282,"column_start":19,"column_end":24},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":380},"to":{"krate":1,"index":10129}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9830827,"byte_end":9830832,"line_start":301,"line_end":301,"column_start":19,"column_end":24},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":380},"to":{"krate":1,"index":10131}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9831318,"byte_end":9831323,"line_start":320,"line_end":320,"column_start":19,"column_end":24},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":380},"to":{"krate":1,"index":10123}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9831793,"byte_end":9831798,"line_start":339,"line_end":339,"column_start":19,"column_end":24},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":380},"to":{"krate":1,"index":10125}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":9832265,"byte_end":9832270,"line_start":358,"line_end":358,"column_start":16,"column_end":21},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":380},"to":{"krate":1,"index":10119}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9872344,"byte_end":9872348,"line_start":1307,"line_end":1307,"column_start":14,"column_end":18},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":3247}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9872492,"byte_end":9872496,"line_start":1315,"line_end":1315,"column_start":20,"column_end":24},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":3278}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9872607,"byte_end":9872611,"line_start":1322,"line_end":1322,"column_start":17,"column_end":21},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":3306}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9872764,"byte_end":9872768,"line_start":1330,"line_end":1330,"column_start":23,"column_end":27},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":3333}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9872881,"byte_end":9872885,"line_start":1337,"line_end":1337,"column_start":16,"column_end":20},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":3311}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9873035,"byte_end":9873039,"line_start":1345,"line_end":1345,"column_start":22,"column_end":26},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":3337}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9873152,"byte_end":9873156,"line_start":1352,"line_end":1352,"column_start":17,"column_end":21},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":3316}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9873309,"byte_end":9873313,"line_start":1360,"line_end":1360,"column_start":23,"column_end":27},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":3341}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9873424,"byte_end":9873428,"line_start":1367,"line_end":1367,"column_start":14,"column_end":18},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":3262}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9873572,"byte_end":9873576,"line_start":1375,"line_end":1375,"column_start":20,"column_end":24},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":3290}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9873684,"byte_end":9873688,"line_start":1382,"line_end":1382,"column_start":14,"column_end":18},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":3257}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9873832,"byte_end":9873836,"line_start":1390,"line_end":1390,"column_start":20,"column_end":24},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":3286}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9873944,"byte_end":9873948,"line_start":1397,"line_end":1397,"column_start":14,"column_end":18},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":3274}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9874086,"byte_end":9874090,"line_start":1406,"line_end":1406,"column_start":14,"column_end":18},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":3299}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9874453,"byte_end":9874457,"line_start":1420,"line_end":1420,"column_start":14,"column_end":18},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":3252}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9874601,"byte_end":9874605,"line_start":1428,"line_end":1428,"column_start":20,"column_end":24},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":3282}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":9874719,"byte_end":9874723,"line_start":1435,"line_end":1435,"column_start":20,"column_end":24},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":2831}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9976067,"byte_end":9976072,"line_start":3301,"line_end":3301,"column_start":14,"column_end":19},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":3247}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9976217,"byte_end":9976222,"line_start":3309,"line_end":3309,"column_start":20,"column_end":25},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":3278}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9976333,"byte_end":9976338,"line_start":3316,"line_end":3316,"column_start":17,"column_end":22},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":3306}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9976492,"byte_end":9976497,"line_start":3324,"line_end":3324,"column_start":23,"column_end":28},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":3333}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9976610,"byte_end":9976615,"line_start":3331,"line_end":3331,"column_start":16,"column_end":21},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":3311}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9976766,"byte_end":9976771,"line_start":3339,"line_end":3339,"column_start":22,"column_end":27},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":3337}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9976884,"byte_end":9976889,"line_start":3346,"line_end":3346,"column_start":17,"column_end":22},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":3316}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9977043,"byte_end":9977048,"line_start":3354,"line_end":3354,"column_start":23,"column_end":28},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":3341}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9977159,"byte_end":9977164,"line_start":3361,"line_end":3361,"column_start":14,"column_end":19},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":3262}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9977309,"byte_end":9977314,"line_start":3369,"line_end":3369,"column_start":20,"column_end":25},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":3290}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9977422,"byte_end":9977427,"line_start":3376,"line_end":3376,"column_start":14,"column_end":19},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":3257}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9977572,"byte_end":9977577,"line_start":3384,"line_end":3384,"column_start":20,"column_end":25},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":3286}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9977685,"byte_end":9977690,"line_start":3391,"line_end":3391,"column_start":14,"column_end":19},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":3274}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9977830,"byte_end":9977835,"line_start":3400,"line_end":3400,"column_start":14,"column_end":19},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":3299}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9978199,"byte_end":9978204,"line_start":3414,"line_end":3414,"column_start":14,"column_end":19},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":3252}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9978349,"byte_end":9978354,"line_start":3422,"line_end":3422,"column_start":20,"column_end":25},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":3282}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9978468,"byte_end":9978473,"line_start":3429,"line_end":3429,"column_start":20,"column_end":25},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":2831}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9978883,"byte_end":9978888,"line_start":3442,"line_end":3442,"column_start":17,"column_end":22},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":3306}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9979042,"byte_end":9979047,"line_start":3450,"line_end":3450,"column_start":23,"column_end":28},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":3333}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9979160,"byte_end":9979165,"line_start":3457,"line_end":3457,"column_start":16,"column_end":21},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":3311}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9979316,"byte_end":9979321,"line_start":3465,"line_end":3465,"column_start":22,"column_end":27},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":3337}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9979434,"byte_end":9979439,"line_start":3472,"line_end":3472,"column_start":17,"column_end":22},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":3316}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9979593,"byte_end":9979598,"line_start":3480,"line_end":3480,"column_start":23,"column_end":28},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":3341}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9979709,"byte_end":9979714,"line_start":3487,"line_end":3487,"column_start":14,"column_end":19},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":3299}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9980066,"byte_end":9980071,"line_start":3501,"line_end":3501,"column_start":20,"column_end":25},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":2831}},{"span":{"file_name":"/Users/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":9980421,"byte_end":9980426,"line_start":3512,"line_end":3512,"column_start":13,"column_end":18},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":2836}}]}